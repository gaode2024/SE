*&---------------------------------------------------------------------*
*& Report ZDE_CON_PFMR_MASS_PROJECT_UPD
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zde_con_pfmr_mass_project_upd.
TYPES:
  BEGIN OF gty_bucket_struc,
    item_type       TYPE rpm_tv_extid,
    zzplan_field    TYPE rpm_tv_extid,
    zzsub_planfield TYPE rpm_tv_extid,
    zztech_center   TYPE rpm_tv_extid,
    zzsub_system    TYPE rpm_tv_extid,
    guid_l2         TYPE rpm_tv_guid,
    guid_l3         TYPE rpm_tv_guid,
    guid_l4         TYPE rpm_tv_guid,
    guid_l5         TYPE rpm_tv_guid,
    guid_l6         TYPE rpm_tv_guid,
  END OF gty_bucket_struc .
TYPES:
  gtt_bucket_struc TYPE STANDARD TABLE OF gty_bucket_struc.
TYPES:
  BEGIN OF gty_output_data.
    INCLUDE TYPE /rpm/ts_item_d_api.
TYPES: project_KEY TYPE /bobf/conf_key,
  END OF gty_output_data .
TYPES:
  gtt_output_data TYPE STANDARD TABLE OF gty_output_data
    WITH DEFAULT KEY .
DATA:
  gv_portfolio_guid TYPE /rpm/tv_guid,
  gs_mp_hdr         TYPE /cpd/s_mp_hdr_k,
  gt_bucket_api     TYPE /rpm/tt_bucket_api,
  gt_output_data    TYPE gtt_output_data,
  gt_bucket_struc   TYPE gtt_bucket_struc,
  gt_log            TYPE TABLE OF zcon_pfmt_synlog.

SELECTION-SCREEN BEGIN OF BLOCK bl01 WITH FRAME TITLE TEXT-b01.

  SELECTION-SCREEN BEGIN OF LINE.
    PARAMETERS r_upload RADIOBUTTON GROUP rgp DEFAULT 'X'.
    SELECTION-SCREEN COMMENT 3(35) TEXT-001 FOR FIELD r_upload.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
    PARAMETERS r_link RADIOBUTTON GROUP rgp.
    SELECTION-SCREEN COMMENT 3(35) TEXT-002 FOR FIELD r_link.
  SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN FUNCTION KEY 1.
  PARAMETERS:
    p_file TYPE rlgrap-filename,
    p_guid TYPE char32 AS LISTBOX VISIBLE LENGTH 24.
  SELECT-OPTIONS:
          s_mpid FOR gs_mp_hdr-mp_id ,
          s_mptype FOR gs_mp_hdr-mp_type NO INTERVALS.
  SELECTION-SCREEN SKIP 1.

SELECTION-SCREEN END OF BLOCK bl01.

INITIALIZATION.
  PERFORM frm_init_screen.

START-OF-SELECTION.

  PERFORM f_main_process.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*& Form f_main_process
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_main_process .
  gv_portfolio_guid = p_guid.
*  Read Data
  PERFORM f_read_data.
* check data
*  PERFORM f_edit_data.

  PERFORM f_create_item.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form f_edit_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_edit_data .
  DATA: lv_authorized TYPE boole_d,
        ls_context    TYPE /rpm/ts_object_hier,
        lv_msg        TYPE string,
        lr_item       TYPE REF TO /rpm/cl_item_d_api.
* Check 'Create' authorization on parent object
  CALL METHOD lr_item->check_authorization
    EXPORTING
      is_context    = ls_context
      iv_mode       = 'C'
    RECEIVING
      ev_authorized = lv_authorized.
* Not authorized for creation : log message and set ev_rc
  IF lv_authorized IS INITIAL.
    MESSAGE e040(/rpm/item) INTO lv_msg.
    RETURN.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form f_read_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_read_data .
  IF r_link EQ abap_true.
    IF gv_portfolio_guid IS NOT INITIAL.
      CALL METHOD zde_cl_con_pfm_bucket_api_enh=>get_bucket_list
        EXPORTING
          iv_portfolio_guid = gv_portfolio_guid
        IMPORTING
          et_bucket_api     = gt_bucket_api.
    ENDIF.
    SELECT DISTINCT
     hdr~db_key AS project_key,
     hdr~mp_id AS external_id,
     hdr~proj_mgr_bupa_id AS zzpm_bupa_id,
     hdrt~text AS proj_description,
     hdr~start_date AS planned_start,
     hdr~end_date AS planned_finish,
     hdr~mp_stage AS status,
     hdr~zzext_cooper,
     hdr~zzcooper_detail,
     hdr~zzdev_status,
     hdr~zzboard_name,
     hdr~zzboard_date,
     hdr~zzcustomer_vis,
     hdr~zzcontract_typ,
     hdr~zzplan_field,
     hdr~zzsub_planfield,
     hdr~zztech_center,
     hdr~zzsub_system,
     hdr~zzfkstl,
     hdr~mp_type AS item_type

   FROM /cpd/d_mp_hdr AS hdr
   LEFT OUTER JOIN /cpd/d_mp_hdr_s AS hdrt ON hdr~db_key = hdrt~parent_key
   LEFT JOIN /rpm/item_d AS portfolio_item ON portfolio_item~external_id <> hdr~mp_id
   INTO CORRESPONDING FIELDS OF TABLE @gt_output_data.
    IF sy-subrc = 0.
      SELECT DISTINCT item_type,zzplan_field,zzsub_planfield,zztech_center,zzsub_system
        FROM @gt_output_data AS main
        INTO CORRESPONDING FIELDS OF TABLE @gt_bucket_struc.

      IF sy-subrc = 0 AND  gt_bucket_api IS NOT  INITIAL.
        SORT gt_bucket_api BY external_id.
        LOOP AT gt_bucket_struc ASSIGNING FIELD-SYMBOL(<ls_bucket_struc>).
          READ TABLE gt_bucket_api ASSIGNING FIELD-SYMBOL(<ls_bucket_api>)
          WITH KEY external_id = <ls_bucket_struc>-item_type BINARY SEARCH.
          IF sy-subrc <> 0.CONTINUE.ENDIF.
          <ls_bucket_struc>-guid_l2 = <ls_bucket_api>-bucket_guid.
          READ TABLE gt_bucket_api ASSIGNING <ls_bucket_api>
          WITH KEY external_id = <ls_bucket_struc>-zzplan_field parent_guid = <ls_bucket_struc>-guid_l2  BINARY SEARCH.
          IF sy-subrc <> 0.CONTINUE.ENDIF.
          <ls_bucket_struc>-guid_l3 = <ls_bucket_api>-bucket_guid.
          READ TABLE gt_bucket_api ASSIGNING <ls_bucket_api>
          WITH KEY external_id = <ls_bucket_struc>-zzsub_planfield parent_guid = <ls_bucket_struc>-guid_l3  BINARY SEARCH.
          IF sy-subrc <> 0.CONTINUE.ENDIF.
          <ls_bucket_struc>-guid_l4 = <ls_bucket_api>-bucket_guid.
          READ TABLE gt_bucket_api ASSIGNING <ls_bucket_api>
          WITH KEY external_id = <ls_bucket_struc>-zztech_center parent_guid = <ls_bucket_struc>-guid_l4  BINARY SEARCH.
          IF sy-subrc <> 0.CONTINUE.ENDIF.
          <ls_bucket_struc>-guid_l5 = <ls_bucket_api>-bucket_guid.
          READ TABLE gt_bucket_api ASSIGNING <ls_bucket_api>
          WITH KEY external_id = <ls_bucket_struc>-zzsub_system parent_guid = <ls_bucket_struc>-guid_l5  BINARY SEARCH.
          IF sy-subrc <> 0.CONTINUE.ENDIF.
          <ls_bucket_struc>-guid_l6 = <ls_bucket_api>-bucket_guid.
        ENDLOOP.
        DELETE gt_bucket_struc WHERE guid_l6 IS INITIAL.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form f_create_item
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_create_item.
  TYPES:
  ty_change_mode TYPE c LENGTH 1 .
  TYPES:
    BEGIN OF ty_modifications,
      bo_node_name         TYPE string,
      key                  TYPE REF TO data,
      change_mode          TYPE ty_change_mode,
      data                 TYPE REF TO data,
      changed_fields       TYPE scol_string_t,
      association          TYPE string,
      source_bo_node       TYPE string,
      source_key           TYPE REF TO data,
      source_key_is_handle TYPE sesf_boolean,
    END OF ty_modifications .
  TYPES:
      tt_modifications TYPE STANDARD TABLE OF ty_modifications
  WITH DEFAULT KEY .
  DATA:
    lr_item                TYPE REF TO /rpm/cl_item_d_api,
    lr_link_api             TYPE REF TO /rpm/cl_object_link_api,
    lr_msg_handler         TYPE REF TO /rpm/cl_message_handle,
    ls_item_with_language  TYPE /rpm/ts_item_key_in,
    ls_short_text_key      TYPE /rpm/ts_comment_key,
    lt_modif               TYPE tt_modifications,
    ls_modif               TYPE ty_modifications,
    lv_authorized          TYPE boole_d,
    ls_context             TYPE /rpm/ts_object_hier,
    lv_msg                 TYPE string,
    lr_key                 TYPE REF TO data,
    lr_data                TYPE REF TO data,
    lr_short_text_key      TYPE REF TO data,
    lr_short_texts         TYPE REF TO data,
    lv_item_key_type       TYPE fieldname,
    lv_item_data_type      TYPE fieldname,
    lv_short_text_key_type TYPE fieldname,
    lv_rc                  TYPE i,
    ls_guid                TYPE /rpm/ts_guid,
    ls_attr                TYPE /rpm/ts_item_d_api,
    ls_item_attr           TYPE /rpm/ts_item_d_api,
    ls_msg                 TYPE /rpm/ts_messages,
    lt_msg                 TYPE /rpm/tt_messages,
    lv_language            TYPE laiso.

  FIELD-SYMBOLS:
    <fs_key>            TYPE any,
    <fs_data>           TYPE any,
    <fv_data>           TYPE any,
    <fs_short_text_key> TYPE any,
    <fv_short_texts>    TYPE any.
  CONSTANTS:
    lc_currency    TYPE waers_curc VALUE 'EUR',
    lc_unit        TYPE /rpm/tv_unit VALUE 'TAG',
    lc_period_type TYPE /rpm/tv_period_type VALUE '12',
    lc_icon_s      TYPE icon_d VALUE '@5B@',
    lc_icon_e      TYPE icon_d VALUE '@5C@'.

  lv_item_key_type        = '/RPM/TS_ITEM_KEY_IN'.
  lv_item_data_type       = /rpm/cl_item_d_api=>ov_item_api_type.
  lv_short_text_key_type  = /rpm/cl_object_api=>ov_comment_key_type.

  lv_language = cl_rpm_language_buffer=>convert_langu_to_laiso( sy-langu ).
* Check if portfolio and bucket are created.

  lr_item ?= /rpm/cl_item_d_api=>get_instance( ).

  CREATE OBJECT lr_msg_handler.
  ls_context-portfolio_guid = gv_portfolio_guid.
  ls_context-parent_type = /rpm/cl_co=>sc_ot_bucket.
  ls_context-object_type = /rpm/cl_co=>sc_ot_item.
  LOOP AT gt_output_data ASSIGNING FIELD-SYMBOL(<ls_output_data>).
    READ TABLE gt_bucket_struc ASSIGNING FIELD-SYMBOL(<ls_bucket_struc>)
    WITH KEY
    item_type = <ls_output_data>-item_type
    zzplan_field = <ls_output_data>-zzplan_field
    zzsub_planfield = <ls_output_data>-zzsub_planfield
    zztech_center = <ls_output_data>-zztech_center
    zzsub_system = <ls_output_data>-zzsub_system.
    IF sy-subrc = 0.
      <ls_output_data>-parent_guid = <ls_bucket_struc>-guid_l6.
    ELSE.
      CONTINUE.
    ENDIF.
    ls_context-parent_guid = <ls_output_data>-parent_guid.
* Check 'Create' authorization on parent object
    CALL METHOD lr_item->check_authorization
      EXPORTING
        is_context    = ls_context
        iv_mode       = 'C'
      RECEIVING
        ev_authorized = lv_authorized.
* Not authorized for creation : log message and set ev_rc
    IF lv_authorized IS INITIAL.
      MESSAGE e040(/rpm/item) INTO lv_msg.
      RETURN.
    ENDIF.
* Set item attributes
    REFRESH lt_modif.
    CLEAR ls_modif.
    CLEAR: lr_key, lr_data.

    CREATE DATA lr_key TYPE (lv_item_key_type).
    ASSIGN lr_key->* TO <fs_key>.

* Build modification table
    MOVE-CORRESPONDING <ls_output_data> TO ls_attr.
    ls_attr-cap_periodtype = ls_attr-periodtype  = lc_period_type.
    ls_attr-unit  = lc_unit.
    ls_attr-portfolio_guid = gv_portfolio_guid.

    ls_item_with_language-language        = lv_language.
    ls_item_with_language-portfl_guid     = ls_attr-portfolio_guid.
    ls_item_with_language-bucket_guid     = ls_attr-parent_guid.
    ls_item_with_language-call_mode       = 'C'.

    <fs_key>     = ls_item_with_language.
    ls_modif-key = lr_key.
    ls_modif-bo_node_name = /rpm/cl_item_d_api=>ov_node_item_detail.
    ls_modif-change_mode  = 'C'.

    CREATE DATA lr_data TYPE (lv_item_data_type).
    ASSIGN lr_data->* TO <fs_data>.
    <fs_data> = ls_attr.
    ls_modif-data = lr_data.
    APPEND ls_modif TO lt_modif.
* Call modify in Create mode
    CALL METHOD lr_item->/rpm/if_provider_access~modify
      EXPORTING
        in_message_buffer = lr_msg_handler
      CHANGING
        in_modifications  = lt_modif.

    CLEAR ls_attr-guid.
    READ TABLE lt_modif INTO ls_modif WITH KEY change_mode = 'C'.
    IF sy-subrc = 0.
      ASSIGN ls_modif-data->* TO <fs_data>.
      ASSIGN COMPONENT 'GUID' OF STRUCTURE <fs_data> TO <fv_data>.
      IF sy-subrc = 0.
        ls_attr-guid = <fv_data>.
      ENDIF.
    ENDIF.

    lv_rc = lr_item->ov_rc.
    IF lv_rc NE 0 .
      RETURN.
    ENDIF.
*    MOVE-CORRESPONDING <ls_output_data> to ls_attr.
*    ls_attr-guid = lv_item_guid.
*    ls_attr-cap_periodtype = ls_attr-periodtype  = lc_period_type.
*    ls_attr-unit  = lc_unit.

*    ls_attr-forecast_start  = sy-datum + 365.
*    ls_attr-planned_start   = sy-datum + 365.
*    ls_attr-actual_start    = sy-datum + 365.
*    ls_attr-forecast_finish = sy-datum + 2 * 365.
*    ls_attr-planned_finish  = sy-datum + 2 * 365.
*    ls_attr-actual_finish   = sy-datum + 2 * 365.

    REFRESH lt_modif.
*    CLEAR ls_modif.
*    CLEAR: lr_key, lr_data.
*
*    CREATE DATA lr_key TYPE (lv_item_key_type).
*    ASSIGN lr_key->* TO <fs_key>.
*    ls_item_with_language-language        = lv_language.
*    ls_item_with_language-portfl_guid     = ls_attr-portfolio_guid.
*    ls_item_with_language-bucket_guid     = ls_attr-parent_guid.
*    ls_item_with_language-call_mode       = 'U'.
*
*    ls_modif-bo_node_name = /rpm/cl_item_d_api=>ov_node_item_detail.
*    ls_modif-change_mode  = 'U'.
*    <fs_key>     = ls_item_with_language.
*    ls_modif-key = lr_key.
*
*    CREATE DATA lr_data TYPE (lv_item_data_type).
*    ASSIGN lr_data->* TO <fs_data>.
*    <fs_data> = ls_attr.
*    ls_modif-data = lr_data.
*    APPEND ls_modif TO lt_modif.

    CLEAR   ls_modif.
    CLEAR:  lr_short_texts.

* Short text Processing - short text key
    CREATE DATA lr_short_text_key TYPE (lv_short_text_key_type).
    ASSIGN lr_short_text_key->* TO <fs_short_text_key>.
    ls_short_text_key-guid = ls_attr-guid."lv_guid.
    ls_short_text_key-language = lv_language.
    <fs_short_text_key> =  ls_short_text_key.

    ls_modif-bo_node_name = /rpm/cl_item_d_api=>ov_node_short_text.
    ls_modif-change_mode  = 'U'.
    ls_modif-key = lr_short_text_key.

* short text data
    CREATE DATA lr_short_texts TYPE string.
    ASSIGN lr_short_texts->* TO <fv_short_texts>.
    <fv_short_texts>  = ls_attr-external_id.
    ls_modif-data = lr_short_texts.
    APPEND ls_modif TO lt_modif.
* Call modify in Update mode
    CALL METHOD lr_item->/rpm/if_provider_access~modify
      EXPORTING
        in_message_buffer = lr_msg_handler
      CHANGING
        in_modifications  = lt_modif.

    lv_rc = lr_item->ov_rc.

    CALL METHOD lr_msg_handler->get_all_messages
      RECEIVING
        et_messages = lt_msg.

    IF lv_rc NE 0 .
      RETURN.
    ENDIF.

* update RPM_OBJ_LINK database table
    CALL METHOD lr_link_api->create_cpm_object_link
      EXPORTING
        iv_item_guid = ls_attr-guid
        iv_mp_guid   = <ls_output_data>-project_key
      IMPORTING
        ev_rc        = lv_rc
        et_messages  = lt_msg.
    IF lv_rc NE 0 .
      RETURN.
    ENDIF.
    CALL FUNCTION '/RPM/SAVE_CHANGES'
      IMPORTING
        ev_rc  = lv_rc
        et_msg = lt_msg.

    IF lv_rc NE 0 .
      RETURN.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_init_screen
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_init_screen .
  DATA:
    lv_id         TYPE vrm_id,
    lt_vrm_values TYPE vrm_values,
    ls_vrm_values TYPE vrm_value.
  SELECT PortfolioGuid , portfolio~Portfolioid , portfolio~portfoliotype
    FROM zcon_pfm_ddl_i_portfolio AS portfolio
  INTO TABLE @DATA(lt_data).
  IF sy-subrc = 0.
    LOOP AT lt_data INTO DATA(ls_data).
      ls_vrm_values-key = ls_data-PortfolioGuid.
      CONCATENATE ls_data-Portfolioid  ls_data-portfoliotype INTO ls_vrm_values-text SEPARATED BY space.
      APPEND ls_vrm_values TO lt_vrm_values.
    ENDLOOP.
    MOVE-CORRESPONDING lt_data TO lt_vrm_values.
    CALL FUNCTION 'VRM_SET_VALUES'
      EXPORTING
        id     = 'P_GUID'
        values = lt_vrm_values.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.
ENDFORM.
