*&---------------------------------------------------------------------*
*& Report ZF_REBUILD_FIDOC [CURRENT VERSION 2.9]
*&---------------------------------------------------------------------*
*& Author: ESCHENBRENNV - D070241
*& Book documents from VBDATA, RFC, and RFDT, build missing entries
*& or modify manually.
*&
*& Version 0.1: D070241 - 05.12.2017
*& Version 0.2: D070241 - 06.12.2017: Import BSE_CLR and SPLINFO from
*&                                    VBDATA
*& Version 0.3: D070241 - 06.12.2017: Bug fix SPLINFO_VAL update.
*& Version 0.4: D070241 - 08.12.2017: New display (LED) and selection
*&                                    design.
*& Version 0.5: D070241 - 25.04.2018: Build functions enabled.
*& Version 0.6: D070241 - 26.04.2018: ADAPT TO ACDOCA
*&
*& Version 1.0: D070241 - 26.04.2018: First release.
*& Version 1.1: D070241 - 09.05.2018: Fix of BKPF Build in S4.
*& Version 1.2: D070241 - 30.07.2018: Multiple BSEG Build Fix.
*& Version 1.3: D070241 - 01.08.2018: Mass update enabled, test log save.
*& Version 1.4: D070241 - 13.08.2018: BSEG Build fix.
*& Version 1.5: D070241 - 23.10.2019: Removed inline instantiation for
*&                                    older basis releases.
*& Version 1.7: D070241 - 24.01.2019: Corr of V1.6
*& Version 1.8: D070241 - 05.02.2019: Dynamic coding of 2. and 3.LC
*& Version 1.9: D070241 - 20.03.2019: BSEG-H_fields fix and build GL
*&                                    option.
*& Version 1.10: D070241 - 08.04.2019: Fix build and check of SPLINFO
*&
*& Version 2.0: D070241 - 13.02.2020: Optimized mass processing
*&                                    Optimized display with flags
*&                                    Many new checks between BKPF/BSEG/GL
*&                                    Refined Selection Screen
*& Version 2.1: D070241 - 26.05.2020: Tested Universal Version.
*& Version 2.2: D070241 - 27.05.2020: VBUND/RASSC Check/Corr.
*& Version 2.3: D070241 - 23.06.2020: SPLINFO BUILD Fix
*& Version 2.4: D070241 - 23.06.2020: Clustered BSEG compatibility
*&                                    Parallel RFDT processing.
*& Version 2.5: D070241 - 26.08.2020: Corr BKPF-STBLG when missing (S4).
*& Version 2.6: D070241 - 12.10.2020: Extended compat. for lower release
*& Version 2.7: D070241 - 13.01.2021: KTOPL in ACDOCA Build.
*& Version 2.8: D070241 - 06.07.2022: Account selection fix.
*& Version 2.9: D070241 - 30.06.3024: Fix call of G_GLU1_TO_AC_DOC_TRANSFORM
*& Available in ER9 and EBJ. SAME VERSION WORKS FOR S4 AND NEWGL !
*&---------------------------------------------------------------------*
REPORT zf_rebuild_fidoc LINE-SIZE 92.


************************************************************************
* DATA DECLARATION
************************************************************************
DATA ok_code LIKE sy-ucomm.
DATA acdoca_active TYPE i.

DATA gd_sy TYPE sy.

DATA bsis TYPE c LENGTH 4 VALUE 'BSIS'.
DATA bsas TYPE c LENGTH 4 VALUE 'BSAS'.
DATA bsid TYPE c LENGTH 4 VALUE 'BSID'.
DATA bsad TYPE c LENGTH 4 VALUE 'BSAD'.
DATA bsik TYPE c LENGTH 4 VALUE 'BSIK'.
DATA bsak TYPE c LENGTH 4 VALUE 'BSAK'.

TABLES: bkpf, bseg, vbhdr, vbmod, vbdata, glu1, sscrfields, t881.
TYPES: ty_it_events TYPE STANDARD TABLE OF cntl_simple_event WITH DEFAULT KEY.
TYPES: fagl_splinfo_t TYPE TABLE OF fagl_splinfo.
TYPES: fagl_splinfo_val_t TYPE TABLE OF fagl_splinfo_val.
DATA join_string TYPE c LENGTH 200.

TYPE-POOLS zcol.
CONSTANTS:
  zcol_yellow(04) TYPE c VALUE 'C300',
  zcol_green(04)  TYPE c VALUE 'C500',
  zcol_red(04)    TYPE c VALUE 'C600'.

TYPES: BEGIN OF glitem,
         activ     TYPE glu1-activ,
         rmvct     TYPE glu1-rmvct,
         rtcur     TYPE glu1-rtcur,
         racct     TYPE glu1-racct,
         cost_elem TYPE glu1-cost_elem,
         rcntr     TYPE glu1-rcntr,
         rfarea    TYPE glu1-rfarea,
         kokrs     TYPE glu1-kokrs,
         rassc     TYPE glu1-rassc,
         rbusa     TYPE glu1-rbusa,
         prctr     TYPE glu1-prctr,
         segment   TYPE glu1-segment,
         sbusa     TYPE glu1-sbusa,
         pprctr    TYPE glu1-pprctr,
         psegment  TYPE glu1-psegment,
         tsl       TYPE glu1-tsl,
         hsl       TYPE glu1-hsl,
         ksl       TYPE glu1-ksl,
         osl       TYPE glu1-osl,
         msl       TYPE glu1-msl,
         wsl       TYPE glu1-wsl,
         buzei     TYPE glu1-buzei,
         bschl     TYPE glu1-bschl,
       END OF glitem.

TYPES: BEGIN OF bal0,
         wrbtr TYPE bseg-wrbtr,
         dmbtr TYPE bseg-dmbtr,
         dmbe2 TYPE bseg-dmbe2,
         dmbe3 TYPE bseg-dmbe3,
       END OF bal0.

TYPES:
  BEGIN OF gty_s_curr_mapp,
    rldnr TYPE fagl_rldnr,
    dmbe2 TYPE fieldname,
    dmbe3 TYPE fieldname,
    hwae2 TYPE fieldname,
    hwae3 TYPE fieldname,
  END OF gty_s_curr_mapp .
TYPES:
  gty_t_curr_mapp TYPE TABLE OF gty_s_curr_mapp .

DATA: BEGIN OF gs_protocol.
DATA bukrs TYPE c LENGTH 4.
DATA belnr TYPE bkpf-belnr.
DATA gjahr TYPE bkpf-gjahr.
DATA rldnr TYPE c LENGTH 2.
DATA buzei TYPE c LENGTH 3.
DATA type TYPE c LENGTH 4.
DATA error TYPE c LENGTH 20.
DATA message TYPE c LENGTH 40.
DATA rowcolor TYPE c LENGTH 4.
DATA END OF gs_protocol.

DATA log_read TYPE c LENGTH 1.

DATA gt_protocol LIKE TABLE OF gs_protocol.
DATA gt_protocol_store LIKE gt_protocol.
DATA gt_preprotocol LIKE TABLE OF gs_protocol.

DATA: BEGIN OF glu1mod.
DATA zzz_tabname TYPE t800a-ntable.
INCLUDE TYPE glu1.
DATA END OF glu1mod.

DATA: BEGIN OF bkpfmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bkpf.
DATA END OF bkpfmod.

DATA: BEGIN OF bkpfmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bkpf.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bkpfmoddisp.

DATA: BEGIN OF bsegmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bseg.
DATA END OF bsegmod.

DATA: BEGIN OF bsegmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bseg.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsegmoddisp.

DATA: BEGIN OF bsecmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsec.
DATA END OF bsecmod.

DATA: BEGIN OF bsecmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsec.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsecmoddisp.

DATA: BEGIN OF bsetmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bset.
DATA END OF bsetmod.

DATA: BEGIN OF bsetmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bset.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsetmoddisp.

DATA: BEGIN OF bsedmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsed.
DATA END OF bsedmod.

DATA: BEGIN OF bsedmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsed.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsedmoddisp.

DATA: BEGIN OF bsismod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsis.
DATA END OF bsismod.

DATA: BEGIN OF bsismoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsis.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsismoddisp.

DATA: BEGIN OF bsasmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsas.
DATA END OF bsasmod.

DATA: BEGIN OF bsasmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsas.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsasmoddisp.

DATA: BEGIN OF bsidmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsid.
DATA END OF bsidmod.

DATA: BEGIN OF bsidmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsid.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsidmoddisp.

DATA: BEGIN OF bsadmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsad.
DATA END OF bsadmod.

DATA: BEGIN OF bsadmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsad.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsadmoddisp.

DATA: BEGIN OF bsikmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsik.
DATA END OF bsikmod.

DATA: BEGIN OF bsikmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsik.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsikmoddisp.

DATA: BEGIN OF bsakmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsak.
DATA END OF bsakmod.

DATA: BEGIN OF bsakmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bsak.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bsakmoddisp.

DATA: BEGIN OF bseg_addmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bseg_add.
DATA END OF bseg_addmod.

DATA: BEGIN OF bseg_addmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE bseg_add.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bseg_addmoddisp.

DATA: BEGIN OF splinfomod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE fagl_splinfo.
DATA END OF splinfomod.

DATA: BEGIN OF splinfomoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE fagl_splinfo.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF splinfomoddisp.

DATA: BEGIN OF splinfovalmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE fagl_splinfo_val.
DATA END OF splinfovalmod.

DATA: BEGIN OF splinfovalmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
INCLUDE TYPE fagl_splinfo_val.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF splinfovalmoddisp.

DATA: BEGIN OF glu1modmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
DATA zzz_tabname TYPE t800a-ntable.
INCLUDE TYPE glu1.
DATA END OF glu1modmod.

DATA: BEGIN OF glu1moddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
DATA zzz_tabname TYPE t800a-ntable.
INCLUDE TYPE glu1.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF glu1moddisp.

DATA: BEGIN OF bse_clrmod.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
DATA zzz_tabname TYPE t800a-ntable.
INCLUDE TYPE bse_clr.
DATA END OF bse_clrmod.

DATA: BEGIN OF bse_clrmoddisp.
DATA orig TYPE c LENGTH 4.
DATA check TYPE c LENGTH 1.
DATA control TYPE c LENGTH 4.
DATA error TYPE c LENGTH 30.
DATA pairing TYPE i.
DATA zzz_tabname TYPE t800a-ntable.
INCLUDE TYPE bse_clr.
DATA rowcolor TYPE c LENGTH 4.
*DATA style TYPE lvc_t_styl.
DATA END OF bse_clrmoddisp.

DATA: BEGIN OF flag,
        control TYPE c LENGTH 4,
        error   TYPE c LENGTH 30,
        bukrs   TYPE bkpf-bukrs,
        belnr   TYPE bkpf-belnr,
        gjahr   TYPE bkpf-belnr,
        buzei   TYPE bseg-buzei,
        rldnr   TYPE glu1-rldnr,
      END OF flag.

DATA gt_flag LIKE TABLE OF flag.
DATA ls_flag LIKE flag.

DATA pairing_counter TYPE i.

DATA simulate_bukrs TYPE bkpf-bukrs.
DATA simulate_belnr TYPE bkpf-belnr.
DATA simulate_gjahr TYPE bkpf-gjahr.

DATA: BEGIN OF a_field OCCURS 0.
        INCLUDE STRUCTURE sval.
DATA: END OF a_field.

DATA: vbkey               TYPE vbhdr-vbkey,
      vbmod_vbkey         TYPE vbmod-vbkey,
      gt_temp_bkpf        TYPE TABLE OF bkpf,
      gt_temp_bseg        TYPE TABLE OF bseg,
      gt_temp_bsec        TYPE TABLE OF bsec,
      gt_temp_bsed        TYPE TABLE OF bsed,
      gt_temp_bset        TYPE TABLE OF bset,
      gt_temp_bseg_add    TYPE TABLE OF bseg_add,
      gt_temp_bsis        TYPE TABLE OF bsis,
      gt_temp_bsas        TYPE TABLE OF bsas,
      gt_temp_bsik        TYPE TABLE OF bsik,
      gt_temp_bsak        TYPE TABLE OF bsak,
      gt_temp_bsid        TYPE TABLE OF bsid,
      gt_temp_bsad        TYPE TABLE OF bsad,
      gt_temp_bse_clr     TYPE TABLE OF bse_clr,
      gt_temp_splinfo     TYPE TABLE OF fagl_splinfo,
      gt_temp_splinfo_val TYPE TABLE OF fagl_splinfo_val,
      gt_temp_glu1mod     LIKE TABLE OF glu1mod,
      gt_temp_ausz3       TYPE TABLE OF ausz_clr,
      gt_bseg_disp        LIKE TABLE OF bsegmoddisp,
      gt_bsis_disp        LIKE TABLE OF bsismoddisp,
      gt_flag_disp        LIKE gt_flag,
      gt_bkpf_disp        LIKE TABLE OF bkpfmoddisp,
      gt_bseg_modif       LIKE TABLE OF bsegmod,
      gt_gt_bseg_modif    LIKE TABLE OF gt_bseg_disp,
      gt_db_bkpf          TYPE TABLE OF bkpf,
      gt_db_bseg          TYPE TABLE OF bseg,
      gt_db_bsec          TYPE TABLE OF bsec,
      gt_db_bsed          TYPE TABLE OF bsed,
      gt_db_bset          TYPE TABLE OF bset,
      gt_db_bseg_add      TYPE TABLE OF bseg_add,
      gt_db_bsis          TYPE TABLE OF bsis,
      gt_db_bsas          TYPE TABLE OF bsas,
      gt_db_bsik          TYPE TABLE OF bsik,
      gt_db_bsak          TYPE TABLE OF bsak,
      gt_db_bsid          TYPE TABLE OF bsid,
      gt_db_bsad          TYPE TABLE OF bsad,
      gt_db_bse_clr       TYPE TABLE OF bse_clr,
      gt_db_splinfo       TYPE TABLE OF fagl_splinfo,
      gt_db_splinfo_val   TYPE TABLE OF fagl_splinfo_val,
      gt_db_glu1mod       LIKE TABLE OF glu1mod,
      gt_rfc_bkpf         TYPE TABLE OF bkpf,
      gt_rfc_bseg         TYPE TABLE OF bseg,
      gt_rfc_bsec         TYPE TABLE OF bsec,
      gt_rfc_bsed         TYPE TABLE OF bsed,
      gt_rfc_bset         TYPE TABLE OF bset,
      gt_rfc_bseg_add     TYPE TABLE OF bseg_add,
      gt_rfc_bsis         TYPE TABLE OF bsis,
      gt_rfc_bsas         TYPE TABLE OF bsas,
      gt_rfc_bsik         TYPE TABLE OF bsik,
      gt_rfc_bsak         TYPE TABLE OF bsak,
      gt_rfc_bsid         TYPE TABLE OF bsid,
      gt_rfc_bsad         TYPE TABLE OF bsad,
      gt_rfc_bse_clr      TYPE TABLE OF bse_clr,
      gt_rfc_splinfo      TYPE TABLE OF fagl_splinfo,
      gt_rfc_splinfo_val  TYPE TABLE OF fagl_splinfo_val,
      gt_rfc_glu1mod      LIKE TABLE OF glu1mod,
      gt_bse_clr          LIKE TABLE OF bse_clrmoddisp,
      gt_vbmod_post       TYPE TABLE OF vbmod,
      gt_vbmod_fagl       TYPE TABLE OF vbmod,
      gt_vbmod_split      TYPE TABLE OF vbmod,
      gt_glu1mod          LIKE TABLE OF glu1moddisp,
      gt_temp_glu1mod_add LIKE TABLE OF rgiad2,
      gt_bkpf             LIKE TABLE OF bkpfmoddisp,
      gt_doclist          LIKE TABLE OF bkpfmoddisp,
      gt_bseg             LIKE TABLE OF bsegmoddisp,
      gt_bsis             LIKE TABLE OF bsismoddisp,
      gt_bsas             LIKE TABLE OF bsasmoddisp,
      gt_bsik             LIKE TABLE OF bsikmoddisp,
      gt_bsak             LIKE TABLE OF bsakmoddisp,
      gt_bsid             LIKE TABLE OF bsidmoddisp,
      gt_bsad             LIKE TABLE OF bsadmoddisp,
      gt_bsec             LIKE TABLE OF bsecmoddisp,
      gt_bsed             LIKE TABLE OF bsedmoddisp,
      gt_bset             LIKE TABLE OF bsetmoddisp,
      gs_glu1mod          LIKE glu1mod,
      gt_bsas_disp        LIKE TABLE OF bsasmoddisp,
      gt_bsik_disp        LIKE TABLE OF bsikmoddisp,
      gt_bsak_disp        LIKE TABLE OF bsakmoddisp,
      gt_bsid_disp        LIKE TABLE OF bsidmoddisp,
      gt_bsad_disp        LIKE TABLE OF bsadmoddisp,
      gt_bsec_disp        LIKE TABLE OF bsecmoddisp,
      gt_bsed_disp        LIKE TABLE OF bsedmoddisp,
      gt_bset_disp        LIKE TABLE OF bsetmoddisp,
      gt_glu1mod_disp     LIKE TABLE OF glu1moddisp,
      gs_glu1             TYPE glu1,
      gt_glu1             TYPE TABLE OF glu1,
      gt_bseg_add         LIKE TABLE OF bseg_addmoddisp,
      gt_splinfo          LIKE TABLE OF splinfomoddisp,
      gt_splinfo_val      LIKE TABLE OF splinfovalmoddisp,
      gt_bseg_add_disp    LIKE TABLE OF bseg_addmoddisp,
      gt_splinfo_disp     LIKE TABLE OF splinfomoddisp,
      gt_splinfo_val_disp LIKE TABLE OF splinfovalmoddisp,
      gt_bse_clr_disp     LIKE TABLE OF bse_clrmoddisp,
      flag_bkpf           TYPE c,
      flag_bseg           TYPE c,
      flag_bsec           TYPE c,
      flag_bsed           TYPE c,
      flag_bset           TYPE c,
      flag_bseg_add       TYPE c,
      flag_index          TYPE c,
      flag_genled         TYPE c,
      flag_alv_tool       TYPE i,
      flag_alv_left       TYPE i,
      flag_alv_end        TYPE i,
      flag_alv_r1         TYPE i,
      flag_alv_r2         TYPE i,
      flag_alv_r3         TYPE i,
      flag_alv_r4         TYPE i,
      flag_alv_r5         TYPE i,
      flag_alv_r6         TYPE i,
      flag_alv_r7         TYPE i,
      flag_alv_r8         TYPE i,
      flag_alv_r9         TYPE i,
      flag_alv_r10        TYPE i,
      flag_alv_r11        TYPE i,
      flag_alv_r12        TYPE i,
      flag_alv_r13        TYPE i,
      flag_alv_r14        TYPE i,
      flag_alv_r15        TYPE i,
      flag_alv_r16        TYPE i,
      flag_alv_r17        TYPE i,
      flag_alv_o1         TYPE i,
      flag_alv_o2         TYPE i,
      flag_alv_o3         TYPE i,
      flag_alv_o4         TYPE i,
      flag_alv_o5         TYPE i,
      flag_alv_o6         TYPE i,
      flag_alv_o7         TYPE i,
      flag_alv_o8         TYPE i,
      flag_alv_o9         TYPE i,
      flag_alv_o10        TYPE i,
      flag_alv_o11        TYPE i,
      flag_alv_o12        TYPE i,
      flag_alv_o13        TYPE i,
      flag_alv_o14        TYPE i,
      flag_alv_o15        TYPE i,
      flag_alv_o16        TYPE i,
      flag_alv_o17        TYPE i,
      flag_alv_l2         TYPE i,
      flag_splinfo        TYPE i,
      flag_splinfoval     TYPE i,
      flag_bse_clr        TYPE i,
      double_click_flag   TYPE i,
      check_flag          TYPE i,
      ld_suppressed       TYPE i,
      ls_vbmod            TYPE vbmod,
      ls_bkpf_disp        LIKE bkpfmoddisp,
      gt_vbhdr            TYPE TABLE OF vbhdr,
      gt_vbmod            TYPE TABLE OF vbmod,
      color_layout        TYPE lvc_s_layo,
      gt_bukrs            TYPE TABLE OF bseg-bukrs,
      gt_fagl_tldgrp_map  TYPE TABLE OF fagl_tldgrp_map,
      update_flag         TYPE c LENGTH 1,
      select_join         TYPE c LENGTH 1,
      cursor_loop_count   TYPE i,
      gd_bukrs_ktopl      TYPE bkpf-bukrs,
      gd_ktopl            TYPE t001-ktopl,
      gd_keep             TYPE c LENGTH 1,
      gd_doccounter       TYPE i.

DATA: gt_glu1_store        LIKE gt_glu1mod,
      gt_bkpf_store        LIKE gt_bkpf,
      gt_bseg_store        LIKE gt_bseg,
      gt_bsis_store        LIKE gt_bsis,
      gt_bsas_store        LIKE gt_bsas,
      gt_bsid_store        LIKE gt_bsid,
      gt_bsad_store        LIKE gt_bsad,
      gt_bsik_store        LIKE gt_bsik,
      gt_bsak_store        LIKE gt_bsak,
      gt_bsec_store        LIKE gt_bsec,
      gt_bsed_store        LIKE gt_bsed,
      gt_bset_store        LIKE gt_bset,
      gt_bseg_add_store    LIKE gt_bseg_add,
      gt_bse_clr_store     LIKE gt_bse_clr,
      gt_splinfo_store     LIKE gt_splinfo,
      gt_splinfo_val_store LIKE gt_splinfo_val,
      gt_doclist_store     LIKE gt_doclist,
      gt_flag_store        LIKE gt_flag.

DATA: upflag_bkpf        TYPE i,
      upflag_bseg        TYPE i,
      upflag_splinfo     TYPE i,
      upflag_splinfo_val TYPE i,
      upflag_bsas        TYPE i,
      upflag_bsis        TYPE i,
      upflag_bsid        TYPE i,
      upflag_bsad        TYPE i,
      upflag_bsik        TYPE i,
      upflag_bsak        TYPE i,
      upflag_glu1mod     TYPE i,
      upflag_bsec        TYPE i,
      upflag_bsed        TYPE i,
      upflag_bset        TYPE i,
      upflag_bse_clr     TYPE i,
      upflag_bseg_add    TYPE i.

DATA: modify_screen TYPE i.
DATA ls_leading TYPE t881.
DATA ld_leadtab TYPE t800a-ntable.
DATA: ls_t001 TYPE t001.
DATA gs_variant TYPE disvariant.
DATA gd_extra TYPE c LENGTH 1.
DATA ls_bkpfmod LIKE bkpfmoddisp.

DATA gd_leading_ledger TYPE t881-rldnr.
DATA gs_fagl_activec TYPE fagl_activec.
DATA gs_curry TYPE bkpf-gjahr.
DATA ld_error TYPE c LENGTH 1.
DATA gd_mass TYPE c LENGTH 1.
gd_mass = 'X'.
DATA gd_b_inactive TYPE c LENGTH 1.
DATA gs_x001 TYPE x001.
DATA gd_x001_rldnr TYPE glu1-rldnr.
DATA gs_curr_map TYPE gty_s_curr_mapp.

DATA gt_import_glu1 TYPE TABLE OF glu1 WITH HEADER LINE.

*cl_fins_sif_services=>subseq_post_set.
CONSTANTS cl_fins_sif_services TYPE c LENGTH 20 VALUE 'CL_FINS_SIF_SERVICES'.
CONSTANTS subseq_post_set TYPE c LENGTH 15 VALUE 'SUBSEQ_POST_SET'.
CONSTANTS subseq_post_init TYPE c LENGTH 16 VALUE 'SUBSEQ_POST_INIT'.

DATA l_splitter TYPE REF TO cl_gui_splitter_container.


*  DATA(l_splitter) = NEW cl_gui_splitter_container( parent = cl_gui_container=>default_screen
*                                                    no_autodef_progid_dynnr = abap_true
*                                                    rows = 1
*                                                    columns = 3 ).

DATA l_container_left TYPE REF TO cl_gui_container.
DATA l_container_right TYPE REF TO cl_gui_container.
DATA l_container_out TYPE REF TO cl_gui_container.


DATA l_splitter4 TYPE REF TO cl_gui_splitter_container.
*  DATA(l_splitter4) = NEW cl_gui_splitter_container( parent = l_container_left
*                                                    no_autodef_progid_dynnr = abap_true
*                                                    rows = 2
*                                                    columns = 1 ).



DATA l_container_l1 TYPE REF TO cl_gui_container.

DATA l_container_l2 TYPE REF TO cl_gui_container.


DATA l_alv_left TYPE REF TO cl_gui_alv_grid.


DATA it_events TYPE ty_it_events.
DATA is_events TYPE LINE OF ty_it_events.

*  DATA(it_events) = VALUE ty_it_events( ( eventid = cl_gui_toolbar=>m_id_function_selected appl_event = abap_true ) ).

DATA l_splitter7 TYPE REF TO cl_gui_splitter_container.

*  DATA(l_splitter2) = NEW cl_gui_splitter_container( parent = l_container_right
*                                                  no_autodef_progid_dynnr = abap_true
*                                                  rows = 16
*                                                  columns = 1 ).

DATA l_container_rig1 TYPE REF TO cl_gui_container.

DATA l_container_rig2 TYPE REF TO cl_gui_container.


DATA l_splitter2 TYPE REF TO cl_gui_splitter_container.

*  DATA(l_splitter2) = NEW cl_gui_splitter_container( parent = l_container_right
*                                                  no_autodef_progid_dynnr = abap_true
*                                                  rows = 16
*                                                  columns = 1 ).



DATA l_splitter5 TYPE REF TO cl_gui_splitter_container.


*  DATA(l_splitter5) = NEW cl_gui_splitter_container( parent = l_container_out
*                                                    no_autodef_progid_dynnr = abap_true
*                                                  rows = 16
*                                                  columns = 1 ).
DATA l_container_out1 TYPE REF TO cl_gui_container.

DATA l_container_out2 TYPE REF TO cl_gui_container.


DATA l_splitter3 TYPE REF TO cl_gui_splitter_container.

*  DATA(l_splitter3) = NEW cl_gui_splitter_container( parent = l_container_out2
*                                                  no_autodef_progid_dynnr = abap_true
*                                                  rows = 16
*                                                  columns = 1 ).



DATA l_container_r1 TYPE REF TO cl_gui_container.
DATA l_container_r2 TYPE REF TO cl_gui_container.
DATA l_container_r3 TYPE REF TO cl_gui_container.
DATA l_container_r4 TYPE REF TO cl_gui_container.
DATA l_container_r5 TYPE REF TO cl_gui_container.
DATA l_container_r6 TYPE REF TO cl_gui_container.
DATA l_container_r7 TYPE REF TO cl_gui_container.
DATA l_container_r8 TYPE REF TO cl_gui_container.
DATA l_container_r9 TYPE REF TO cl_gui_container.
DATA l_container_r10 TYPE REF TO cl_gui_container.
DATA l_container_r11 TYPE REF TO cl_gui_container.
DATA l_container_r12 TYPE REF TO cl_gui_container.
DATA l_container_r13 TYPE REF TO cl_gui_container.
DATA l_container_r14 TYPE REF TO cl_gui_container.
DATA l_container_r15 TYPE REF TO cl_gui_container.
DATA l_container_r16 TYPE REF TO cl_gui_container.



DATA l_container_o1 TYPE REF TO cl_gui_container.
DATA l_container_o2 TYPE REF TO cl_gui_container.
DATA l_container_o3 TYPE REF TO cl_gui_container.
DATA l_container_o4 TYPE REF TO cl_gui_container.
DATA l_container_o5 TYPE REF TO cl_gui_container.
DATA l_container_o6 TYPE REF TO cl_gui_container.
DATA l_container_o7 TYPE REF TO cl_gui_container.
DATA l_container_o8 TYPE REF TO cl_gui_container.
DATA l_container_o9 TYPE REF TO cl_gui_container.
DATA l_container_o10 TYPE REF TO cl_gui_container.
DATA l_container_o11 TYPE REF TO cl_gui_container.
DATA l_container_o12 TYPE REF TO cl_gui_container.
DATA l_container_o13 TYPE REF TO cl_gui_container.
DATA l_container_o14 TYPE REF TO cl_gui_container.
DATA l_container_o15 TYPE REF TO cl_gui_container.
DATA l_container_o16 TYPE REF TO cl_gui_container.



DATA l_alv_r1 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r2 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r3 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r4 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r5 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r6 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r7 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r8 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r9 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r10 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r11 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r12 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r13 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r14 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r15 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_r16 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_l2 TYPE REF TO cl_gui_alv_grid.


DATA o_tool TYPE REF TO cl_gui_toolbar.


DATA l_alv_o1 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o2 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o3 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o4 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o5 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o6 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o7 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o8 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o9 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o10 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o11 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o12 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o13 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o14 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o15 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o16 TYPE REF TO cl_gui_alv_grid.

DATA l_alv_o17 TYPE REF TO cl_gui_alv_grid.


*  DATA(l_alv_o1) = NEW cl_gui_alv_grid( i_parent = l_container_o1 ).
*  DATA(l_alv_o2) = NEW cl_gui_alv_grid( i_parent = l_container_o2 ).
*  DATA(l_alv_o3) = NEW cl_gui_alv_grid( i_parent = l_container_o3 ).
*  DATA(l_alv_o4) = NEW cl_gui_alv_grid( i_parent = l_container_o4 ).
*  DATA(l_alv_o5) = NEW cl_gui_alv_grid( i_parent = l_container_o5 ).
*  DATA(l_alv_o6) = NEW cl_gui_alv_grid( i_parent = l_container_o6 ).
*  DATA(l_alv_o7) = NEW cl_gui_alv_grid( i_parent = l_container_o7 ).
*  DATA(l_alv_o8) = NEW cl_gui_alv_grid( i_parent = l_container_o8 ).
*  DATA(l_alv_o9) = NEW cl_gui_alv_grid( i_parent = l_container_o9 ).
*  DATA(l_alv_o10) = NEW cl_gui_alv_grid( i_parent = l_container_o10 ).
*  DATA(l_alv_o11) = NEW cl_gui_alv_grid( i_parent = l_container_o11 ).
*  DATA(l_alv_o12) = NEW cl_gui_alv_grid( i_parent = l_container_o12 ).
*  DATA(l_alv_o13) = NEW cl_gui_alv_grid( i_parent = l_container_o13 ).
*  DATA(l_alv_o14) = NEW cl_gui_alv_grid( i_parent = l_container_o14 ).
*  DATA(l_alv_o15) = NEW cl_gui_alv_grid( i_parent = l_container_o15 ).
*  DATA(l_alv_o16) = NEW cl_gui_alv_grid( i_parent = l_container_o16 ).
*  DATA(l_alv_o17) = NEW cl_gui_alv_grid( i_parent = l_container_out1 ).

DATA: t_fieldcat_left               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_left_out           TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_left               TYPE lvc_s_fcat,
      t_fieldcat_flags              TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_flags_disp         TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_flags              TYPE lvc_s_fcat,
      t_fieldcat_bkpf               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bseg               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsec               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsed               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bset               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bse_clr            TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bseg_add           TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsis               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsas               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsid               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsad               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsik               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsak               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_splinfo            TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_splinfo_val        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_glu1               TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bkpfmod            TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bkpfmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bkpfmod            TYPE lvc_s_fcat,
      t_fieldcat_bsegmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsegmod            TYPE lvc_s_fcat,
      t_fieldcat_bseg_addmod        TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bseg_addmod        TYPE lvc_s_fcat,
      t_fieldcat_bsecmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsecmod            TYPE lvc_s_fcat,
      t_fieldcat_bsedmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsedmod            TYPE lvc_s_fcat,
      t_fieldcat_bsetmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsetmod            TYPE lvc_s_fcat,
      s_fieldcat_bse_clrgmod        TYPE lvc_s_fcat,
      t_fieldcat_bse_clrmod         TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsismod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsismod            TYPE lvc_s_fcat,
      t_fieldcat_bsasmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsasmod            TYPE lvc_s_fcat,
      t_fieldcat_bsadmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsadmod            TYPE lvc_s_fcat,
      t_fieldcat_bsidmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsidmod            TYPE lvc_s_fcat,
      t_fieldcat_bsakmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsakmod            TYPE lvc_s_fcat,
      t_fieldcat_bsikmod            TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_bsikmod            TYPE lvc_s_fcat,
      t_fieldcat_splinfomod         TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_splinfomod         TYPE lvc_s_fcat,
      t_fieldcat_splinfo_valmod     TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_splinfo_valmod     TYPE lvc_s_fcat,
      t_fieldcat_glu1modmod         TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_glu1modmod         TYPE lvc_s_fcat,
      s_fieldcat_bse_clrmod         TYPE lvc_s_fcat,
      t_fieldcat_bsegmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsismod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_splinfomod_out     TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_splinfo_valmod_out TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_glu1modmod_out     TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsakmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsasmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsikmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsadmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsidmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsecmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsedmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bsetmod_out        TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bse_clrmod_out     TYPE lvc_t_fcat WITH HEADER LINE,
      t_fieldcat_bseg_addmod_out    TYPE lvc_t_fcat WITH HEADER LINE,
      s_fieldcat_protocol           TYPE lvc_s_fcat,
      t_fieldcat_protocol           TYPE lvc_t_fcat WITH HEADER LINE.

FIELD-SYMBOLS: <cellchange> TYPE table,
               <tabchange>  TYPE table,
               <tabinsert>  TYPE table,
               <tabdelete>  TYPE table,
               <protocol>   TYPE table.
DATA er_data_changed TYPE REF TO cl_alv_changed_data_protocol.

DATA gd_save TYPE c LENGTH 1.
DATA reverse_flag TYPE i.
DATA flag_store TYPE i.

DATA: ld_height_l2  TYPE i,
      ld_height_r1  TYPE i,
      ld_height_r2  TYPE i,
      ld_height_r3  TYPE i,
      ld_height_r4  TYPE i,
      ld_height_r5  TYPE i,
      ld_height_r6  TYPE i,
      ld_height_r7  TYPE i,
      ld_height_r8  TYPE i,
      ld_height_r9  TYPE i,
      ld_height_r10 TYPE i,
      ld_height_r11 TYPE i,
      ld_height_r12 TYPE i,
      ld_height_r13 TYPE i,
      ld_height_r14 TYPE i,
      ld_height_r15 TYPE i,
      ld_height_r16 TYPE i,
      ld_height_o1  TYPE i,
      ld_height_o2  TYPE i,
      ld_height_o3  TYPE i,
      ld_height_o4  TYPE i,
      ld_height_o5  TYPE i,
      ld_height_o6  TYPE i,
      ld_height_o7  TYPE i,
      ld_height_o8  TYPE i,
      ld_height_o9  TYPE i,
      ld_height_o10 TYPE i,
      ld_height_o11 TYPE i,
      ld_height_o12 TYPE i,
      ld_height_o13 TYPE i,
      ld_height_o14 TYPE i,
      ld_height_o15 TYPE i,
      ld_height_o16 TYPE i.

DATA save_flag TYPE i.

DATA: log_guid TYPE guid_16.
DATA ltx_prot_data TYPE fagl_tx_prot_data.

DATA expert_mode TYPE c LENGTH 1.
DATA support_mode TYPE c LENGTH 1.

DATA gd_mass_max TYPE bkpf-belnr.
DATA gd_mass_min TYPE bkpf-belnr.
TYPES t_bkpf TYPE TABLE OF bkpf.
DATA gt_massdata TYPE t_bkpf WITH HEADER LINE.
DATA gs_t001_mass TYPE t001.
DATA ld_tabclass TYPE dd02l-tabclass.

DATA: BEGIN OF gs_finsc_ld_cmp_disp,
        curtph TYPE c LENGTH 1,
        curtpk TYPE c LENGTH 1,
        curtpo TYPE c LENGTH 1,
        curtpv TYPE c LENGTH 1,
        curtpa TYPE c LENGTH 1,
        curtpb TYPE c LENGTH 1,
        curtpc TYPE c LENGTH 1,
        curtpd TYPE c LENGTH 1,
        curtpe TYPE c LENGTH 1,
        curtpf TYPE c LENGTH 1,
        curtpg TYPE c LENGTH 1,
      END OF gs_finsc_ld_cmp_disp.

DATA gd_leading TYPE bkpf-rldnr.
CALL FUNCTION 'FAGL_GET_LEADING_LEDGER'
  IMPORTING
    e_rldnr = gd_leading.

DATA:
  button_bkpf        TYPE i,
  button_bseg        TYPE i,
  button_bsis        TYPE i,
  button_bsas        TYPE i,
  button_bsik        TYPE i,
  button_bsak        TYPE i,
  button_bsid        TYPE i,
  button_bsad        TYPE i,
  button_bsec        TYPE i,
  button_bsed        TYPE i,
  button_bset        TYPE i,
  button_bse_clr     TYPE i,
  button_bseg_add    TYPE i,
  button_gl          TYPE i,
  button_splinfo     TYPE i,
  button_splinfo_val TYPE i.

DATA gd_rfdt TYPE c LENGTH 1.
DATA gd_store_empty TYPE c LENGTH 1.

CONSTANTS gc_check_value1        TYPE xstring
  VALUE '734590085308167191756048173968904299E39EB7FD4447DB726B6FEF3FA2D652CDBD55FA98B79EB407E14BBACAEB29'.
CONSTANTS gc_check_value2        TYPE xstring
  VALUE '7345900853081671917560481739689037838A84385B90F2DAAC78CE6FF7DC8FD723E7D6B51DD8D8680CCD7EA724D84A'.
CONSTANTS gc_expected_cleartext TYPE string
  VALUE 'ZF_REBUILD_FIDOC_V2'.
DATA lv_sys_type TYPE sy-sysid.

DATA gd_rfdt_timestamp TYPE c LENGTH 18.
DATA gd_rfdt_timestamp_bkpf TYPE c LENGTH 18 VALUE 'BKPF_'.
DATA gd_rfdt_timestamp_bseg TYPE c LENGTH 18 VALUE 'BSEG_'.
DATA gd_rfdt_timestamp_bsis TYPE c LENGTH 18 VALUE 'BSIS_'.
DATA gd_rfdt_timestamp_bsas TYPE c LENGTH 18 VALUE 'BSAS_'.
DATA gd_rfdt_timestamp_bsid TYPE c LENGTH 18 VALUE 'BSID_'.
DATA gd_rfdt_timestamp_bsad TYPE c LENGTH 18 VALUE 'BSAD_'.
DATA gd_rfdt_timestamp_bsik TYPE c LENGTH 18 VALUE 'BSIK_'.
DATA gd_rfdt_timestamp_bsak TYPE c LENGTH 18 VALUE 'BSAK_'.
DATA gd_rfdt_timestamp_bsec TYPE c LENGTH 18 VALUE 'BSEC_'.
DATA gd_rfdt_timestamp_bsed TYPE c LENGTH 18 VALUE 'BSED_'.
DATA gd_rfdt_timestamp_bset TYPE c LENGTH 18 VALUE 'BSET_'.
DATA gd_rfdt_timestamp_bse_clr TYPE c LENGTH 18 VALUE 'BSECL'.
DATA gd_rfdt_timestamp_bseg_add TYPE c LENGTH 18 VALUE 'BSEGA'.
DATA gd_rfdt_timestamp_glu1 TYPE c LENGTH 18 VALUE 'GLU1_'.
DATA gd_rfdt_timestamp_splinfo TYPE c LENGTH 18 VALUE 'SPLIN'.
DATA gd_rfdt_timestamp_splinfo_val TYPE c LENGTH 18 VALUE 'SPLVA'.
DATA gd_rfdt_timestamp_doclist TYPE c LENGTH 18 VALUE 'DOCLI'.
DATA gd_rfdt_timestamp_flags TYPE c LENGTH 18 VALUE 'FLAGS'.
DATA gd_rfdt_timestamp_protocol TYPE c LENGTH 18 VALUE 'PROTO'.

***********************************************************************
***********************************************************************
* SELECTION SCREEN
***********************************************************************
SELECTION-SCREEN BEGIN OF SCREEN 1010 AS SUBSCREEN.
  SELECTION-SCREEN BEGIN OF BLOCK 002 WITH FRAME TITLE block2.
    SELECT-OPTIONS p_bukrs FOR bkpf-bukrs.
    SELECT-OPTIONS p_gjahr FOR bkpf-gjahr MODIF ID top.
    SELECT-OPTIONS p_monat FOR bkpf-monat MODIF ID top.
    SELECT-OPTIONS p_budat FOR bkpf-budat MODIF ID top.
    SELECT-OPTIONS p_blart FOR bkpf-blart MODIF ID top.
    SELECT-OPTIONS p_awtyp FOR bkpf-awtyp MODIF ID top.
    SELECT-OPTIONS p_usnam FOR bkpf-usnam MODIF ID top.
    SELECT-OPTIONS p_tcode FOR bkpf-tcode MODIF ID top.
    SELECT-OPTIONS p_cpudt FOR bkpf-cpudt MODIF ID top.
    SELECT-OPTIONS s_rldnr FOR bkpf-rldnr NO-DISPLAY.
    SELECT-OPTIONS p_bukrsm FOR bkpf-bukrs NO-DISPLAY.
    SELECT-OPTIONS p_belnrm FOR bkpf-belnr NO-DISPLAY.
    SELECT-OPTIONS p_gjahrm FOR bkpf-gjahr NO-DISPLAY.
    SELECT-OPTIONS p_bukrsp FOR bkpf-bukrs NO-DISPLAY.
    SELECT-OPTIONS p_belnrp FOR bkpf-belnr NO-DISPLAY.
    SELECT-OPTIONS p_gjahrp FOR bkpf-gjahr NO-DISPLAY.
    SELECT-OPTIONS p_bel_eq FOR bkpf-belnr NO-DISPLAY.
    SELECT-OPTIONS p_bel_bt FOR bkpf-belnr NO-DISPLAY.
    PARAMETERS p_docmax TYPE i DEFAULT 50 NO-DISPLAY.
    PARAMETERS p_pack TYPE i DEFAULT 20 NO-DISPLAY.
  SELECTION-SCREEN END OF BLOCK 002.

  SELECTION-SCREEN BEGIN OF BLOCK 009 WITH FRAME TITLE block9.
    SELECT-OPTIONS p_belnr FOR bkpf-belnr MODIF ID top.
    SELECT-OPTIONS p_xblnr FOR bkpf-xblnr MODIF ID top.
  SELECTION-SCREEN END OF BLOCK 009.

  SELECTION-SCREEN BEGIN OF BLOCK 010 WITH FRAME TITLE block10.
    SELECTION-SCREEN COMMENT 1(60) c_clust.
    SELECT-OPTIONS p_hkont FOR bseg-hkont.
    SELECT-OPTIONS p_kunnr FOR bseg-kunnr.
    SELECT-OPTIONS p_lifnr FOR bseg-lifnr.
    SELECTION-SCREEN BEGIN OF LINE.
      SELECTION-SCREEN POSITION 1.
      PARAMETERS p_allpos TYPE c RADIOBUTTON GROUP pos.
      SELECTION-SCREEN COMMENT 4(20) t_allpos FOR FIELD p_allpos.
      SELECTION-SCREEN POSITION 25.
      PARAMETERS p_opepos TYPE c RADIOBUTTON GROUP pos.
      SELECTION-SCREEN COMMENT 28(17) t_opepos FOR FIELD p_opepos.
      SELECTION-SCREEN POSITION 50.
      PARAMETERS p_clepos TYPE c RADIOBUTTON GROUP pos.
      SELECTION-SCREEN COMMENT 53(24) t_clepos FOR FIELD p_clepos.
    SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK 010.

  SELECTION-SCREEN SKIP.
  SELECTION-SCREEN BEGIN OF BLOCK 006 WITH FRAME TITLE block6.
    PARAMETERS p_tech TYPE c AS CHECKBOX DEFAULT 'X'.
    PARAMETERS p_showok TYPE c AS CHECKBOX DEFAULT ' '.

  SELECTION-SCREEN END OF BLOCK 006.
*  SELECTION-SCREEN BEGIN OF BLOCK 099 WITH FRAME TITLE block7.
  PARAMETERS p_dauto TYPE c DEFAULT 'X' NO-DISPLAY.
  PARAMETERS p_dbkpf TYPE c NO-DISPLAY.
  PARAMETERS p_dbseg TYPE c  NO-DISPLAY.
  PARAMETERS p_dgl TYPE c  NO-DISPLAY.
  PARAMETERS p_dindex TYPE c  NO-DISPLAY.
  PARAMETERS p_dsplit TYPE c  NO-DISPLAY.
  PARAMETERS p_dbsec TYPE c NO-DISPLAY.
  PARAMETERS p_dbsed TYPE c NO-DISPLAY.
  PARAMETERS p_dbset TYPE c  NO-DISPLAY.
  PARAMETERS p_dbsclr TYPE c  NO-DISPLAY.
  PARAMETERS p_dbsgad TYPE c  NO-DISPLAY.
*  SELECTION-SCREEN END OF BLOCK 099.

  SELECTION-SCREEN BEGIN OF BLOCK 004 WITH FRAME TITLE block4.
    PARAMETERS p_log TYPE c AS CHECKBOX DEFAULT 'X'.
    PARAMETERS p_logas TYPE fagl_fc_val_scrn-log_save_as DEFAULT sy-datum.
    SELECTION-SCREEN BEGIN OF LINE.
      SELECTION-SCREEN PUSHBUTTON 1(77) logs
        USER-COMMAND load_logs
        VISIBLE LENGTH 15.

      SELECTION-SCREEN PUSHBUTTON 20(76) reve
        USER-COMMAND reve_logs
        VISIBLE LENGTH 15.
    SELECTION-SCREEN END OF LINE.
  SELECTION-SCREEN END OF BLOCK 004.

  SELECTION-SCREEN BEGIN OF BLOCK 008 WITH FRAME TITLE block8.
    PARAMETERS p_test TYPE c RADIOBUTTON GROUP upda DEFAULT 'X' USER-COMMAND key.
    PARAMETERS p_update TYPE c RADIOBUTTON GROUP upda.
    PARAMETERS p_curry TYPE c AS CHECKBOX DEFAULT ' ' .
    PARAMETERS p_modif TYPE c RADIOBUTTON GROUP upda.
    PARAMETERS p_edkey TYPE c AS CHECKBOX DEFAULT ' ' MODIF ID kez.
  SELECTION-SCREEN END OF BLOCK 008.

SELECTION-SCREEN END OF SCREEN 1010.

SELECTION-SCREEN BEGIN OF SCREEN 1030 AS SUBSCREEN.
  SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE block1.
    PARAMETERS p_vbdata TYPE c AS CHECKBOX
    USER-COMMAND vbr.
    SELECTION-SCREEN SKIP.
    PARAMETERS p_proc1 TYPE c RADIOBUTTON GROUP proc MODIF ID vbr.
    PARAMETERS p_vsame TYPE c AS CHECKBOX DEFAULT 'X'
    USER-COMMAND sam MODIF ID vbr.
    SELECT-OPTIONS p_vbukrs FOR bkpf-bukrs MODIF ID sam.
    SELECT-OPTIONS p_vbelnr FOR bkpf-belnr MODIF ID sam.
    SELECT-OPTIONS p_vgjahr FOR bkpf-gjahr MODIF ID sam.

    SELECTION-SCREEN SKIP.
    PARAMETERS p_proc2 TYPE c RADIOBUTTON GROUP proc MODIF ID vbr.
    PARAMETERS p_fdate TYPE dats DEFAULT sy-datum MODIF ID vbr.
    PARAMETERS p_ftime TYPE tims MODIF ID vbr.
    PARAMETERS p_ttime TYPE tims DEFAULT '235959' MODIF ID vbr.

    SELECTION-SCREEN SKIP.
    PARAMETERS p_proc3 TYPE c RADIOBUTTON GROUP proc MODIF ID vbr.
    SELECT-OPTIONS p_vbkey FOR vbhdr-vbkey MODIF ID vbr.

  SELECTION-SCREEN END OF BLOCK 001.

  SELECTION-SCREEN BEGIN OF BLOCK 005 WITH FRAME TITLE block5.
    PARAMETERS p_rfc TYPE c AS CHECKBOX
    USER-COMMAND rfc.
    SELECTION-SCREEN SKIP.
    PARAMETERS p_srcsys TYPE rfcdes-rfcdest MODIF ID rfc.
    PARAMETERS p_srccli TYPE t001-mandt MODIF ID rfc.
  SELECTION-SCREEN END OF BLOCK 005.

  SELECTION-SCREEN BEGIN OF BLOCK 003 WITH FRAME TITLE block3.
    PARAMETERS p_rfdt TYPE c AS CHECKBOX
    USER-COMMAND rfd.
    SELECTION-SCREEN SKIP.
    PARAMETERS p_rfdti1 TYPE sychar02 MODIF ID rfd.
    PARAMETERS p_rfdti2 TYPE sychar22 MODIF ID rfd.
  SELECTION-SCREEN END OF BLOCK 003.
  PARAMETERS p_ionly TYPE c AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN END OF SCREEN 1030.

SELECTION-SCREEN BEGIN OF SCREEN 1040 AS SUBSCREEN.
  SELECTION-SCREEN BEGIN OF BLOCK 011 WITH FRAME TITLE block11.
    PARAMETERS p_cauto TYPE c AS CHECKBOX DEFAULT 'X'
    USER-COMMAND sch.

  SELECTION-SCREEN END OF BLOCK 011.
  SELECTION-SCREEN BEGIN OF BLOCK 012 WITH FRAME TITLE block12.
    PARAMETERS p_cflags TYPE c AS CHECKBOX
     DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_caccou TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_ccurr TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cdat TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cbstat TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cshkzg TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cbewar TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cvbund TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cusnam TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cbschl TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cclear TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cblart TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cstorn TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cumskz TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cktosl TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_czuonr TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
    PARAMETERS p_cawxxx TYPE c AS CHECKBOX
    DEFAULT 'X'
    MODIF ID sch.
  SELECTION-SCREEN END OF BLOCK 012.

  SELECTION-SCREEN SKIP.

  SELECTION-SCREEN BEGIN OF BLOCK 021 WITH FRAME TITLE block21.
    PARAMETERS p_build TYPE c AS CHECKBOX DEFAULT 'X'
    USER-COMMAND bau.
  SELECTION-SCREEN END OF BLOCK 021.
  SELECTION-SCREEN BEGIN OF BLOCK 022 WITH FRAME TITLE block22.


    PARAMETERS p_bbkpf TYPE c AS CHECKBOX DEFAULT 'X'
    MODIF ID bau.
    PARAMETERS p_bbseg TYPE c AS CHECKBOX DEFAULT 'X'
    MODIF ID bau.
    PARAMETERS p_bglu1 TYPE c AS CHECKBOX DEFAULT 'X'
    MODIF ID bau.
    PARAMETERS p_bsplit TYPE c AS CHECKBOX DEFAULT 'X'
    MODIF ID bau.
    PARAMETERS p_bindex TYPE c AS CHECKBOX DEFAULT 'X'
    MODIF ID bau.

  SELECTION-SCREEN END OF BLOCK 022.
SELECTION-SCREEN END OF SCREEN 1040.

*SELECTION-SCREEN BEGIN OF SCREEN 1050 AS SUBSCREEN.
*  SELECTION-SCREEN BEGIN OF BLOCK 021 WITH FRAME TITLE block21.
*    PARAMETERS p_build TYPE c AS CHECKBOX DEFAULT 'X'
*    USER-COMMAND bui.
*  SELECTION-SCREEN END OF BLOCK 021.
*  SELECTION-SCREEN BEGIN OF BLOCK 022 WITH FRAME TITLE block22.
*    PARAMETERS p_bauto TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bui USER-COMMAND bau.
*    SELECTION-SCREEN SKIP.
*    PARAMETERS p_bbkpf TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bau.
*    PARAMETERS p_bbseg TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bau.
*    PARAMETERS p_bglu1 TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bau.
*    PARAMETERS p_bsplit TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bau.
*    PARAMETERS p_bindex TYPE c AS CHECKBOX DEFAULT 'X'
*    MODIF ID bau.
*
*  SELECTION-SCREEN END OF BLOCK 022.
*SELECTION-SCREEN END OF SCREEN 1050.

PARAMETERS p_protg TYPE guid_16 NO-DISPLAY.

SELECTION-SCREEN BEGIN OF TABBED BLOCK tabbl FOR 39 LINES.
  SELECTION-SCREEN TAB (15) tabs1010 USER-COMMAND ucom1010
    DEFAULT SCREEN 1010.
*  SELECTION-SCREEN TAB (15) tabs1020 USER-COMMAND ucom1020
*    DEFAULT SCREEN 1020.
  SELECTION-SCREEN TAB (15) tabs1040 USER-COMMAND ucom1040
    DEFAULT SCREEN 1040.
*  SELECTION-SCREEN TAB (15) tabs1050 USER-COMMAND ucom1050
*    DEFAULT SCREEN 1050.
  SELECTION-SCREEN TAB (15) tabs1030 USER-COMMAND ucom1030
    DEFAULT SCREEN 1030.
SELECTION-SCREEN END OF BLOCK tabbl.


INITIALIZATION.

  DATA timestamp TYPE timestampl.
  DATA timestamp_c TYPE c LENGTH 22.
  GET TIME STAMP FIELD timestamp.
  timestamp_c = timestamp.
  gd_rfdt_timestamp = timestamp_c+3.

  gd_rfdt_timestamp_bkpf+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bseg+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsis+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsas+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsid+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsad+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsik+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsak+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsec+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bsed+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bset+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bse_clr+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_bseg_add+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_glu1+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_splinfo+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_splinfo_val+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_doclist+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_flags+5 = gd_rfdt_timestamp+5.
  gd_rfdt_timestamp_protocol+5 = gd_rfdt_timestamp+5.

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name   = icon_history
      text   = 'Log list'
      info   = 'Open Log List in FAGL_PROT'
    IMPORTING
      result = logs
    EXCEPTIONS
      OTHERS = 0.

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name   = icon_history
      text   = 'Reset Log'
      info   = 'Reset Modifications from Log...'
    IMPORTING
      result = reve
    EXCEPTIONS
      OTHERS = 0.

  PERFORM check_s4.

AT SELECTION-SCREEN OUTPUT.
  SELECT SINGLE tabclass FROM dd02l INTO ld_tabclass WHERE tabname = 'BSEG'.
  IF ld_tabclass NE 'CLUSTER'.
    c_clust = '@5B@ Transparent BSEG'.
  ELSE.
    c_clust = '@5D@ Clustered BSEG: Slow performance for account selection'.
  ENDIF.
  tabs1010 = 'Input/Output'.
*  tabs1020 = 'Output'.
  tabs1030 = 'Import'.
  tabs1040 = 'Check/Build'.
*  tabs1050 = 'Build'.

  block1 = 'VBDATA Search Parameters'.
  block2 = 'General Selection'.
  block3 = 'RFDT Search Parameters'.
  block4 = 'Log Parameters'.
  block5 = 'RFC Import Parameters'.
  block6 = 'Output Parameters'.
*  block7 = 'Display Parameters'.
  block8 = 'Processing Parameters'.
  block9 = 'Document Selection'.
  block10 = 'Account Selection'.
  block11 = 'Perform Checks'.
  block12 = 'Choose Checks'.
  block21 = 'Build Missing Data'.
  block22 = 'Choose Builds'.

  %_p_vbdata_%_app_%-text = 'Check for data in VBDATA'.
  %_p_vsame_%_app_%-text = 'Same as Input'.
  %_p_vbukrs_%_app_%-text = 'Company Code'.
  %_p_vbelnr_%_app_%-text = 'Document Number'.
  %_p_vgjahr_%_app_%-text = 'Fiscal Year'.
  %_p_bukrs_%_app_%-text = 'Company Code'.
  %_p_belnr_%_app_%-text = 'Document Number'.
  %_p_gjahr_%_app_%-text = 'Fiscal Year'.
  %_p_proc1_%_app_%-text = 'Processing by document number'.
  %_p_proc2_%_app_%-text = 'Processing by date/time'.
  %_p_proc3_%_app_%-text = 'Processing by VBKEY'.
  %_p_vbkey_%_app_%-text = 'VBKEY'.
  %_p_ionly_%_app_%-text = 'Select only VBDATA/RFDT/RFC'.
  %_p_fdate_%_app_%-text = 'Date'.
  %_p_ftime_%_app_%-text = 'From'.
  %_p_ttime_%_app_%-text = 'To'.
  %_p_test_%_app_%-text = 'Test Mode'.
  %_p_rfc_%_app_%-text = 'Check for data in RFC system'.
  %_p_rfdt_%_app_%-text = 'Check for data in RFDT'.
  %_p_rfdti1_%_app_%-text = 'RELID'.
  %_p_rfdti2_%_app_%-text = 'SRTFD'.
  %_p_log_%_app_%-text = 'Save log'.
  %_p_logas_%_app_%-text = 'Save log as...'.
  %_p_modif_%_app_%-text = 'Edit entries manually'.
  %_p_srcsys_%_app_%-text = 'Source System'.
  %_p_srccli_%_app_%-text = 'Source Client'.
  %_p_dauto_%_app_%-text = 'Automatic display'.
  %_p_dbkpf_%_app_%-text = 'BKPF'.
  %_p_dbseg_%_app_%-text = 'BSEG'.
  %_p_dindex_%_app_%-text = 'Indexes'.
  %_p_dsplit_%_app_%-text = 'Splinfo/Splinfoval'.
  %_p_dgl_%_app_%-text = 'G/L'.
  %_p_dbsec_%_app_%-text = 'BSEC'.
  %_p_dbset_%_app_%-text = 'BSET'.
  %_p_dbsed_%_app_%-text = 'BSED'.
  %_p_dbsclr_%_app_%-text = 'BSE_CLR'.
  %_p_dbsgad_%_app_%-text = 'BSEG_ADD'.
  %_p_edkey_%_app_%-text = 'Edit key fields'.
  %_p_docmax_%_app_%-text = 'Max. Nbr. of Documents'.
  %_p_showok_%_app_%-text = 'Show Consistent Documents'.
*  %_p_check_%_app_%-text = 'Perform checks'.
*  %_p_zero_%_app_%-text = 'Check balance zero in each table'.
  %_p_build_%_app_%-text = 'Automatic Build'.
  %_p_cauto_%_app_%-text = 'Automatic Checks'.
*  %_p_bauto_%_app_%-text = 'Automatic Build'.
  %_p_update_%_app_%-text = 'Update mode for build/import'.
  %_p_bbkpf_%_app_%-text = 'Build BKPF'.
  %_p_bbseg_%_app_%-text = 'Build BSEG'.
  %_p_bindex_%_app_%-text = 'Build Indexes'.
  %_p_bglu1_%_app_%-text = 'Build GL'.
  %_p_bsplit_%_app_%-text = 'Build SPLINFO/SPLINFOVAL'.
  %_p_tech_%_app_%-text = 'Show Technical Names'.
*  %_p_cindex_%_app_%-text = 'Check BSEG vs. Indexes'.
  %_p_monat_%_app_%-text = 'Period'.
  %_p_budat_%_app_%-text = 'Posting Date'.
  %_p_blart_%_app_%-text = 'Document Type'.
  %_p_awtyp_%_app_%-text = 'Reference Transaction'.
  %_p_usnam_%_app_%-text = 'User Name'.
  %_p_tcode_%_app_%-text = 'Transaction Code'.
  %_p_cpudt_%_app_%-text = 'CPU-Date'.
  %_p_xblnr_%_app_%-text = 'Reference Document Number'.
  %_p_hkont_%_app_%-text = 'G/L Account Number'.
  %_p_kunnr_%_app_%-text = 'Customers'.
  %_p_lifnr_%_app_%-text = 'Vendors'.
  %_p_allpos_%_app_%-text = 'All Items'.
  %_p_opepos_%_app_%-text = 'Open Items'.
  %_p_clepos_%_app_%-text = 'Cleared Items'.
*  %_p_cross_%_app_%-text = 'Compare Master Data/Entry/GL'.
  %_p_curry_%_app_%-text = 'Process old years in GL'.

  %_p_cflags_%_app_%-text = 'GL vs. Entry vs. Master Data'.
  %_p_caccou_%_app_%-text = 'GL vs. Entry: Accounts'.
  %_p_ccurr_%_app_%-text = 'GL vs. Entry: Amounts and Currency'.
  %_p_cdat_%_app_%-text = 'GL vs. Entry: Dates'.
  %_p_cclear_%_app_%-text = 'GL vs. Entry: Clearing'.
  %_p_cbstat_%_app_%-text = 'GL vs. Entry: BSTAT'.
  %_p_cawxxx_%_app_%-text = 'GL vs. Entry: AWKEY/AWTYP/AWSYS'.
  %_p_cstorn_%_app_%-text = 'GL vs. Entry: Reversal'.
  %_p_cshkzg_%_app_%-text = 'GL vs. Entry: SHKZG'.
  %_p_cbewar_%_app_%-text = 'GL vs. Entry: BEWAR'.
  %_p_cbewar_%_app_%-text = 'GL vs. Entry: VBUND'.
  %_p_czuonr_%_app_%-text = 'GL vs. Entry: ZUONR'.
  %_p_cktosl_%_app_%-text = 'GL vs. Entry: KTOSL'.
  %_p_cusnam_%_app_%-text = 'GL vs. Entry: USNAM'.
  %_p_cblart_%_app_%-text = 'GL vs. Entry: BLART'.
  %_p_cumskz_%_app_%-text = 'GL vs. Entry: UMSKZ'.
  %_p_cbschl_%_app_%-text = 'GL vs. Entry: BSCHL'.
  %_p_cvbund_%_app_%-text = 'GL vs. Entry: VBUND'.


  t_allpos = 'All Items'.
  t_opepos = 'Open Items'.
  t_clepos = 'Cleared Items'.

  LOOP AT SCREEN.

    CASE sy-ucomm.
      WHEN 'TAC'.
        p_vsame = 'X'.
        sy-ucomm = ' '.
    ENDCASE.

    CASE screen-group1.
      WHEN 'RFC'.
        IF p_rfc IS INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ELSEIF p_rfc IS NOT INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'RFD'.
        IF p_rfdt IS INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ELSEIF p_rfdt  IS NOT INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'VBR'.
        IF p_vbdata IS INITIAL.
          screen-input = 0.
          sy-ucomm = 'TAC'.
          MODIFY SCREEN.
        ELSEIF p_vbdata IS NOT INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'SAM'.
        IF p_vsame IS INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ELSEIF p_vsame IS NOT INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'DIS'.
        IF p_dauto IS INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ELSEIF p_dauto IS NOT INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'KEZ'.
        IF p_modif IS NOT INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ELSEIF p_modif IS INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'MAS'.
        IF p_update IS NOT INITIAL.
          screen-input = 1.
          MODIFY SCREEN.
        ELSEIF p_update IS INITIAL.
          screen-input = 0.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'BAU'.
        IF p_build IS NOT INITIAL.
          p_bbkpf = 'X'.
          p_bbseg = 'X'.
          p_bglu1 = 'X'.
          p_bsplit = 'X'.
          p_bindex = 'X'.
          screen-input = 0.
          MODIFY SCREEN.
        ELSE.
          p_bbkpf = ' '.
          p_bbseg = ' '.
          p_bglu1 = ' '.
          p_bsplit = ' '.
          p_bindex = ' '.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'SCH'.
        IF p_cauto IS NOT INITIAL.
          p_cflags = 'X'.
          p_caccou = 'X'.
          p_ccurr = 'X'.
          p_cdat = 'X'.
          p_cclear = 'X'.
          p_cbstat = 'X'.
          p_cawxxx = 'X'.
          p_cstorn = 'X'.
          p_cshkzg = 'X'.
          p_cbewar = 'X'.
          p_czuonr  = 'X'.
          p_cktosl = 'X'.
          p_cusnam = 'X'.
          p_cblart = 'X'.
          p_cumskz = 'X'.
          p_cvbund = 'X'.
          screen-input = 0.
          MODIFY SCREEN.
        ELSE.
          IF p_cflags = 'X'
            AND p_caccou = 'X'
            AND p_ccurr = 'X'
            AND p_cdat = 'X'
            AND p_cclear = 'X'
            AND p_cbstat = 'X'
            AND p_cawxxx = 'X'
            AND p_cstorn = 'X'
            AND p_cshkzg = 'X'
            AND p_cbewar = 'X'
            AND p_czuonr = 'X'
            AND p_cktosl = 'X'
            AND p_cusnam = 'X'
            AND p_cblart = 'X'
            AND p_cumskz = 'X'
            AND p_cbschl = 'X'
            AND p_cvbund = 'X'.
            p_cflags = ' '.
            p_caccou = ' '.
            p_ccurr = ' '.
            p_cdat = ' '.
            p_cclear = ' '.
            p_cbstat = ' '.
            p_cawxxx = ' '.
            p_cstorn = ' '.
            p_cshkzg = ' '.
            p_cbewar = ' '.
            p_czuonr  = ' '.
            p_cktosl = ' '.
            p_cusnam = ' '.
            p_cblart = ' '.
            p_cumskz = ' '.
            p_cbschl = ' '.
            p_cvbund = ' '.
          ENDIF.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
    ENDCASE.

    CASE screen-name.
      WHEN 'gd_mass'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_BINDEX'.
        IF acdoca_active = 1.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_BACDOC'.
        IF acdoca_active = 0.
          screen-invisible = 0.
        ENDIF.
      WHEN 'P_TEST'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CURRY'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_MODIF'.
        IF expert_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_EDKEY'.
        IF expert_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_UPDATE'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'BLOCK8'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'BLOCK7'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'REVE'.
        IF support_mode IS INITIAL.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CAWXXX'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CCLEAR'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CBLART'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CSTORN'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CUMSKZ'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CKTOSL'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'P_CZUONR'.
        IF acdoca_active = 0.
          screen-invisible = 1.
        ENDIF.
      WHEN 'B_INDEX'.
        IF acdoca_active = 1.
          screen-invisible = 1.
        ENDIF.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

AT SELECTION-SCREEN.

  CASE sy-ucomm.
    WHEN 'CUSTOMER'.
      support_mode = ' '.
      expert_mode = ' '.
    WHEN 'SAPONLY'.
      IF support_mode NE 'X'.
        CALL FUNCTION 'TR_SYS_PARAMS'
          IMPORTING
            systemtype = lv_sys_type.
        IF lv_sys_type NE 'SAP'.
          REFRESH a_field.
          CLEAR a_field.
          a_field-tabname   = 'BSEG'.
          a_field-fieldname = 'SGTXT'.
          a_field-fieldtext = 'Passcode'.
          APPEND a_field.
          CALL FUNCTION 'POPUP_GET_VALUES'
            EXPORTING
              popup_title = 'Enter GLX Password LVL1'
            TABLES
              fields      = a_field.
          PERFORM check_authority USING gc_check_value1.
        ELSE.
          CLEAR sy-msgty.
        ENDIF.
        IF sy-msgty = 'W'.
          support_mode = ' '.
          expert_mode = ' '.
        ELSE.
          support_mode = 'X'.
          expert_mode = ' '.
        ENDIF.
      ENDIF.
    WHEN 'VINNIE2'.
      IF support_mode NE 'X' AND expert_mode NE 'X'.
        CALL FUNCTION 'TR_SYS_PARAMS'
          IMPORTING
            systemtype = lv_sys_type.
        IF lv_sys_type NE 'SAP'.
          REFRESH a_field.
          CLEAR a_field.
          a_field-tabname   = 'BSEG'.
          a_field-fieldname = 'SGTXT'.
          a_field-fieldtext = 'Passcode'.
          APPEND a_field.
          CALL FUNCTION 'POPUP_GET_VALUES'
            EXPORTING
              popup_title = 'Enter GLX Password LVL2'
            TABLES
              fields      = a_field.
          PERFORM check_authority USING gc_check_value2.
        ELSE.
          CLEAR sy-msgty.
        ENDIF.
        IF sy-msgty = 'W'.
          support_mode = ' '.
          expert_mode = ' '.
        ELSE.
          support_mode = 'X'.
          expert_mode = 'X'.
        ENDIF.
      ENDIF.
  ENDCASE.

  CASE sscrfields-ucomm.
    WHEN 'LOAD_LOGS'.
      reverse_flag = 0.
      EXPORT reverse_flag TO MEMORY ID 'REVFLAG'.
      SUBMIT fagl_prot
      WITH s_repid = sy-repid
      VIA SELECTION-SCREEN
      AND RETURN.
    WHEN 'REVE_LOGS'.
      reverse_flag = 1.
      EXPORT reverse_flag TO MEMORY ID 'REVFLAG'.
      SUBMIT fagl_prot
      WITH s_repid = sy-repid
      VIA SELECTION-SCREEN
      AND RETURN.
  ENDCASE.

*---------------------------------------------------------------------*
*       CLASS lcl_eventhandler DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_eventhandler DEFINITION.

  PUBLIC SECTION.

    CLASS-METHODS:
      handle_double_click FOR EVENT double_click OF cl_gui_alv_grid
        IMPORTING
          e_row
          e_column
          es_row_no
          sender,

      handle_data_changed FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING
          er_data_changed
          sender,

      handle_toolbar FOR EVENT toolbar OF cl_gui_alv_grid
        IMPORTING
          e_object
          e_interactive
          sender,

      handle_ucomm FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING
          e_ucomm
          sender,

      on_function_selected FOR EVENT function_selected OF cl_gui_toolbar
        IMPORTING fcode.


ENDCLASS.                    "lcl_eventhandler DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_eventhandler IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_eventhandler IMPLEMENTATION.

  METHOD on_function_selected.
    DATA: ld_bkpfstate TYPE c.
    CASE fcode.
      WHEN 'BKPF'.
        IF ld_height_r1 = 0.
          ld_height_r1 = 10.
        ELSE.
          ld_height_r1 = 0.
        ENDIF.
        IF ld_height_o1 = 0.
          ld_height_o1 = 10.
        ELSE.
          ld_height_o1 = 0.
        ENDIF.
      WHEN 'BSEG'.
        IF ld_height_r2 = 0.
          ld_height_r2 = 10.
        ELSE.
          ld_height_r2 = 0.
        ENDIF.
        IF ld_height_o2 = 0.
          ld_height_o2 = 10.
        ELSE.
          ld_height_o2 = 0.
        ENDIF.
      WHEN 'SPLINFO'.
        IF ld_height_r3 = 0.
          ld_height_r3 = 10.
        ELSE.
          ld_height_r3 = 0.
        ENDIF.
        IF ld_height_o3 = 0.
          ld_height_o3 = 10.
        ELSE.
          ld_height_o3 = 0.
        ENDIF.
      WHEN 'G/L'.
        IF ld_height_r4 = 0.
          ld_height_r4 = 10.
        ELSE.
          ld_height_r4 = 0.
        ENDIF.
        IF ld_height_o4 = 0.
          ld_height_o4 = 10.
        ELSE.
          ld_height_o4 = 0.
        ENDIF.
      WHEN 'BSIS'.
        IF ld_height_r5 = 0.
          ld_height_r5 = 10.
        ELSE.
          ld_height_r5 = 0.
        ENDIF.
        IF ld_height_o5 = 0.
          ld_height_o5 = 10.
        ELSE.
          ld_height_o5 = 0.
        ENDIF.
      WHEN 'BSAS'.
        IF ld_height_r6 = 0.
          ld_height_r6 = 10.
        ELSE.
          ld_height_r6 = 0.
        ENDIF.
        IF ld_height_o6 = 0.
          ld_height_o6 = 10.
        ELSE.
          ld_height_o6 = 0.
        ENDIF.
      WHEN 'BSIK'.
        IF ld_height_r7 = 0.
          ld_height_r7 = 10.
        ELSE.
          ld_height_r7 = 0.
        ENDIF.
        IF ld_height_o7 = 0.
          ld_height_o7 = 10.
        ELSE.
          ld_height_o7 = 0.
        ENDIF.
      WHEN 'BSAK'.
        IF ld_height_r8 = 0.
          ld_height_r8 = 10.
        ELSE.
          ld_height_r8 = 0.
        ENDIF.
        IF ld_height_o8 = 0.
          ld_height_o8 = 10.
        ELSE.
          ld_height_o8 = 0.
        ENDIF.
      WHEN 'BSID'.
        IF ld_height_r9 = 0.
          ld_height_r9 = 10.
        ELSE.
          ld_height_r9 = 0.
        ENDIF.
        IF ld_height_o9 = 0.
          ld_height_o9 = 10.
        ELSE.
          ld_height_o9 = 0.
        ENDIF.
      WHEN 'BSAD'.
        IF ld_height_r10 = 0.
          ld_height_r10 = 10.
        ELSE.
          ld_height_r10 = 0.
        ENDIF.
        IF ld_height_o10 = 0.
          ld_height_o10 = 10.
        ELSE.
          ld_height_o10 = 0.
        ENDIF.
      WHEN 'SPLINFO_VAL'.
        IF ld_height_r11 = 0.
          ld_height_r11 = 10.
        ELSE.
          ld_height_r11 = 0.
        ENDIF.
        IF ld_height_o11 = 0.
          ld_height_o11 = 10.
        ELSE.
          ld_height_o11 = 0.
        ENDIF.
      WHEN 'BSEC'.
        IF ld_height_r12 = 0.
          ld_height_r12 = 10.
        ELSE.
          ld_height_r12 = 0.
        ENDIF.
        IF ld_height_o12 = 0.
          ld_height_o12 = 10.
        ELSE.
          ld_height_o12 = 0.
        ENDIF.
      WHEN 'BSED'.
        IF ld_height_r13 = 0.
          ld_height_r13 = 10.
        ELSE.
          ld_height_r13 = 0.
        ENDIF.
        IF ld_height_o13 = 0.
          ld_height_o13 = 10.
        ELSE.
          ld_height_o13 = 0.
        ENDIF.
      WHEN 'BSET'.
        IF ld_height_r14 = 0.
          ld_height_r14 = 10.
        ELSE.
          ld_height_r14 = 0.
        ENDIF.
        IF ld_height_o14 = 0.
          ld_height_o14 = 10.
        ELSE.
          ld_height_o14 = 0.
        ENDIF.
      WHEN 'BSE_CLR'.
        IF ld_height_r15 = 0.
          ld_height_r15 = 10.
        ELSE.
          ld_height_r15 = 0.
        ENDIF.
        IF ld_height_o15 = 0.
          ld_height_o15 = 10.
        ELSE.
          ld_height_o15 = 0.
        ENDIF.
      WHEN 'BSEG_ADD'.
        IF ld_height_r16 = 0.
          ld_height_r16 = 10.
        ELSE.
          ld_height_r16 = 0.
        ENDIF.
        IF ld_height_o16 = 0.
          ld_height_o16 = 10.
        ELSE.
          ld_height_o16 = 0.
        ENDIF.
    ENDCASE.
    l_splitter2->set_row_height( id = 1 height = ld_height_r1 ).
    l_splitter2->set_row_height( id = 2 height = ld_height_r2 ).
    l_splitter2->set_row_height( id = 9 height = ld_height_r3 ).
    l_splitter2->set_row_height( id = 16 height = ld_height_r4 ).
    l_splitter2->set_row_height( id = 3 height = ld_height_r5 ).
    l_splitter2->set_row_height( id = 4 height = ld_height_r6 ).
    l_splitter2->set_row_height( id = 5 height = ld_height_r7 ).
    l_splitter2->set_row_height( id = 6 height = ld_height_r8 ).
    l_splitter2->set_row_height( id = 7 height = ld_height_r9 ).
    l_splitter2->set_row_height( id = 8 height = ld_height_r10 ).
    l_splitter2->set_row_height( id = 10 height = ld_height_r11 ).
    l_splitter2->set_row_height( id = 11 height = ld_height_r12 ).
    l_splitter2->set_row_height( id = 12 height = ld_height_r13 ).
    l_splitter2->set_row_height( id = 13 height = ld_height_r14 ).
    l_splitter2->set_row_height( id = 14 height = ld_height_r15 ).
    l_splitter2->set_row_height( id = 15 height = ld_height_r16 ).

    l_splitter3->set_row_height( id = 1 height = ld_height_o1 ).
    l_splitter3->set_row_height( id = 2 height = ld_height_o2 ).
    l_splitter3->set_row_height( id = 9 height = ld_height_o3 ).
    l_splitter3->set_row_height( id = 16 height = ld_height_o4 ).
    l_splitter3->set_row_height( id = 3 height = ld_height_o5 ).
    l_splitter3->set_row_height( id = 4 height = ld_height_o6 ).
    l_splitter3->set_row_height( id = 5 height = ld_height_o7 ).
    l_splitter3->set_row_height( id = 6 height = ld_height_o8 ).
    l_splitter3->set_row_height( id = 7 height = ld_height_o9 ).
    l_splitter3->set_row_height( id = 8 height = ld_height_o10 ).
    l_splitter3->set_row_height( id = 10 height = ld_height_o11 ).
    l_splitter3->set_row_height( id = 11 height = ld_height_o12 ).
    l_splitter3->set_row_height( id = 12 height = ld_height_o13 ).
    l_splitter3->set_row_height( id = 13 height = ld_height_o14 ).
    l_splitter3->set_row_height( id = 14 height = ld_height_o15 ).
    l_splitter3->set_row_height( id = 15 height = ld_height_o16 ).

  ENDMETHOD.                    "on_function_selected

  METHOD handle_ucomm.
    CASE e_ucomm.
      WHEN 'SAVE'.
        DATA ls_doclist LIKE LINE OF gt_doclist.
        save_flag = 1.
        READ TABLE gt_bkpf_disp INTO ls_bkpf_disp INDEX 1.
        READ TABLE gt_doclist_store INTO ls_bkpfmod INDEX 1.
        l_alv_r1->check_changed_data( ).
        l_alv_r2->check_changed_data( ).
        l_alv_r3->check_changed_data( ).
        l_alv_r4->check_changed_data( ).
        l_alv_r5->check_changed_data( ).
        l_alv_r6->check_changed_data( ).
        l_alv_r7->check_changed_data( ).
        l_alv_r8->check_changed_data( ).
        l_alv_r9->check_changed_data( ).
        l_alv_r10->check_changed_data( ).
        l_alv_r11->check_changed_data( ).
        l_alv_r12->check_changed_data( ).
        l_alv_r13->check_changed_data( ).
        l_alv_r15->check_changed_data( ).
        l_alv_r16->check_changed_data( ).
        l_alv_r14->check_changed_data( ).

        PERFORM check_keep.
        IF gd_keep = 'X'.
          gd_keep = ' '.
        ELSE.
          PERFORM check_scenario.
          flag_store = 1.
          PERFORM update_flags.

          LOOP AT gt_doclist_store INTO ls_doclist.
            IF ls_doclist-control = '@5C@'.
              save_flag = 0.
            ENDIF.
          ENDLOOP.
          IF save_flag = 0.
            MESSAGE 'Invalid Checks' TYPE 'I'.
            READ TABLE gt_doclist_store INDEX 1 INTO ls_bkpfmod.
            PERFORM select_belnr USING ls_bkpfmod.
            PERFORM display_data.
          ELSE.
            IF p_test IS INITIAL.
              PERFORM update_scenario.
            ENDIF.
            p_modif = ' '.
            IF p_log IS NOT INITIAL.
              PERFORM save_protocol.
            ENDIF.
            PERFORM display_data_end USING ls_bkpfmod.
          ENDIF.
        ENDIF.
    ENDCASE.
  ENDMETHOD.                    "handle_ucomm

  METHOD handle_toolbar.
    DATA:
    ls_button   TYPE stb_button.

    ls_button-function = 'SAVE'.
    ls_button-icon     = icon_system_save.

    IF gd_save IS NOT INITIAL.
      INSERT ls_button INTO e_object->mt_toolbar INDEX 4.
    ELSEIF p_update IS NOT INITIAL
      OR p_modif IS NOT INITIAL
      OR p_edkey IS NOT INITIAL.
      INSERT ls_button INTO e_object->mt_toolbar INDEX 4.
    ENDIF.


  ENDMETHOD.                    "handle_toolbar


  METHOD handle_double_click.

    CASE sender.
      WHEN l_alv_left.
        READ TABLE gt_bkpf_disp INTO ls_bkpf_disp INDEX 1.
        READ TABLE gt_doclist_store INTO ls_bkpfmod INDEX e_row-index.
        IF save_flag IS INITIAL.
          l_alv_r1->check_changed_data( ).
          l_alv_r2->check_changed_data( ).
          l_alv_r3->check_changed_data( ).
          l_alv_r4->check_changed_data( ).
          l_alv_r5->check_changed_data( ).
          l_alv_r6->check_changed_data( ).
          l_alv_r7->check_changed_data( ).
          l_alv_r8->check_changed_data( ).
          l_alv_r9->check_changed_data( ).
          l_alv_r10->check_changed_data( ).
          l_alv_r11->check_changed_data( ).
          l_alv_r12->check_changed_data( ).
          l_alv_r13->check_changed_data( ).
          l_alv_r15->check_changed_data( ).
          l_alv_r16->check_changed_data( ).
          l_alv_r14->check_changed_data( ).
        ENDIF.
        PERFORM consistency_check.
        PERFORM select_belnr USING ls_bkpfmod.
    ENDCASE.
  ENDMETHOD.                    "handle_double_click

  METHOD handle_data_changed.
    CASE sender.
      WHEN l_alv_r1.
        DATA ls_bkpf LIKE bkpfmoddisp.
        DATA ld_tabix TYPE i.
        DATA ls_change TYPE LINE OF lvc_t_modi.
        DATA ls_row TYPE LINE OF lvc_t_moce.
        FIELD-SYMBOLS: <row>      TYPE any, <field> TYPE any, <value> TYPE any,
                       <ld_field> TYPE any.

        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bkpf.
          INSERT ls_bkpf INTO gt_bkpf_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bkpf.

          READ TABLE gt_bkpf_disp INDEX <row> INTO ls_bkpf.
          LOOP AT gt_bkpf_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bkpf-bukrs
            AND belnr = ls_bkpf-belnr
            AND gjahr = ls_bkpf-gjahr
            AND check = ls_bkpf-check
            AND orig = ls_bkpf-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bkpf-check = 'X'
            AND ls_bkpf-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bkpf-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bkpf-pairing = pairing_counter.
              APPEND ls_bkpf TO gt_bkpf_store.
              ls_bkpf-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bkpf
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bkpf-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bkpf-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bkpf_store FROM ls_bkpf INDEX ld_tabix.
          MODIFY gt_bkpf_disp FROM ls_bkpf INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bkpf_disp INDEX <row> INTO ls_bkpf.
          ls_bkpf-orig = 'INSE'.
          MODIFY gt_bkpf_disp FROM ls_bkpf INDEX <row> TRANSPORTING orig check.
          APPEND ls_bkpf TO gt_bkpf_store.
          CLEAR ls_bkpf.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bkpf_disp INDEX <row> INTO ls_bkpf.
          ls_bkpf-check = ' '.
          MODIFY gt_bkpf_disp FROM ls_bkpf INDEX <row> TRANSPORTING check.
          LOOP AT gt_bkpf_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bkpf-bukrs
            AND belnr = ls_bkpf-belnr
            AND gjahr = ls_bkpf-gjahr
            AND check = ls_bkpf-check
            AND orig = ls_bkpf-orig.
            MODIFY gt_bkpf_store FROM ls_bkpf INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r2.
        DATA ls_bseg LIKE bsegmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bseg.
          INSERT ls_bseg INTO gt_bseg_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bseg.

          READ TABLE gt_bseg_disp INDEX <row> INTO ls_bseg.
          LOOP AT gt_bseg_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bseg-bukrs
            AND belnr = ls_bseg-belnr
            AND buzei = ls_bseg-buzei
            AND gjahr = ls_bseg-gjahr
            AND check = ls_bseg-check
            AND orig = ls_bseg-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bseg-check = 'X'
            AND ls_bseg-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bseg-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bseg-pairing = pairing_counter.
              APPEND ls_bseg TO gt_bseg_store.
              ls_bseg-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bseg
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bseg-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bseg-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
          MODIFY gt_bseg_disp FROM ls_bseg INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bseg_disp INDEX <row> INTO ls_bseg.
          ls_bseg-orig = 'INSE'.
          MODIFY gt_bseg_disp FROM ls_bseg INDEX <row> TRANSPORTING orig check.
          APPEND ls_bseg TO gt_bseg_store.
          CLEAR ls_bseg.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bseg_disp INDEX <row> INTO ls_bseg.
          ls_bseg-check = ' '.
          MODIFY gt_bseg_disp FROM ls_bseg INDEX <row> TRANSPORTING check.
          LOOP AT gt_bseg_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bseg-bukrs
            AND belnr = ls_bseg-belnr
            AND gjahr = ls_bseg-gjahr
            AND buzei = ls_bseg-buzei
            AND check = ls_bseg-check
            AND orig = ls_bseg-orig.
            MODIFY gt_bseg_store FROM ls_bseg INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r3.
        DATA ls_splinfo LIKE splinfomoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_splinfo.
          INSERT ls_splinfo INTO gt_splinfo_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_splinfo.

          READ TABLE gt_splinfo_disp INDEX <row> INTO ls_splinfo.
          LOOP AT gt_splinfo_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_splinfo-bukrs
            AND belnr = ls_splinfo-belnr
            AND buzei = ls_splinfo-buzei
            AND spl_no = ls_splinfo-spl_no
            AND gjahr = ls_splinfo-gjahr
            AND check = ls_splinfo-check
            AND orig = ls_splinfo-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_splinfo-check = 'X'
            AND ls_splinfo-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_splinfo-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_splinfo-pairing = pairing_counter.
              APPEND ls_splinfo TO gt_splinfo_store.
              ls_splinfo-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_splinfo
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_splinfo-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_splinfo-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_splinfo_store FROM ls_splinfo INDEX ld_tabix.
          MODIFY gt_splinfo_disp FROM ls_splinfo INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_splinfo_disp INDEX <row> INTO ls_splinfo.
          ls_splinfo-orig = 'INSE'.
          MODIFY gt_splinfo_disp FROM ls_splinfo INDEX <row> TRANSPORTING orig check.
          APPEND ls_splinfo TO gt_splinfo_store.
          CLEAR ls_splinfo.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_splinfo_disp INDEX <row> INTO ls_splinfo.
          ls_splinfo-check = ' '.
          MODIFY gt_splinfo_disp FROM ls_splinfo INDEX <row> TRANSPORTING check.
          LOOP AT gt_splinfo_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_splinfo-bukrs
            AND belnr = ls_splinfo-belnr
            AND gjahr = ls_splinfo-gjahr
            AND buzei = ls_splinfo-buzei
            AND spl_no = ls_splinfo-spl_no
            AND check = ls_splinfo-check
            AND orig = ls_splinfo-orig.
            MODIFY gt_splinfo_store FROM ls_splinfo INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r5.
        DATA ls_bsis LIKE bsismoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsis.
          INSERT ls_bsis INTO gt_bsis_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsis.

          READ TABLE gt_bsis_disp INDEX <row> INTO ls_bsis.
          LOOP AT gt_bsis_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsis-bukrs
            AND belnr = ls_bsis-belnr
            AND buzei = ls_bsis-buzei
            AND hkont = ls_bsis-hkont
            AND augdt = ls_bsis-augdt
            AND augbl = ls_bsis-augbl
            AND zuonr = ls_bsis-zuonr
            AND gjahr = ls_bsis-gjahr
            AND check = ls_bsis-check
            AND orig = ls_bsis-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsis-check = 'X'
            AND ls_bsis-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsis-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsis-pairing = pairing_counter.
              APPEND ls_bsis TO gt_bsis_store.
              ls_bsis-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsis
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsis-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsis-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsis_store FROM ls_bsis INDEX ld_tabix.
          MODIFY gt_bsis_disp FROM ls_bsis INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsis_disp INDEX <row> INTO ls_bsis.
          ls_bsis-orig = 'INSE'.
          MODIFY gt_bsis_disp FROM ls_bsis INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsis TO gt_bsis_store.
          CLEAR ls_bsis.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsis_disp INDEX <row> INTO ls_bsis.
          ls_bsis-check = ' '.
          MODIFY gt_bsis_disp FROM ls_bsis INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsis_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsis-bukrs
            AND belnr = ls_bsis-belnr
            AND buzei = ls_bsis-buzei
            AND hkont = ls_bsis-hkont
            AND augdt = ls_bsis-augdt
            AND augbl = ls_bsis-augbl
            AND zuonr = ls_bsis-zuonr
            AND gjahr = ls_bsis-gjahr
            AND check = ls_bsis-check
            AND orig = ls_bsis-orig.
            MODIFY gt_bsis_store FROM ls_bsis INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r4.
        DATA ls_glu1 LIKE glu1moddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_glu1.
          INSERT ls_glu1 INTO gt_glu1mod_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_glu1.

          READ TABLE gt_glu1mod_disp INDEX <row> INTO ls_glu1.
          LOOP AT gt_glu1_store TRANSPORTING NO FIELDS
            WHERE rbukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND docln = ls_glu1-docln
            AND ryear = ls_glu1-ryear
            AND check = ls_glu1-check
            AND rldnr = ls_glu1-rldnr
            AND orig = ls_glu1-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_glu1-check = 'X'
            AND ls_glu1-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_glu1-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_glu1-pairing = pairing_counter.
              APPEND ls_glu1 TO gt_glu1_store.
              ls_glu1-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_glu1
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_glu1-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_glu1-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_glu1_store FROM ls_glu1 INDEX ld_tabix.
          MODIFY gt_glu1mod_disp FROM ls_glu1 INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_glu1mod_disp INDEX <row> INTO ls_glu1.
          ls_glu1-orig = 'INSE'.
          MODIFY gt_glu1mod_disp FROM ls_glu1 INDEX <row> TRANSPORTING orig check.
          APPEND ls_glu1 TO gt_glu1_store.
          CLEAR ls_glu1.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_glu1mod_disp INDEX <row> INTO ls_glu1.
          ls_glu1-check = ' '.
          MODIFY gt_glu1mod_disp FROM ls_glu1 INDEX <row> TRANSPORTING check.
          LOOP AT gt_glu1_store TRANSPORTING NO FIELDS
            WHERE rbukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND docln = ls_glu1-docln
            AND ryear = ls_glu1-ryear
            AND check = ls_glu1-check
            AND rldnr = ls_glu1-rldnr
            AND orig = ls_glu1-orig.
            MODIFY gt_glu1_store FROM ls_glu1 INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r6.
        DATA ls_bsas LIKE bsasmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsas.
          INSERT ls_bsas INTO gt_bsas_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsas.

          READ TABLE gt_bsas_disp INDEX <row> INTO ls_bsas.
          LOOP AT gt_bsas_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsas-bukrs
            AND belnr = ls_bsas-belnr
            AND buzei = ls_bsas-buzei
            AND hkont = ls_bsas-hkont
            AND augdt = ls_bsas-augdt
            AND augbl = ls_bsas-augbl
            AND zuonr = ls_bsas-zuonr
            AND gjahr = ls_bsas-gjahr
            AND check = ls_bsas-check
            AND orig = ls_bsas-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsas-check = 'X'
            AND ls_bsas-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsas-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsas-pairing = pairing_counter.
              APPEND ls_bsas TO gt_bsas_store.
              ls_bsas-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsas
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsas-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsas-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsas_store FROM ls_bsas INDEX ld_tabix.
          MODIFY gt_bsas_disp FROM ls_bsas INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsas_disp INDEX <row> INTO ls_bsas.
          ls_bsas-orig = 'INSE'.
          MODIFY gt_bsas_disp FROM ls_bsas INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsas TO gt_bsas_store.
          CLEAR ls_bsas.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsas_disp INDEX <row> INTO ls_bsas.
          ls_bsas-check = ' '.
          MODIFY gt_bsas_disp FROM ls_bsas INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsas_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsas-bukrs
            AND belnr = ls_bsas-belnr
            AND buzei = ls_bsas-buzei
            AND hkont = ls_bsas-hkont
            AND augdt = ls_bsas-augdt
            AND augbl = ls_bsas-augbl
            AND zuonr = ls_bsas-zuonr
            AND gjahr = ls_bsas-gjahr
            AND check = ls_bsas-check
            AND orig = ls_bsas-orig.
            MODIFY gt_bsas_store FROM ls_bsas INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r7.
        DATA ls_bsik LIKE bsikmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsik.
          INSERT ls_bsik INTO gt_bsik_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsik.

          READ TABLE gt_bsik_disp INDEX <row> INTO ls_bsik.
          LOOP AT gt_bsik_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsik-bukrs
            AND belnr = ls_bsik-belnr
            AND buzei = ls_bsik-buzei
            AND lifnr = ls_bsik-lifnr
            AND umsks = ls_bsik-umsks
            AND umskz = ls_bsik-umskz
            AND augdt = ls_bsik-augdt
            AND augbl = ls_bsik-augbl
            AND zuonr = ls_bsik-zuonr
            AND gjahr = ls_bsik-gjahr
            AND check = ls_bsik-check
            AND orig = ls_bsik-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsik-check = 'X'
            AND ls_bsik-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsik-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsik-pairing = pairing_counter.
              APPEND ls_bsik TO gt_bsik_store.
              ls_bsik-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsik
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsik-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsik-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsik_store FROM ls_bsik INDEX ld_tabix.
          MODIFY gt_bsik_disp FROM ls_bsik INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsik_disp INDEX <row> INTO ls_bsik.
          ls_bsik-orig = 'INSE'.
          MODIFY gt_bsik_disp FROM ls_bsik INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsik TO gt_bsik_store.
          CLEAR ls_bsik.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsik_disp INDEX <row> INTO ls_bsik.
          ls_bsik-check = ' '.
          MODIFY gt_bsik_disp FROM ls_bsik INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsik_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsik-bukrs
            AND belnr = ls_bsik-belnr
            AND buzei = ls_bsik-buzei
            AND lifnr = ls_bsik-lifnr
            AND umsks = ls_bsik-umsks
            AND umskz = ls_bsik-umskz
            AND augdt = ls_bsik-augdt
            AND augbl = ls_bsik-augbl
            AND zuonr = ls_bsik-zuonr
            AND gjahr = ls_bsik-gjahr
            AND check = ls_bsik-check
            AND orig = ls_bsik-orig.
            MODIFY gt_bsik_store FROM ls_bsik INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r8.
        DATA ls_bsak LIKE bsakmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsak.
          INSERT ls_bsak INTO gt_bsak_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsak.

          READ TABLE gt_bsak_disp INDEX <row> INTO ls_bsak.
          LOOP AT gt_bsak_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsak-bukrs
            AND belnr = ls_bsak-belnr
            AND buzei = ls_bsak-buzei
            AND lifnr = ls_bsak-lifnr
            AND umsks = ls_bsak-umsks
            AND umskz = ls_bsak-umskz
            AND augdt = ls_bsak-augdt
            AND augbl = ls_bsak-augbl
            AND zuonr = ls_bsak-zuonr
            AND gjahr = ls_bsak-gjahr
            AND check = ls_bsak-check
            AND orig = ls_bsak-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsak-check = 'X'
            AND ls_bsak-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsak-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsak-pairing = pairing_counter.
              APPEND ls_bsak TO gt_bsak_store.
              ls_bsak-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsak
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsak-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsak-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsak_store FROM ls_bsak INDEX ld_tabix.
          MODIFY gt_bsak_disp FROM ls_bsak INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsak_disp INDEX <row> INTO ls_bsak.
          ls_bsak-orig = 'INSE'.
          MODIFY gt_bsak_disp FROM ls_bsak INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsak TO gt_bsak_store.
          CLEAR ls_bsak.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsak_disp INDEX <row> INTO ls_bsak.
          ls_bsak-check = ' '.
          MODIFY gt_bsak_disp FROM ls_bsak INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsak_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsak-bukrs
            AND belnr = ls_bsak-belnr
            AND buzei = ls_bsak-buzei
            AND lifnr = ls_bsak-lifnr
            AND umsks = ls_bsak-umsks
            AND umskz = ls_bsak-umskz
            AND augdt = ls_bsak-augdt
            AND augbl = ls_bsak-augbl
            AND zuonr = ls_bsak-zuonr
            AND gjahr = ls_bsak-gjahr
            AND check = ls_bsak-check
            AND orig = ls_bsak-orig.
            MODIFY gt_bsak_store FROM ls_bsak INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r9.
        DATA ls_bsid LIKE bsidmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsid.
          INSERT ls_bsid INTO gt_bsid_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsid.

          READ TABLE gt_bsid_disp INDEX <row> INTO ls_bsid.
          LOOP AT gt_bsid_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsid-bukrs
            AND belnr = ls_bsid-belnr
            AND buzei = ls_bsid-buzei
            AND kunnr = ls_bsid-kunnr
            AND umsks = ls_bsid-umsks
            AND umskz = ls_bsid-umskz
            AND augdt = ls_bsid-augdt
            AND augbl = ls_bsid-augbl
            AND zuonr = ls_bsid-zuonr
            AND gjahr = ls_bsid-gjahr
            AND check = ls_bsid-check
            AND orig = ls_bsid-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsid-check = 'X'
            AND ls_bsid-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsid-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsid-pairing = pairing_counter.
              APPEND ls_bsid TO gt_bsid_store.
              ls_bsid-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsid
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsid-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsid-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsid_store FROM ls_bsid INDEX ld_tabix.
          MODIFY gt_bsid_disp FROM ls_bsid INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsid_disp INDEX <row> INTO ls_bsid.
          ls_bsid-orig = 'INSE'.
          MODIFY gt_bsid_disp FROM ls_bsid INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsid TO gt_bsid_store.
          CLEAR ls_bsid.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsid_disp INDEX <row> INTO ls_bsid.
          ls_bsid-check = ' '.
          MODIFY gt_bsid_disp FROM ls_bsid INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsid_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsid-bukrs
            AND belnr = ls_bsid-belnr
            AND buzei = ls_bsid-buzei
            AND kunnr = ls_bsid-kunnr
            AND umsks = ls_bsid-umsks
            AND umskz = ls_bsid-umskz
            AND augdt = ls_bsid-augdt
            AND augbl = ls_bsid-augbl
            AND zuonr = ls_bsid-zuonr
            AND gjahr = ls_bsid-gjahr
            AND check = ls_bsid-check
            AND orig = ls_bsid-orig.
            MODIFY gt_bsid_store FROM ls_bsid INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r10.
        DATA ls_bsad LIKE bsadmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsad.
          INSERT ls_bsad INTO gt_bsad_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsad.

          READ TABLE gt_bsad_disp INDEX <row> INTO ls_bsad.
          LOOP AT gt_bsad_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsad-bukrs
            AND belnr = ls_bsad-belnr
            AND buzei = ls_bsad-buzei
            AND kunnr = ls_bsad-kunnr
            AND umsks = ls_bsad-umsks
            AND umskz = ls_bsad-umskz
            AND augdt = ls_bsad-augdt
            AND augbl = ls_bsad-augbl
            AND zuonr = ls_bsad-zuonr
            AND gjahr = ls_bsad-gjahr
            AND check = ls_bsad-check
            AND orig = ls_bsad-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsad-check = 'X'
            AND ls_bsad-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsad-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsad-pairing = pairing_counter.
              APPEND ls_bsad TO gt_bsad_store.
              ls_bsad-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsad
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsad-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsad-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsad_store FROM ls_bsad INDEX ld_tabix.
          MODIFY gt_bsad_disp FROM ls_bsad INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsad_disp INDEX <row> INTO ls_bsad.
          ls_bsad-orig = 'INSE'.
          MODIFY gt_bsad_disp FROM ls_bsad INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsad TO gt_bsad_store.
          CLEAR ls_bsad.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsad_disp INDEX <row> INTO ls_bsad.
          ls_bsad-check = ' '.
          MODIFY gt_bsad_disp FROM ls_bsad INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsad_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsad-bukrs
            AND belnr = ls_bsad-belnr
            AND buzei = ls_bsad-buzei
            AND kunnr = ls_bsad-kunnr
            AND umsks = ls_bsad-umsks
            AND umskz = ls_bsad-umskz
            AND augdt = ls_bsad-augdt
            AND augbl = ls_bsad-augbl
            AND zuonr = ls_bsad-zuonr
            AND gjahr = ls_bsad-gjahr
            AND check = ls_bsad-check
            AND orig = ls_bsad-orig.
            MODIFY gt_bsad_store FROM ls_bsad INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r11.
        DATA ls_splinfo_val LIKE splinfovalmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_splinfo_val.
          INSERT ls_splinfo_val INTO gt_splinfo_val_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_splinfo_val.

          READ TABLE gt_splinfo_val_disp INDEX <row> INTO ls_splinfo_val.
          LOOP AT gt_splinfo_val_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_splinfo_val-bukrs
            AND belnr = ls_splinfo_val-belnr
            AND buzei = ls_splinfo_val-buzei
            AND gjahr = ls_splinfo_val-gjahr
            AND spl_no = ls_splinfo_val-spl_no
            AND curtp = ls_splinfo_val-curtp
            AND check = ls_splinfo_val-check
            AND orig = ls_splinfo_val-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_splinfo_val-check = 'X'
            AND ls_splinfo_val-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_splinfo_val-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_splinfo_val-pairing = pairing_counter.
              APPEND ls_splinfo_val TO gt_splinfo_val_store.
              ls_splinfo_val-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_splinfo_val
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_splinfo_val-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_splinfo_val-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_splinfo_val_store FROM ls_splinfo_val INDEX ld_tabix.
          MODIFY gt_splinfo_val_disp FROM ls_splinfo_val INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_splinfo_val_disp INDEX <row> INTO ls_splinfo_val.
          ls_splinfo_val-orig = 'INSE'.
          MODIFY gt_splinfo_val_disp FROM ls_splinfo_val INDEX <row> TRANSPORTING orig check.
          APPEND ls_splinfo_val TO gt_splinfo_val_store.
          CLEAR ls_splinfo_val.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_splinfo_val_disp INDEX <row> INTO ls_splinfo_val.
          ls_splinfo_val-check = ' '.
          MODIFY gt_splinfo_val_disp FROM ls_splinfo_val INDEX <row> TRANSPORTING check.
          LOOP AT gt_splinfo_val_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_splinfo_val-bukrs
            AND belnr = ls_splinfo_val-belnr
            AND buzei = ls_splinfo_val-buzei
            AND gjahr = ls_splinfo_val-gjahr
            AND spl_no = ls_splinfo_val-spl_no
            AND curtp = ls_splinfo_val-curtp
            AND check = ls_splinfo_val-check
            AND orig = ls_splinfo_val-orig.
            MODIFY gt_splinfo_val_store FROM ls_splinfo_val INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r12.
        DATA ls_bsec LIKE bsecmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsec.
          INSERT ls_bsec INTO gt_bsec_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsec.

          READ TABLE gt_bsec_disp INDEX <row> INTO ls_bsec.
          LOOP AT gt_bsec_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsec-bukrs
            AND belnr = ls_bsec-belnr
            AND buzei = ls_bsec-buzei
            AND gjahr = ls_bsec-gjahr
            AND check = ls_bsec-check
            AND orig = ls_bsec-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsec-check = 'X'
            AND ls_bsec-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsec-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsec-pairing = pairing_counter.
              APPEND ls_bsec TO gt_bsec_store.
              ls_bsec-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsec
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsec-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsec-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsec_store FROM ls_bsec INDEX ld_tabix.
          MODIFY gt_bsec_disp FROM ls_bsec INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsec_disp INDEX <row> INTO ls_bsec.
          ls_bsec-orig = 'INSE'.
          MODIFY gt_bsec_disp FROM ls_bsec INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsec TO gt_bsec_store.
          CLEAR ls_bsec.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsec_disp INDEX <row> INTO ls_bsec.
          ls_bsec-check = ' '.
          MODIFY gt_bsec_disp FROM ls_bsec INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsec_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsec-bukrs
            AND belnr = ls_bsec-belnr
            AND buzei = ls_bsec-buzei
            AND gjahr = ls_bsec-gjahr
            AND check = ls_bsec-check
            AND orig = ls_bsec-orig.
            MODIFY gt_bsec_store FROM ls_bsec INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r13.
        DATA ls_bsed LIKE bsedmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bsed.
          INSERT ls_bsed INTO gt_bsed_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bsed.

          READ TABLE gt_bsed_disp INDEX <row> INTO ls_bsed.
          LOOP AT gt_bsed_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsed-bukrs
            AND belnr = ls_bsed-belnr
            AND buzei = ls_bsed-buzei
            AND gjahr = ls_bsed-gjahr
            AND check = ls_bsed-check
            AND orig = ls_bsed-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bsed-check = 'X'
            AND ls_bsed-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bsed-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bsed-pairing = pairing_counter.
              APPEND ls_bsed TO gt_bsed_store.
              ls_bsed-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bsed
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bsed-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bsed-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bsed_store FROM ls_bsed INDEX ld_tabix.
          MODIFY gt_bsed_disp FROM ls_bsed INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsed_disp INDEX <row> INTO ls_bsed.
          ls_bsed-orig = 'INSE'.
          MODIFY gt_bsed_disp FROM ls_bsed INDEX <row> TRANSPORTING orig check.
          APPEND ls_bsed TO gt_bsed_store.
          CLEAR ls_bsed.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bsed_disp INDEX <row> INTO ls_bsed.
          ls_bsed-check = ' '.
          MODIFY gt_bsed_disp FROM ls_bsed INDEX <row> TRANSPORTING check.
          LOOP AT gt_bsed_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bsed-bukrs
            AND belnr = ls_bsed-belnr
            AND buzei = ls_bsed-buzei
            AND gjahr = ls_bsed-gjahr
            AND check = ls_bsed-check
            AND orig = ls_bsed-orig.
            MODIFY gt_bsed_store FROM ls_bsed INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r14.
        DATA ls_bset LIKE bsetmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bset.
          INSERT ls_bset INTO gt_bset_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bset.

          READ TABLE gt_bset_disp INDEX <row> INTO ls_bset.
          LOOP AT gt_bset_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bset-bukrs
            AND belnr = ls_bset-belnr
            AND buzei = ls_bset-buzei
            AND gjahr = ls_bset-gjahr
            AND check = ls_bset-check
            AND orig = ls_bset-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bset-check = 'X'
            AND ls_bset-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bset-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bset-pairing = pairing_counter.
              APPEND ls_bset TO gt_bset_store.
              ls_bset-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bset
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bset-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bset-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bset_store FROM ls_bset INDEX ld_tabix.
          MODIFY gt_bset_disp FROM ls_bset INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bset_disp INDEX <row> INTO ls_bset.
          ls_bset-orig = 'INSE'.
          MODIFY gt_bset_disp FROM ls_bset INDEX <row> TRANSPORTING orig check.
          APPEND ls_bset TO gt_bset_store.
          CLEAR ls_bset.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bset_disp INDEX <row> INTO ls_bset.
          ls_bset-check = ' '.
          MODIFY gt_bset_disp FROM ls_bset INDEX <row> TRANSPORTING check.
          LOOP AT gt_bset_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bset-bukrs
            AND belnr = ls_bset-belnr
            AND buzei = ls_bset-buzei
            AND gjahr = ls_bset-gjahr
            AND check = ls_bset-check
            AND orig = ls_bset-orig.
            MODIFY gt_bset_store FROM ls_bset INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r15.
        DATA ls_bse_clr LIKE bse_clrmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bse_clr.
          INSERT ls_bse_clr INTO gt_bse_clr_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bse_clr.

          READ TABLE gt_bse_clr_disp INDEX <row> INTO ls_bse_clr.
          LOOP AT gt_bse_clr_store TRANSPORTING NO FIELDS
            WHERE bukrs_clr = ls_bse_clr-bukrs_clr
            AND belnr_clr = ls_bse_clr-belnr_clr
            AND index_clr = ls_bse_clr-index_clr
            AND gjahr_clr = ls_bse_clr-gjahr_clr
            AND check = ls_bse_clr-check
            AND orig = ls_bse_clr-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bse_clr-check = 'X'
            AND ls_bse_clr-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bse_clr-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bse_clr-pairing = pairing_counter.
              APPEND ls_bse_clr TO gt_bse_clr_store.
              ls_bse_clr-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bse_clr
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bse_clr-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bse_clr-check = 'E'.
            ENDIF.
          ENDIF.

          MODIFY gt_bse_clr_store FROM ls_bse_clr INDEX ld_tabix.
          MODIFY gt_bse_clr_disp FROM ls_bse_clr INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bse_clr_disp INDEX <row> INTO ls_bse_clr.
          ls_bse_clr-orig = 'INSE'.
          MODIFY gt_bse_clr_disp FROM ls_bse_clr INDEX <row> TRANSPORTING orig check.
          APPEND ls_bse_clr TO gt_bse_clr_store.
          CLEAR ls_bse_clr.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bse_clr_disp INDEX <row> INTO ls_bse_clr.
          ls_bse_clr-check = ' '.
          MODIFY gt_bse_clr_disp FROM ls_bse_clr INDEX <row> TRANSPORTING check.
          LOOP AT gt_bse_clr_store TRANSPORTING NO FIELDS
            WHERE bukrs_clr = ls_bse_clr-bukrs_clr
            AND belnr_clr = ls_bse_clr-belnr_clr
            AND index_clr = ls_bse_clr-index_clr
            AND gjahr_clr = ls_bse_clr-gjahr_clr
            AND check = ls_bse_clr-check
            AND orig = ls_bse_clr-orig.
            MODIFY gt_bse_clr_store FROM ls_bse_clr INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

      WHEN l_alv_r16.
        DATA ls_bseg_add LIKE bseg_addmoddisp.
        ASSIGN er_data_changed->mp_mod_rows->* TO <tabchange>.
        ASSIGN er_data_changed->mt_good_cells TO <protocol>.
        ASSIGN er_data_changed->mt_deleted_rows TO <tabdelete>.
        ASSIGN er_data_changed->mt_inserted_rows TO <tabinsert>.
        ASSIGN er_data_changed->mt_mod_cells TO <cellchange>.

        LOOP AT <tabinsert> INTO ls_row.
          CLEAR ls_bseg_add.
          INSERT ls_bseg_add INTO gt_bseg_add_disp INDEX ls_row-row_id.
        ENDLOOP.

        LOOP AT <protocol> INTO ls_change.
          ASSIGN ls_change-row_id TO <row>.
          ASSIGN ls_change-fieldname TO <field>.
          ASSIGN ls_change-value TO <value>.
          CLEAR ls_bseg_add.

          READ TABLE gt_bseg_add_disp INDEX <row> INTO ls_bseg_add.
          LOOP AT gt_bseg_add_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bseg_add-bukrs
            AND belnr = ls_bseg_add-belnr
            AND buzei = ls_bseg_add-buzei
            AND gjahr = ls_bseg_add-gjahr
            AND check = ls_bseg_add-check
            AND orig = ls_bseg_add-orig.
            ld_tabix = sy-tabix.
          ENDLOOP.
          IF ls_bseg_add-check = 'X'
            AND ls_bseg_add-orig NE 'EDIT'.
            IF <field> NE 'CHECK'.
              ls_bseg_add-check = 'O'.
              ADD 1 TO pairing_counter.
              ls_bseg_add-pairing = pairing_counter.
              APPEND ls_bseg_add TO gt_bseg_add_store.
              ls_bseg_add-check = 'X'.
            ENDIF.
          ENDIF.
          ASSIGN COMPONENT <field>
                 OF STRUCTURE ls_bseg_add
                 TO <ld_field>.

          <ld_field> = <value>.
          IF ls_bseg_add-check = 'X'.
            IF <field> NE 'CHECK'.
              ls_bseg_add-check = 'E'.
            ENDIF.
          ENDIF.
          MODIFY gt_bseg_add_store FROM ls_bseg_add INDEX ld_tabix.
          MODIFY gt_bseg_add_disp FROM ls_bseg_add INDEX <row>.
        ENDLOOP.

        LOOP AT <tabinsert> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bseg_add_disp INDEX <row> INTO ls_bseg_add.
          ls_bseg_add-orig = 'INSE'.
          MODIFY gt_bseg_add_disp FROM ls_bseg_add INDEX <row> TRANSPORTING orig check.
          APPEND ls_bseg_add TO gt_bseg_add_store.
          CLEAR ls_bseg_add.
        ENDLOOP.

        LOOP AT <tabdelete> INTO ls_row.
          ASSIGN ls_row-row_id TO <row>.
          READ TABLE gt_bseg_add_disp INDEX <row> INTO ls_bseg_add.
          ls_bseg_add-check = ' '.
          MODIFY gt_bseg_add_disp FROM ls_bseg_add INDEX <row> TRANSPORTING check.
          LOOP AT gt_bseg_add_store TRANSPORTING NO FIELDS
            WHERE bukrs = ls_bseg_add-bukrs
            AND belnr = ls_bseg_add-belnr
            AND buzei = ls_bseg_add-buzei
            AND gjahr = ls_bseg_add-gjahr
            AND check = ls_bseg_add-check
            AND orig = ls_bseg_add-orig.
            MODIFY gt_bseg_add_store FROM ls_bseg_add INDEX sy-tabix.
          ENDLOOP.
        ENDLOOP.

    ENDCASE.
  ENDMETHOD.                    "handle_data_changed

ENDCLASS.                   "lcl_eventhandler IMPLEMENTATION


***********************************************************************
* MAIN PROGRAM
***********************************************************************

START-OF-SELECTION.

  IF p_ionly IS NOT INITIAL.
    IF p_bukrs IS NOT INITIAL
      OR p_monat IS NOT INITIAL
      OR p_gjahr IS NOT INITIAL
      OR p_budat IS NOT INITIAL
      OR p_blart IS NOT INITIAL
      OR p_awtyp IS NOT INITIAL
      OR p_usnam IS NOT INITIAL
      OR p_tcode IS NOT INITIAL
      OR p_cpudt IS NOT INITIAL
      OR s_rldnr IS NOT INITIAL
      OR p_belnr IS NOT INITIAL
      OR p_xblnr IS NOT INITIAL
      OR p_hkont IS NOT INITIAL
      OR p_kunnr IS NOT INITIAL
      OR p_lifnr IS NOT INITIAL
      OR p_clepos IS NOT INITIAL
      OR p_opepos IS NOT INITIAL.
      MESSAGE 'Clear selection for import only' TYPE 'I'.
      EXIT.
    ENDIF.
  ENDIF.

  IF p_protg IS NOT INITIAL.
    IMPORT reverse_flag FROM MEMORY ID 'REVFLAG'.
    PERFORM load_protocol.

  ELSE.
    DATA ls_doclist LIKE LINE OF gt_doclist.
    DATA ld_masscursor TYPE cursor.
    DATA lt_t001 TYPE TABLE OF t001.
    DATA lt_bseg_fields TYPE TABLE OF dd03p.
    DATA ls_bseg_fields LIKE LINE OF lt_bseg_fields.
    DATA select_fields TYPE c LENGTH 10000.
    DATA ls_massdata LIKE LINE OF gt_massdata.
    DATA ls_bkpf_store TYPE bkpf.
    DATA ls_bkpf_first TYPE bkpf.
    DATA ld_clear_augbl TYPE bseg-augbl.
    DATA ld_cursor TYPE cursor.
    DATA ls_bkpf TYPE bkpf.
    DATA ld_lines TYPE i.
    DATA ld_cycles TYPE i.
    DATA lt_doclist_rfdt LIKE gt_doclist_store.

    SELECT SINGLE * FROM fagl_activec
    INTO gs_fagl_activec.

    SELECT SINGLE rldnr FROM t881
      INTO gd_leading_ledger
      WHERE xleading = 'X'.

    SELECT * FROM t001
      INTO TABLE lt_t001
      WHERE bukrs IN p_bukrs.

    IF p_ionly IS INITIAL.
      LOOP AT lt_t001 INTO gs_t001_mass.

        IF gs_fagl_activec-splitmethd IS NOT INITIAL.
          SELECT SINGLE b_inactive
            INTO gd_b_inactive
            FROM fagl_split_actc
            WHERE bukrs = gs_t001_mass-bukrs.
        ELSE.
          gd_b_inactive = 'X'.
        ENDIF.

        IF p_curry = ' '.
          CALL FUNCTION 'GET_CURRENT_YEAR'
            EXPORTING
              bukrs = gs_t001_mass-bukrs
            IMPORTING
              curry = gs_curry.
        ELSE.
          gs_curry = '0000'.
        ENDIF.

        IF p_hkont IS INITIAL AND p_lifnr IS INITIAL AND p_kunnr IS INITIAL.
          SORT p_belnr[] BY option ASCENDING.
          IF p_belnr[] IS NOT INITIAL.
            LOOP AT p_belnr WHERE sign = 'I'.
              IF p_belnr-option = 'BT'.
                CLEAR p_bel_bt. REFRESH p_bel_bt.
                APPEND p_belnr TO p_bel_bt.
                LOOP AT p_belnr WHERE sign = 'E'.
                  APPEND p_belnr TO p_bel_bt.
                ENDLOOP.
                OPEN CURSOR WITH HOLD ld_masscursor
                    FOR SELECT * FROM bkpf
                    WHERE belnr IN p_bel_bt
                    AND bukrs = gs_t001_mass-bukrs
                    AND gjahr IN p_gjahr
                    AND gjahr IN p_gjahr
                    AND monat IN p_monat
                    AND budat IN p_budat
                    AND blart IN p_blart
                    AND xblnr IN p_xblnr
                    AND awtyp IN p_awtyp
                    AND usnam IN p_usnam
                    AND tcode IN p_tcode
                    AND cpudt IN p_cpudt
                    AND ( bstat = 'L' OR bstat = ' ' )
                    ORDER BY bkpf~belnr ASCENDING.
                DO.
                  FETCH NEXT CURSOR ld_masscursor
                  INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
                  PACKAGE SIZE p_pack.

                  IF sy-subrc NE 0.
                    CLOSE CURSOR ld_masscursor.
                    IF ld_lines = p_pack.
                      REFRESH p_belnrm[].
                      CLEAR p_belnrm.
                      p_belnrm-sign = 'I'.
                      p_belnrm-option = 'BT'.
                      p_belnrm-low = ls_bkpf_store-belnr.
                      p_belnrm-high = p_belnr-high.
                      APPEND p_belnrm.
                      LOOP AT p_belnr WHERE sign = 'E'.
                        APPEND p_belnr TO p_belnrm.
                      ENDLOOP.
                      REFRESH p_bukrsm[].
                      CLEAR p_bukrsm.
                      p_bukrsm-sign = 'I'.
                      p_bukrsm-option = 'EQ'.
                      p_bukrsm-low = gs_t001_mass-bukrs.
                      APPEND p_bukrsm.

                      p_gjahrm = p_gjahr.
                      p_gjahrm[] = p_gjahr[].

                      PERFORM batch.
                    ENDIF.

                    EXIT.
                  ENDIF.

                  LOOP AT gt_massdata INTO ls_massdata.
                    IF ls_massdata-belnr = ls_bkpf_store-belnr.
                      DELETE gt_massdata INDEX sy-tabix.
                    ELSE.
                      EXIT.
                    ENDIF.
                  ENDLOOP.

                  READ TABLE gt_massdata INTO ls_bkpf_first INDEX 1.
                  READ TABLE gt_massdata INTO ls_bkpf_store INDEX lines( gt_massdata ).
                  ld_lines = lines( gt_massdata ).
                  IF ld_lines < p_pack.
                    ls_bkpf_store-belnr = p_belnr-high.
                  ENDIF.

                  SELECT * FROM bkpf
                      APPENDING TABLE gt_massdata
                      WHERE belnr = ls_bkpf_store-belnr
                      AND bukrs = gs_t001_mass-bukrs
                      AND gjahr IN p_gjahr
                      AND gjahr IN p_gjahr
                      AND monat IN p_monat
                      AND budat IN p_budat
                      AND blart IN p_blart
                      AND xblnr IN p_xblnr
                      AND awtyp IN p_awtyp
                      AND usnam IN p_usnam
                      AND tcode IN p_tcode
                      AND cpudt IN p_cpudt
                    AND ( bstat = ' ' OR bstat = 'L' ).

                  SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
                  DELETE ADJACENT DUPLICATES FROM gt_massdata.

                  REFRESH p_belnrm[].
                  CLEAR p_belnrm.
                  p_belnrm-sign = 'I'.
                  p_belnrm-option = 'BT'.
                  p_belnrm-low = ls_bkpf_first-belnr.
                  p_belnrm-high = ls_bkpf_store-belnr.
                  APPEND p_belnrm.
                  LOOP AT p_belnr WHERE sign = 'E'.
                    APPEND p_belnr TO p_belnrm.
                  ENDLOOP.

                  REFRESH p_bukrsm[].
                  CLEAR p_bukrsm.
                  p_bukrsm-sign = 'I'.
                  p_bukrsm-option = 'EQ'.
                  p_bukrsm-low = gs_t001_mass-bukrs.
                  APPEND p_bukrsm.

                  p_gjahrm = p_gjahr.
                  p_gjahrm[] = p_gjahr[].

                  PERFORM batch.
                ENDDO.
              ELSEIF p_belnr-option = 'EQ'.
                APPEND p_belnr TO p_bel_eq.
              ENDIF.
            ENDLOOP.
            IF p_bel_eq[] IS NOT INITIAL.
              select_join = 'X'.
              LOOP AT p_belnr WHERE sign = 'E' AND option = 'BT'.
                APPEND p_belnr TO p_bel_eq.
              ENDLOOP.
              OPEN CURSOR WITH HOLD ld_masscursor
                 FOR SELECT * FROM bkpf
                 WHERE belnr IN p_bel_eq
                 AND bukrs = gs_t001_mass-bukrs
                 AND gjahr IN p_gjahr
                 AND gjahr IN p_gjahr
                 AND monat IN p_monat
                 AND budat IN p_budat
                 AND blart IN p_blart
                 AND xblnr IN p_xblnr
                 AND awtyp IN p_awtyp
                 AND usnam IN p_usnam
                 AND tcode IN p_tcode
                 AND cpudt IN p_cpudt
                 AND ( bstat = 'L' OR bstat = ' ' )
                 ORDER BY bkpf~belnr ASCENDING.
              CLEAR ld_cycles.
              DO.
                ADD 1 TO ld_cycles.
                FETCH NEXT CURSOR ld_masscursor
                INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
                PACKAGE SIZE p_pack.

                IF sy-subrc NE 0.
                  CLOSE CURSOR ld_masscursor.
                  IF ld_cycles = 1.
                    select_join = ' '.
                    p_belnrm[] = p_bel_eq[].
                    p_gjahrm[] = p_gjahr[].
                    PERFORM batch.
                  ENDIF.
                  EXIT.
                ENDIF.

                SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
                DELETE ADJACENT DUPLICATES FROM gt_massdata.
                PERFORM batch.
              ENDDO.
            ENDIF.
          ELSE.
            OPEN CURSOR WITH HOLD ld_masscursor
               FOR SELECT * FROM bkpf
               WHERE belnr IN p_belnr
               AND bukrs = gs_t001_mass-bukrs
               AND gjahr IN p_gjahr
               AND gjahr IN p_gjahr
               AND monat IN p_monat
               AND budat IN p_budat
               AND blart IN p_blart
               AND xblnr IN p_xblnr
               AND awtyp IN p_awtyp
               AND usnam IN p_usnam
               AND tcode IN p_tcode
               AND cpudt IN p_cpudt
               AND ( bstat = 'L' OR bstat = ' ' )
               ORDER BY bkpf~belnr ASCENDING.

            DO.
              FETCH NEXT CURSOR ld_masscursor
              INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
              PACKAGE SIZE p_pack.

              IF sy-subrc NE 0.
                CLOSE CURSOR ld_masscursor.
                EXIT.
              ENDIF.

              LOOP AT gt_massdata INTO ls_massdata.
                IF ls_massdata-belnr = ls_bkpf_store-belnr.
                  DELETE gt_massdata INDEX sy-tabix.
                ELSE.
                  EXIT.
                ENDIF.
              ENDLOOP.

              READ TABLE gt_massdata INTO ls_bkpf_first INDEX 1.
              READ TABLE gt_massdata INTO ls_bkpf_store INDEX lines( gt_massdata ).

              SELECT * FROM bkpf
                  APPENDING TABLE gt_massdata
                  WHERE belnr = ls_bkpf_store-belnr
                  AND bukrs = gs_t001_mass-bukrs
                  AND gjahr IN p_gjahr
                  AND gjahr IN p_gjahr
                  AND monat IN p_monat
                  AND budat IN p_budat
                  AND blart IN p_blart
                  AND xblnr IN p_xblnr
                  AND awtyp IN p_awtyp
                  AND usnam IN p_usnam
                  AND tcode IN p_tcode
                  AND cpudt IN p_cpudt
                AND ( bstat = ' ' OR bstat = 'L' ).

              SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
              DELETE ADJACENT DUPLICATES FROM gt_massdata.

              REFRESH p_belnrm[].
              CLEAR p_belnrm.
              p_belnrm-sign = 'I'.
              p_belnrm-option = 'BT'.
              p_belnrm-low = ls_bkpf_first-belnr.
              p_belnrm-high = ls_bkpf_store-belnr.
              APPEND p_belnrm.

              REFRESH p_bukrsm[].
              CLEAR p_bukrsm.
              p_bukrsm-sign = 'I'.
              p_bukrsm-option = 'EQ'.
              p_bukrsm-low = gs_t001_mass-bukrs.
              APPEND p_bukrsm.

              p_gjahrm = p_gjahr.
              p_gjahrm[] = p_gjahr[].

              PERFORM batch.
            ENDDO.
          ENDIF.

        ELSE.
          select_join = 'X'.
          SELECT SINGLE tabclass FROM dd02l INTO ld_tabclass WHERE tabname = 'BSEG'.
          IF ld_tabclass NE 'CLUSTER'.
            join_string = 'bkpf AS a INNER JOIN bseg AS b ON a~belnr = b~belnr AND a~bukrs = b~bukrs AND a~gjahr = b~gjahr'.
            IF p_allpos = 'X'.
              OPEN CURSOR WITH HOLD ld_masscursor
              FOR SELECT * FROM (join_string)
              WHERE a~belnr IN p_belnr
              AND a~bukrs = gs_t001_mass-bukrs
              AND a~gjahr IN p_gjahr
              AND a~gjahr IN p_gjahr
              AND a~monat IN p_monat
              AND a~budat IN p_budat
              AND a~blart IN p_blart
              AND a~xblnr IN p_xblnr
              AND a~awtyp IN p_awtyp
              AND a~usnam IN p_usnam
              AND a~tcode IN p_tcode
              AND a~cpudt IN p_cpudt
              AND a~bstat = ' '
              AND b~hkont IN p_hkont
              AND b~lifnr IN p_lifnr
              AND b~kunnr IN p_kunnr
              ORDER BY a~belnr ASCENDING.
            ELSEIF p_opepos = 'X'.
              OPEN CURSOR WITH HOLD ld_masscursor
              FOR SELECT * FROM (join_string)
              WHERE a~belnr IN p_belnr
              AND a~bukrs = gs_t001_mass-bukrs
              AND a~gjahr IN p_gjahr
              AND a~gjahr IN p_gjahr
              AND a~monat IN p_monat
              AND a~budat IN p_budat
              AND a~blart IN p_blart
              AND a~xblnr IN p_xblnr
              AND a~awtyp IN p_awtyp
              AND a~usnam IN p_usnam
              AND a~tcode IN p_tcode
              AND a~cpudt IN p_cpudt
              AND a~bstat = ' '
              AND b~hkont IN p_hkont
              AND b~lifnr IN p_lifnr
              AND b~kunnr IN p_kunnr
              AND b~augbl = ld_clear_augbl
              ORDER BY a~belnr ASCENDING.
            ELSEIF p_clepos = 'X'.
              OPEN CURSOR WITH HOLD ld_masscursor
              FOR SELECT * FROM (join_string)
      WHERE a~belnr IN p_belnr
      AND a~bukrs = gs_t001_mass-bukrs
      AND a~gjahr IN p_gjahr
      AND a~gjahr IN p_gjahr
      AND a~monat IN p_monat
      AND a~budat IN p_budat
      AND a~blart IN p_blart
      AND a~xblnr IN p_xblnr
      AND a~awtyp IN p_awtyp
      AND a~usnam IN p_usnam
      AND a~tcode IN p_tcode
      AND a~cpudt IN p_cpudt
      AND a~bstat = ' '
      AND b~hkont IN p_hkont
      AND b~lifnr IN p_lifnr
      AND b~kunnr IN p_kunnr
      AND b~augbl NE ld_clear_augbl
      ORDER BY a~belnr ASCENDING.
            ENDIF.
            DO.
              FETCH NEXT CURSOR ld_masscursor
              INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
              PACKAGE SIZE p_pack.

              IF sy-subrc NE 0.
                PERFORM check_missing_bseg.
                IF ld_cycles = 0.
                  p_ionly = 'X'.
                  p_belnrm[] = p_belnr[].
                  p_gjahrm[] = p_gjahr[].
                  p_bukrsm[] = p_bukrs[].
                  PERFORM batch.
                ENDIF.
                CLOSE CURSOR ld_masscursor.
                EXIT.
              ENDIF.

              ADD 1 TO ld_cycles.
              SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
              DELETE ADJACENT DUPLICATES FROM gt_massdata.
              PERFORM batch.
            ENDDO.
          ELSE.
*** BSEG is clustered, no join possible.
            IF p_allpos = 'X'.
              OPEN CURSOR WITH HOLD ld_masscursor
              FOR SELECT * FROM bseg
                WHERE belnr IN p_belnr
                AND gjahr IN p_gjahr
                AND bukrs IN p_bukrs
                AND hkont IN p_hkont
                AND lifnr IN p_lifnr
                AND kunnr IN p_kunnr.
            ELSEIF p_clepos = 'X'.
              OPEN CURSOR WITH HOLD ld_masscursor
FOR SELECT * FROM bseg
  WHERE belnr IN p_belnr
  AND gjahr IN p_gjahr
  AND bukrs IN p_bukrs
  AND hkont IN p_hkont
  AND lifnr IN p_lifnr
  AND kunnr IN p_kunnr
  AND augbl NE ld_clear_augbl.
            ELSE.
              OPEN CURSOR WITH HOLD ld_masscursor
FOR SELECT * FROM bseg
WHERE belnr IN p_belnr
AND gjahr IN p_gjahr
AND bukrs IN p_bukrs
AND hkont IN p_hkont
AND lifnr IN p_lifnr
AND kunnr IN p_kunnr
AND augbl = ld_clear_augbl.
            ENDIF.
            DO.
              FETCH NEXT CURSOR ld_masscursor
              INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
              PACKAGE SIZE p_pack.

              IF sy-subrc NE 0.
                PERFORM check_missing_bseg.
                IF ld_cycles = 0.
                  p_ionly = 'X'.
                  p_belnrm[] = p_belnr[].
                  p_gjahrm[] = p_gjahr[].
                  p_bukrsm[] = p_bukrs[].
                  PERFORM batch.
                ENDIF.
                CLOSE CURSOR ld_masscursor.
                EXIT.
              ENDIF.

              IF ld_tabclass NE 'CLUSTER'.
                ADD 1 TO ld_cycles.
                SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
                DELETE ADJACENT DUPLICATES FROM gt_massdata.
                PERFORM batch.
              ELSE.
                ADD 1 TO ld_cycles.
                SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
                DELETE ADJACENT DUPLICATES FROM gt_massdata.
                LOOP AT gt_massdata INTO ls_massdata.
                  SELECT SINGLE * FROM bkpf INTO ls_bkpf
                    WHERE bukrs = ls_massdata-bukrs
                    AND belnr = ls_massdata-belnr
                    AND gjahr = ls_massdata-gjahr.
                  IF sy-subrc = 0.
                    MOVE-CORRESPONDING ls_bkpf TO ls_massdata.
                    MODIFY gt_massdata[] FROM ls_massdata INDEX sy-tabix.
                  ELSE.
                    DELETE gt_massdata[] INDEX sy-tabix.
                  ENDIF.
                ENDLOOP.
                PERFORM batch.
              ENDIF.
            ENDDO.
            SELECT SINGLE tabclass FROM dd02l INTO ld_tabclass WHERE tabname = 'BSEG_ADD'.
            IF ld_tabclass NE 'CLUSTER' AND p_hkont IS NOT INITIAL.
              join_string = 'bkpf AS a INNER JOIN bseg_add AS b ON a~belnr = b~belnr AND a~bukrs = b~bukrs AND a~gjahr = b~gjahr'.
              IF p_allpos = 'X'.
                OPEN CURSOR WITH HOLD ld_masscursor
                FOR SELECT * FROM (join_string)
                WHERE a~belnr IN p_belnr
                AND a~bukrs = gs_t001_mass-bukrs
                AND a~gjahr IN p_gjahr
                AND a~monat IN p_monat
                AND a~budat IN p_budat
                AND a~blart IN p_blart
                AND a~xblnr IN p_xblnr
                AND a~awtyp IN p_awtyp
                AND a~usnam IN p_usnam
                AND a~tcode IN p_tcode
                AND a~cpudt IN p_cpudt
                AND a~bstat = 'L'
                AND b~hkont IN p_hkont
                ORDER BY a~belnr ASCENDING.
              ELSEIF p_opepos = 'X'.
                OPEN CURSOR WITH HOLD ld_masscursor
                FOR SELECT * FROM (join_string)
                WHERE a~belnr IN p_belnr
                AND a~bukrs = gs_t001_mass-bukrs
                AND a~gjahr IN p_gjahr
                AND a~monat IN p_monat
                AND a~budat IN p_budat
                AND a~blart IN p_blart
                AND a~xblnr IN p_xblnr
                AND a~awtyp IN p_awtyp
                AND a~usnam IN p_usnam
                AND a~tcode IN p_tcode
                AND a~cpudt IN p_cpudt
                AND a~bstat = 'L'
                AND b~hkont IN p_hkont
                AND b~augbl = ld_clear_augbl
                ORDER BY a~belnr ASCENDING.
              ELSEIF p_clepos = 'X'.
                OPEN CURSOR WITH HOLD ld_masscursor
                FOR SELECT * FROM (join_string)
        WHERE a~belnr IN p_belnr
        AND a~bukrs = gs_t001_mass-bukrs
        AND a~gjahr IN p_gjahr
        AND a~gjahr IN p_gjahr
        AND a~monat IN p_monat
        AND a~budat IN p_budat
        AND a~blart IN p_blart
        AND a~xblnr IN p_xblnr
        AND a~awtyp IN p_awtyp
        AND a~usnam IN p_usnam
        AND a~tcode IN p_tcode
        AND a~cpudt IN p_cpudt
        AND a~bstat = 'L'
        AND b~hkont IN p_hkont
        AND b~augbl NE ld_clear_augbl
        ORDER BY a~belnr ASCENDING.
              ENDIF.
            ELSE.
*** BSEG_ADD is clustered, no join possible.
            ENDIF.

            DO.
              FETCH NEXT CURSOR ld_masscursor
              INTO CORRESPONDING FIELDS OF  TABLE gt_massdata
              PACKAGE SIZE p_pack.

              IF sy-subrc NE 0.
                PERFORM check_missing_bseg_add.
                IF ld_cycles = 0.
                  p_ionly = 'X'.
                  p_belnrm[] = p_belnr[].
                  p_gjahrm[] = p_gjahr[].
                  p_bukrsm[] = p_bukrs[].
                  PERFORM batch.
                ENDIF.
                CLOSE CURSOR ld_masscursor.
                EXIT.
              ENDIF.

              ADD 1 TO ld_cycles.
              SORT gt_massdata BY belnr ASCENDING gjahr ASCENDING.
              DELETE ADJACENT DUPLICATES FROM gt_massdata.
              PERFORM batch.
            ENDDO.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE.
      PERFORM batch.
    ENDIF.

    IF p_test IS NOT INITIAL.
      save_flag = 2.
    ELSE.
      save_flag = 1.
    ENDIF.

    IF sy-batch IS INITIAL AND lines( gt_doclist_store ) < p_docmax AND gd_rfdt IS INITIAL.
      PERFORM prepare_display.

      PERFORM save_protocol.

      PERFORM display_data.

    ELSE.

      IF p_test IS INITIAL.
        IF gd_rfdt IS NOT INITIAL AND gt_doclist_store IS INITIAL.
          IMPORT lt_doclist_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          gt_doclist_store = lt_doclist_rfdt.
        ENDIF.
        LOOP AT gt_doclist_store INTO ls_doclist.
          IF ls_doclist-control = '@5C@'.
            save_flag = 0.
          ELSE.
            save_flag = 1.
          ENDIF.

        ENDLOOP.
      ENDIF.

      IF save_flag = 1.
        PERFORM update_scenario.
      ENDIF.
      flag_store = 1.
      PERFORM update_flags.

      PERFORM display_batch_data.

    ENDIF.
  ENDIF.

***********************************************************************
* ACQUIRE DATA FROM VBDATA FORM ROUTINES
***********************************************************************

FORM acquire_scenario.

  IF p_ionly IS INITIAL.
    IF select_join IS INITIAL.
      PERFORM check_databases.
    ELSE.
      PERFORM check_databases_join.
    ENDIF.
  ENDIF.

  IF p_rfdt IS NOT INITIAL.
    PERFORM import_rfc.
  ENDIF.

  IF p_vbdata IS NOT INITIAL.
    IF p_proc1 IS NOT INITIAL.
      PERFORM fetch_vbmod_from_belnr.
    ENDIF.

    IF p_proc2 IS NOT INITIAL.
      PERFORM fetch_vbmod_from_uzeit.
    ENDIF.

    IF p_proc3 IS NOT INITIAL.
      PERFORM fetch_vbmod_from_vbkey.
    ENDIF.

    PERFORM select_vbdata.
  ENDIF.

  IF p_rfdt IS NOT INITIAL.
    PERFORM import_rfdt.
  ENDIF.
ENDFORM.                    "acquire_scenario

*&---------------------------------------------------------------------*
*&      Form  check_databases
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_databases.

  DATA: lt_t001          TYPE TABLE OF t001,
        lt_t881          TYPE TABLE OF t881,
        ls_t881          TYPE t881,
        lt_t800a         TYPE TABLE OF t800a-ntable,
        ls_t800a         TYPE t800a-ntable,
        bkpf_count       TYPE i,
        it_ledgers       TYPE fagl_rldnr_tab,
        ld_ledger        TYPE rldnr,
        select_extension TYPE c LENGTH 200.

  SELECT * FROM t001
    INTO TABLE lt_t001
    WHERE bukrs IN p_bukrs.
  LOOP AT lt_t001 INTO ls_t001.
    CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
      EXPORTING
        i_bukrs    = ls_t001-bukrs
      IMPORTING
        et_ledgers = it_ledgers.
    LOOP AT it_ledgers INTO ld_ledger.
      SELECT * FROM t881
                APPENDING TABLE lt_t881
        WHERE rldnr = ld_ledger.
    ENDLOOP.
  ENDLOOP.
  LOOP AT lt_t881 INTO ls_t881.
    SELECT SINGLE ntable
            INTO ls_t800a
           FROM t800a
      WHERE tab = ls_t881-tab.
    APPEND ls_t800a TO lt_t800a.
  ENDLOOP.
  SORT lt_t800a ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_t800a.

  IF gt_massdata IS NOT INITIAL.

    gt_db_bkpf = gt_massdata[].

  ELSE.

    SELECT * FROM bkpf
      INTO TABLE gt_db_bkpf
     WHERE belnr IN p_belnrm
     AND bukrs = gs_t001_mass-bukrs
     AND gjahr IN p_gjahrm
     AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr
     AND awtyp IN p_awtyp
     AND usnam IN p_usnam
     AND tcode IN p_tcode
     AND cpudt IN p_cpudt
         AND ( bstat = 'L' OR bstat = ' ' ).

    DELETE ADJACENT DUPLICATES FROM gt_db_bkpf.
  ENDIF.
*  DESCRIBE TABLE gt_db_bkpf LINES bkpf_count.
*  IF bkpf_count > p_docmax.
*    MESSAGE 'Number of selected documents exceeding limit.' TYPE 'S' DISPLAY LIKE 'E'.
*    LEAVE LIST-PROCESSING.
*  ENDIF.

  DATA bseg_conditions TYPE c LENGTH 200.
  IF acdoca_active = 1.
    bseg_conditions = ' gjahr IN p_gjahrm AND h_monat IN p_monat AND h_budat IN p_budat AND h_blart IN p_blart AND awtyp IN  p_awtyp AND ( h_bstat = '' '' OR h_bstat = ''U'' )'.
  ELSE.
    bseg_conditions = ' gjahr IN p_gjahrm'.
  ENDIF.
  SELECT * FROM bseg
      INTO TABLE gt_db_bseg
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
         AND (bseg_conditions).

  SELECT * FROM bsec
      INTO TABLE gt_db_bsec
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
.

  SELECT * FROM bse_clr
    INTO TABLE gt_db_bse_clr
WHERE bukrs_clr = gs_t001_mass-bukrs
AND belnr_clr IN p_belnrm
AND gjahr_clr IN p_gjahrm
.

  SELECT * FROM bsed
    INTO TABLE gt_db_bsed
WHERE bukrs = gs_t001_mass-bukrs
AND belnr IN p_belnrm
AND gjahr IN p_gjahrm.


  SELECT * FROM bset
    INTO TABLE gt_db_bset
WHERE bukrs = gs_t001_mass-bukrs
AND belnr IN p_belnrm
AND gjahr IN p_gjahrm
.

  IF acdoca_active = 0.
    SELECT * FROM bsis
  INTO TABLE gt_db_bsis
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
           AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr.

    SELECT * FROM bsas
  INTO TABLE gt_db_bsas
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
                 AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr.

    SELECT * FROM bsid
  INTO TABLE gt_db_bsid
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
                 AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr.

    SELECT * FROM bsad
      INTO TABLE gt_db_bsad
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
                 AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr
  .

    SELECT * FROM bsik
      INTO TABLE gt_db_bsik
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
                 AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr.

    SELECT * FROM bsak
      INTO TABLE gt_db_bsak
  WHERE bukrs = gs_t001_mass-bukrs
  AND belnr IN p_belnrm
  AND gjahr IN p_gjahrm
                 AND monat IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND xblnr IN p_xblnr.
  ENDIF.

  SELECT * FROM bseg_add
    INTO TABLE gt_db_bseg_add
WHERE bukrs = gs_t001_mass-bukrs
AND belnr IN p_belnrm
AND gjahr IN p_gjahrm
.

  SELECT * FROM fagl_splinfo
    INTO TABLE gt_db_splinfo
WHERE bukrs = gs_t001_mass-bukrs
AND belnr IN p_belnrm
AND gjahr IN p_gjahrm
.

  SELECT * FROM fagl_splinfo_val
    INTO TABLE gt_db_splinfo_val
WHERE bukrs = gs_t001_mass-bukrs
AND belnr IN p_belnrm
AND gjahr IN p_gjahrm
.
  CLEAR gt_glu1.REFRESH gt_glu1.
  CLEAR gt_db_glu1mod. REFRESH gt_db_glu1mod.
  IF acdoca_active = 1.
    ls_t800a = 'ACDOCA'.
    SELECT * FROM (ls_t800a)
      INTO CORRESPONDING FIELDS OF TABLE gt_glu1
      WHERE rbukrs = gs_t001_mass-bukrs
      AND belnr IN p_belnrm
      AND gjahr IN p_gjahrm
     AND poper IN p_monat
     AND budat IN p_budat
     AND blart IN p_blart
     AND awtyp IN p_awtyp
      AND ( bstat = 'L' OR bstat = ' ' )
.

    LOOP AT gt_glu1 INTO gs_glu1.
      MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
      gs_glu1mod-zzz_tabname = 'ACDOCA'.
      APPEND gs_glu1mod TO gt_db_glu1mod.
    ENDLOOP.
    CLEAR gt_glu1.
  ELSE.

    LOOP AT lt_t800a INTO ls_t800a.
      IF ls_t800a IS NOT INITIAL.
        TRY.
            SELECT * FROM (ls_t800a)
              INTO CORRESPONDING FIELDS OF TABLE gt_glu1
              WHERE rbukrs = gs_t001_mass-bukrs
              AND belnr IN p_belnrm
              AND gjahr IN p_gjahrm
                   AND poper IN p_monat
     AND budat IN p_budat
     AND awtyp IN p_awtyp
     AND usnam IN p_usnam
              AND ( bstat = ' ' OR bstat = 'L' )
  .
          CATCH cx_sy_dynamic_osql_semantics.
        ENDTRY.
      ENDIF.

      LOOP AT gt_glu1 INTO gs_glu1.
        MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
        gs_glu1mod-zzz_tabname = ls_t800a.
        APPEND gs_glu1mod TO gt_db_glu1mod.
      ENDLOOP.
      CLEAR gt_glu1.
    ENDLOOP.
  ENDIF.
ENDFORM.                    "check_databases

*&---------------------------------------------------------------------*
*&      Form  import_rfc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM import_rfc.
  CALL FUNCTION 'Z_GET_REM_DOC_BOOK' DESTINATION p_srcsys
    EXPORTING
      client             = p_srccli
      pbelnr             = p_belnrm
      pgjahr             = p_gjahrm
      pbukrs             = p_bukrsm
    TABLES
      lt_rfc_bkpf        = gt_temp_bkpf
      lt_rfc_bseg        = gt_temp_bseg
      lt_rfc_bsis        = gt_temp_bsis
      lt_rfc_bsas        = gt_temp_bsas
      lt_rfc_bsik        = gt_temp_bsik
      lt_rfc_bsak        = gt_temp_bsak
      lt_rfc_bsid        = gt_temp_bsid
      lt_rfc_bsad        = gt_temp_bsad
      lt_rfc_bsed        = gt_temp_bsed
      lt_rfc_bset        = gt_temp_bset
      lt_rfc_bsec        = gt_temp_bsec
      lt_rfc_bse_clr     = gt_temp_bse_clr
      lt_rfc_splinfo     = gt_temp_splinfo
      lt_rfc_splinfo_val = gt_temp_splinfo_val
      lt_rfc_glu1mod     = gt_temp_glu1mod
      lt_rfc_bseg_add    = gt_temp_bseg_add.

ENDFORM.                    "import_rfc

*&---------------------------------------------------------------------*
*&      Form  import_rfdt
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM import_rfdt.
***INSERT RFDT IMPORT SYNTAX.
ENDFORM.                    "import_rfdt

*&---------------------------------------------------------------------*
*&      Form  fetch_vbmod_from_belnr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fetch_vbmod_from_belnr.
  DATA ls_vbhdr TYPE vbhdr.
  DATA temp_bkpf TYPE TABLE OF bkpf.
  DATA flag_belnr_found TYPE i.
  DATA ls_bkpf TYPE bkpf.
  DATA ls_vbmod_split TYPE vbmod.
  DATA ls_vbmod_fagl TYPE vbmod.

  IF p_vsame IS NOT INITIAL.
    p_vbelnr[] = p_belnrm[].
    p_vbukrs[] = p_bukrsm[].
    p_vgjahr[] = p_gjahrm[].
  ENDIF.

  SELECT * FROM vbhdr
    INTO TABLE gt_vbhdr.

  LOOP AT gt_vbhdr INTO ls_vbhdr.
    SELECT * FROM vbmod
            INTO TABLE gt_vbmod
      WHERE vbkey = ls_vbhdr-vbkey.

    LOOP AT gt_vbmod INTO ls_vbmod
      WHERE vbfunc = 'POST_DOCUMENT'.

      IMPORT t_bkpf TO temp_bkpf
      FROM LOGFILE ID ls_vbmod.

      LOOP AT temp_bkpf INTO ls_bkpf.
        IF ls_bkpf-belnr IN p_vbelnr
          AND ls_bkpf-gjahr IN p_vgjahr
          AND ls_bkpf-bukrs IN p_vbukrs.
          flag_belnr_found = 1.
        ENDIF.
      ENDLOOP.

      IF flag_belnr_found = 1.
        APPEND ls_vbmod TO gt_vbmod_post.
        LOOP AT gt_vbmod INTO ls_vbmod_split
  WHERE vbfunc = 'FAGL_SPLINFO_UPDATE'
  AND vbkey = ls_vbmod-vbkey.
          APPEND ls_vbmod_split TO gt_vbmod_split.
        ENDLOOP.
        LOOP AT gt_vbmod INTO ls_vbmod_fagl
          WHERE vbfunc = 'G_GLDB_POSTING_A'
          AND vbkey = ls_vbmod-vbkey.
          APPEND ls_vbmod_fagl TO gt_vbmod_fagl.
        ENDLOOP.
      ENDIF.
      CLEAR temp_bkpf.
      CLEAR flag_belnr_found.
    ENDLOOP.

  ENDLOOP.
ENDFORM.                    "fetch_vbmod_from_belnr


*&---------------------------------------------------------------------*
*&      Form  fetch_vbmod_from_vbkey
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fetch_vbmod_from_vbkey.
  SELECT * FROM vbmod
    APPENDING TABLE gt_vbmod_post
    WHERE vbkey IN p_vbkey
    AND vbfunc = 'POST_DOCUMENT'
    .

  SELECT * FROM vbmod
    APPENDING TABLE gt_vbmod_fagl
    WHERE vbkey IN p_vbkey
    AND vbfunc = 'G_GLDB_POSTING_A'
    .

  SELECT * FROM vbmod
APPENDING TABLE gt_vbmod_split
    WHERE vbkey IN p_vbkey
    AND vbfunc = 'FAGL_SPLINFO_UPDATE'
    .
ENDFORM.                    "fetch_vbmod_from_vbkey


*&---------------------------------------------------------------------*
*&      Form  fetch_vbmod_from_uzeit
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fetch_vbmod_from_uzeit.
  DATA ld_timestamp_from TYPE c LENGTH 14.
  DATA ld_timestamp_to TYPE c LENGTH 14.
  DATA lt_vbkey TYPE TABLE OF vbhdr-vbkey.
  DATA ld_vbkey TYPE vbmod-vbkey.

  ld_timestamp_from(8) = p_fdate.
  ld_timestamp_from+8(6) = p_ftime.

  ld_timestamp_to(8) = p_fdate.
  ld_timestamp_to+8(6) = p_ttime.

  SELECT vbkey FROM vbhdr
    INTO TABLE lt_vbkey
  WHERE vbdate >= ld_timestamp_from
  AND vbdate <= ld_timestamp_to
  .

  LOOP AT lt_vbkey INTO ld_vbkey.
    SELECT * FROM vbmod
      APPENDING TABLE gt_vbmod_post
WHERE vbkey = ld_vbkey
AND vbfunc = 'POST_DOCUMENT'
.
  ENDLOOP.

  LOOP AT lt_vbkey INTO ld_vbkey.
    SELECT * FROM vbmod
      APPENDING TABLE gt_vbmod_fagl
WHERE vbkey = ld_vbkey
AND vbfunc = 'G_GLDB_POSTING_A'
.
  ENDLOOP.

  LOOP AT lt_vbkey INTO ld_vbkey.
    SELECT * FROM vbmod
      APPENDING TABLE gt_vbmod_split
WHERE vbkey = ld_vbkey
AND vbfunc = 'FAGL_SPLINFO_UPDATE'
.
  ENDLOOP.
ENDFORM.                    "fetch_vbmod_from_uzeit

*&---------------------------------------------------------------------*
*&      Form  select_vbdata
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM select_vbdata.
  DATA: temp_bkpf        TYPE TABLE OF bkpf,
        temp_bseg        TYPE TABLE OF bseg,
        temp_bsis        TYPE TABLE OF bsis,
        temp_bsas        TYPE TABLE OF bsas,
        temp_bsid        TYPE TABLE OF bsid,
        temp_bsad        TYPE TABLE OF bsad,
        temp_bsik        TYPE TABLE OF bsik,
        temp_bsak        TYPE TABLE OF bsak,
        temp_ausz3       TYPE TABLE OF ausz_clr,
        temp_bseg_add    TYPE TABLE OF bseg_add,
        temp_bsec        TYPE TABLE OF bsec,
        temp_bset        TYPE TABLE OF bset,
        temp_bsed        TYPE TABLE OF bsed,
        temp_splinfo     TYPE TABLE OF fagl_splinfo,
        temp_splinfo_val TYPE TABLE OF fagl_splinfo_val,
        ls_bkpf          TYPE bkpf,
        ls_bseg          TYPE bseg,
        ls_bsis          TYPE bsis,
        ls_bsas          TYPE bsas,
        ls_bsik          TYPE bsik,
        ls_bsak          TYPE bsak,
        ls_bsid          TYPE bsid,
        ls_bsad          TYPE bsad,
        ls_bsed          TYPE bsed,
        ls_bsec          TYPE bsec,
        ls_bset          TYPE bset,
        ls_bse_clr       TYPE bse_clr,
        ls_bseg_add      TYPE bseg_add,
        ls_splinfo       TYPE fagl_splinfo,
        ls_splinfo_val   TYPE fagl_splinfo_val,
        ls_ausz3         TYPE ausz_clr.
  DATA: ls_vbmod TYPE vbmod.

  DATA: BEGIN OF ls_vbid,
          vbkey    TYPE vbmod-vbkey,
          vbmodcnt TYPE vbmod-vbmodcnt,
        END OF ls_vbid.


  DATA: lt_t001    TYPE TABLE OF t001,
        lt_t881    TYPE TABLE OF t881,
        ls_t881    TYPE t881,
        lt_t800a   TYPE TABLE OF t800a-ntable,
        ls_t800a   TYPE t800a-ntable,
        it_ledgers TYPE fagl_rldnr_tab,
        ld_ledger  TYPE rldnr.

  DATA: BEGIN OF ls_key,
          bukrs TYPE bkpf-bukrs,
          belnr TYPE bkpf-belnr,
          gjahr TYPE bkpf-gjahr,
        END OF ls_key.
  DATA lt_key LIKE TABLE OF ls_key.

  SELECT * FROM t001
    INTO TABLE lt_t001
    WHERE bukrs IN p_bukrs
    .
  LOOP AT lt_t001 INTO ls_t001.
    CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
      EXPORTING
        i_bukrs    = ls_t001-bukrs
      IMPORTING
        et_ledgers = it_ledgers.
    LOOP AT it_ledgers INTO ld_ledger.
      SELECT * FROM t881
        APPENDING TABLE lt_t881
        WHERE rldnr = ld_ledger
        .
    ENDLOOP.
  ENDLOOP.
  LOOP AT lt_t881 INTO ls_t881.
    SELECT SINGLE ntable INTO ls_t800a FROM t800a
      WHERE tab = ls_t881-tab
      .
    APPEND ls_t800a TO lt_t800a.
  ENDLOOP.
  SORT lt_t800a ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_t800a.

  IF acdoca_active = 1.
    CLEAR lt_t800a.
    ls_t800a = 'ACDOCA'.
    APPEND ls_t800a TO lt_t800a.
  ENDIF.

  LOOP AT gt_vbmod_post INTO ls_vbmod.
    MOVE-CORRESPONDING ls_vbmod TO ls_vbid.
    IMPORT t_bkpf TO temp_bkpf
    FROM LOGFILE ID ls_vbid.
    IF temp_bkpf IS NOT INITIAL.
      LOOP AT temp_bkpf INTO ls_bkpf.
        APPEND ls_bkpf TO gt_temp_bkpf.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bkpf TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

      flag_bkpf = 1.
    ENDIF.

    IMPORT t_bseg TO temp_bseg
    FROM LOGFILE ID ls_vbid.
    IF temp_bseg IS NOT INITIAL.
      flag_bseg = 1.
      LOOP AT temp_bseg INTO ls_bseg.
        APPEND ls_bseg TO gt_temp_bseg.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bseg TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF acdoca_active = 0.
      IMPORT t_bsas TO temp_bsas
      FROM LOGFILE ID ls_vbid.
      IF temp_bsas IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsas INTO ls_bsas.
          APPEND ls_bsas TO gt_temp_bsas.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsas TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.

      IMPORT t_bsis TO temp_bsis
      FROM LOGFILE ID ls_vbid.
      IF temp_bsis IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsis INTO ls_bsis.
          APPEND ls_bsis TO gt_temp_bsis.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsis TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.

      IMPORT t_bsak TO temp_bsak
      FROM LOGFILE ID ls_vbid.
      IF temp_bsak IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsak INTO ls_bsak.
          APPEND ls_bsak TO gt_temp_bsak.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsak TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.

      IMPORT t_bsik TO temp_bsik
      FROM LOGFILE ID ls_vbid.
      IF temp_bsik IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsik INTO ls_bsik.
          APPEND ls_bsik TO gt_temp_bsik.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsik TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.

      IMPORT t_bsid TO temp_bsid
      FROM LOGFILE ID ls_vbid.
      IF temp_bsid IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsid INTO ls_bsid.
          APPEND ls_bsid TO gt_temp_bsid.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsid TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.

      IMPORT t_bsad TO temp_bsad
      FROM LOGFILE ID ls_vbid.
      IF temp_bsad IS NOT INITIAL.
        flag_index = 1.
        LOOP AT temp_bsad INTO ls_bsad.
          APPEND ls_bsad TO gt_temp_bsad.
          IF p_ionly IS NOT INITIAL.
            MOVE-CORRESPONDING ls_bsad TO ls_key.
            APPEND ls_key TO lt_key.
          ENDIF.
        ENDLOOP.

      ENDIF.
    ENDIF.

    IMPORT t_bsec TO temp_bsec
    FROM LOGFILE ID ls_vbid.
    IF temp_bsec IS NOT INITIAL.
      flag_bsec = 1.
      LOOP AT temp_bsec INTO ls_bsec.
        APPEND ls_bsec TO gt_temp_bsec.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bsec TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IMPORT t_bsed TO temp_bsed
    FROM LOGFILE ID ls_vbid.
    IF temp_bsed IS NOT INITIAL.
      flag_bsed = 1.
      LOOP AT temp_bsed INTO ls_bsed.
        APPEND ls_bsed TO gt_temp_bsed.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bsed TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IMPORT t_bset TO temp_bset
    FROM LOGFILE ID ls_vbid.
    IF temp_bset IS NOT INITIAL.
      flag_bset = 1.
      LOOP AT temp_bset INTO ls_bset.
        APPEND ls_bset TO gt_temp_bset.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bset TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IMPORT t_bseg_add TO temp_bseg_add
    FROM LOGFILE ID ls_vbid.
    IF temp_bseg_add IS NOT INITIAL.
      flag_bseg_add = 1.
      LOOP AT temp_bseg_add INTO ls_bseg_add.
        APPEND ls_bseg_add TO gt_temp_bseg_add.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_bseg_add TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IMPORT t_ausz3 TO temp_ausz3
    FROM LOGFILE ID ls_vbid.
    IF temp_ausz3 IS NOT INITIAL.
      flag_bse_clr = 1.
      READ TABLE temp_bkpf INTO ls_bkpf INDEX 1.
      LOOP AT temp_ausz3 INTO ls_ausz3.
        ls_bse_clr-bukrs_clr = ls_bkpf-bukrs.
        ls_bse_clr-belnr_clr = ls_bkpf-belnr.
        ls_bse_clr-gjahr_clr = ls_bkpf-gjahr.
        ls_bse_clr-index_clr = sy-tabix.
        MOVE-CORRESPONDING ls_ausz3 TO ls_bse_clr.
        APPEND ls_bse_clr TO gt_temp_bse_clr.
      ENDLOOP.
    ENDIF.

  ENDLOOP.

*** SPLINFO TABLE IMPORT.

  LOOP AT gt_vbmod_split INTO ls_vbmod.
    MOVE-CORRESPONDING ls_vbmod TO ls_vbid.
    IMPORT it_splinfo TO temp_splinfo
    FROM LOGFILE ID ls_vbid.
    IF temp_splinfo IS NOT INITIAL.
      flag_splinfo = 1.
      LOOP AT temp_splinfo INTO ls_splinfo.
        APPEND ls_splinfo TO gt_temp_splinfo.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_splinfo TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IMPORT it_splinfo_val TO temp_splinfo_val
    FROM LOGFILE ID ls_vbid.
    IF temp_splinfo_val IS NOT INITIAL.
      flag_splinfoval = 1.
      LOOP AT temp_splinfo_val INTO ls_splinfo_val.
        APPEND ls_splinfo_val TO gt_temp_splinfo_val.
        IF p_ionly IS NOT INITIAL.
          MOVE-CORRESPONDING ls_splinfo_val TO ls_key.
          APPEND ls_key TO lt_key.
        ENDIF.
      ENDLOOP.

    ENDIF.

  ENDLOOP.

*** GL TABLE IMPORT.

  DATA BEGIN OF importstruc.
  DATA: in  TYPE c LENGTH 34,
        out TYPE c LENGTH 38.
  DATA END OF importstruc.
  DATA: BEGIN OF vbimport,
          vblen  TYPE vbdata-vblen,
          vbdata TYPE vbdata-vbdata,
        END OF vbimport.
  DATA lt_importtab LIKE TABLE OF importstruc.
  DATA: ls_importtab LIKE importstruc,
        lt_vbdata    LIKE TABLE OF vbimport.

  DATA gs_glu1mod LIKE glu1mod.
  DATA ls_temp_gl TYPE REF TO data.
  DATA lt_temp_gl TYPE REF TO data.
  DATA strucname TYPE ddobjname.
  DATA length TYPE i.

  FIELD-SYMBOLS: <fs_temp_gl> TYPE any,
                 <ft_temp_gl> TYPE table.

  LOOP AT gt_vbmod_fagl INTO ls_vbmod.
    MOVE-CORRESPONDING ls_vbmod TO ls_vbid.

    SELECT vblen vbdata FROM vbdata INTO TABLE lt_vbdata
    WHERE vbkey = ls_vbid-vbkey
    AND vbmodcnt = ls_vbid-vbmodcnt
    ORDER BY PRIMARY KEY.

    LOOP AT lt_t800a INTO ls_t800a.
      strucname = ls_t800a.
      ls_importtab-in(4) = 'INT_'.
      ls_importtab-in+4 = ls_t800a.
      ls_importtab-out = '<ft_temp_gl>'.

      TRY.
          CREATE DATA ls_temp_gl TYPE (strucname).
          CREATE DATA lt_temp_gl TYPE TABLE OF (strucname).

          ASSIGN lt_temp_gl->* TO <ft_temp_gl>.
          ASSIGN ls_temp_gl->* TO <fs_temp_gl>.
          APPEND ls_importtab TO lt_importtab.
          IMPORT (lt_importtab)
          FROM INTERNAL TABLE lt_vbdata.
          LOOP AT <ft_temp_gl> INTO <fs_temp_gl>.
            MOVE-CORRESPONDING <fs_temp_gl> TO gs_glu1mod.
            gs_glu1mod-zzz_tabname = ls_t800a.
            APPEND gs_glu1mod TO gt_temp_glu1mod.
            IF p_ionly IS NOT INITIAL.
              MOVE-CORRESPONDING gs_glu1mod TO ls_key.
              ls_key-bukrs = gs_glu1mod-rbukrs.
              APPEND ls_key TO lt_key.
            ENDIF.
          ENDLOOP.
          CLEAR <ft_temp_gl>.
        CATCH cx_sy_create_data_error.
      ENDTRY.
      CLEAR lt_importtab.
    ENDLOOP.

    LOOP AT lt_t800a INTO ls_t800a.
      ls_importtab-in(4) = 'INT_'.
      ls_importtab-in+4 = ls_t800a.
      length = strlen( ls_importtab-in ).
      ls_importtab-in+length = '_ADD'.
      strucname = 'RGIAD1'.
      ls_importtab-out = '<ft_temp_gl>'.

      TRY.
          CREATE DATA ls_temp_gl TYPE (strucname).
          CREATE DATA lt_temp_gl TYPE TABLE OF (strucname).

          ASSIGN lt_temp_gl->* TO <ft_temp_gl>.
          ASSIGN ls_temp_gl->* TO <fs_temp_gl>.
          APPEND ls_importtab TO lt_importtab.
          IMPORT (lt_importtab)
          FROM INTERNAL TABLE lt_vbdata.
          LOOP AT <ft_temp_gl> INTO <fs_temp_gl>.
            MOVE-CORRESPONDING <fs_temp_gl> TO gs_glu1mod.
            gs_glu1mod-zzz_tabname = ls_t800a.
            APPEND gs_glu1mod TO gt_temp_glu1mod_add.
            IF p_ionly IS NOT INITIAL.
              MOVE-CORRESPONDING gs_glu1mod TO ls_key.
              ls_key-bukrs = gs_glu1mod-rbukrs.
              APPEND ls_key TO lt_key.
            ENDIF.
          ENDLOOP.
          CLEAR <ft_temp_gl>.
        CATCH cx_sy_create_data_error.
      ENDTRY.
      CLEAR lt_importtab.
    ENDLOOP.
  ENDLOOP.


***select database if only import is being performed.
  IF p_ionly IS NOT INITIAL.
    SORT lt_key BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_key.
    LOOP AT lt_key INTO ls_key.
      MOVE-CORRESPONDING ls_key TO ls_massdata.
      APPEND ls_massdata TO gt_massdata.
    ENDLOOP.
    PERFORM check_databases_join.
  ENDIF.

ENDFORM.                    "select_vbdata

***********************************************************************
* CHOOSE RELEVANT DATA
***********************************************************************
FORM choose_scenario.
  PERFORM choose_bkpf.
  PERFORM choose_bseg.
  PERFORM choose_bsec.
  PERFORM choose_bsed.
  PERFORM choose_bset.
  PERFORM choose_bse_clr.
  IF acdoca_active = 0.
    PERFORM choose_bsis.
    PERFORM choose_bsas.
    PERFORM choose_bsik.
    PERFORM choose_bsak.
    PERFORM choose_bsid.
    PERFORM choose_bsad.
  ENDIF.
  PERFORM choose_bseg_add.
  PERFORM choose_splinfo.
  PERFORM choose_splinfo_val.
  PERFORM choose_glu1mod.
  PERFORM update_flags.
ENDFORM.                    "choose_scenario

*&---------------------------------------------------------------------*
*&      Form  choose_bkpf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bkpf.
  DATA ls_bkpf LIKE bkpfmoddisp.
  DATA ls_db_bkpf TYPE bkpf.
  DATA ls_temp_bkpf TYPE bkpf.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bkpf INTO ls_db_bkpf.
    LOOP AT gt_temp_bkpf INTO ls_temp_bkpf
      WHERE bukrs = ls_db_bkpf-bukrs
      AND belnr = ls_db_bkpf-belnr
      AND gjahr = ls_db_bkpf-gjahr.
      IF ls_db_bkpf = ls_temp_bkpf.
        MOVE-CORRESPONDING ls_db_bkpf TO ls_bkpf.
        ls_bkpf-orig = 'DTAB'.
        ls_bkpf-check = 'X'.
        ls_bkpf-control = '@5B@'.
        APPEND ls_bkpf TO gt_bkpf.
        CLEAR ls_bkpf.
      ELSE.
        ASSIGN ls_db_bkpf TO <fstruc_db>.
        ASSIGN ls_temp_bkpf TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'DTAB'.
          ls_bkpf-check = 'X'.
          ls_bkpf-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_temp_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'EXTR'.
          ls_bkpf-check = ' '.
          ls_bkpf-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'DTAB'.
          ls_bkpf-check = 'X'.
          ls_bkpf-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_temp_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'EXTR'.
          ls_bkpf-check = ' '.
          ls_bkpf-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'EXTR'.
          ls_bkpf-check = ' '.
          ls_bkpf-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_db_bkpf TO ls_bkpf.
          ls_bkpf-orig = 'DTAB'.
          ls_bkpf-check = 'X'.
          ls_bkpf-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bkpf TO gt_bkpf.
          CLEAR ls_bkpf.
        ENDIF.
        CLEAR field_db_count.
        CLEAR field_temp_count.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bkpf TO ls_bkpf.
      ls_bkpf-orig = 'DTAB'.
      ls_bkpf-check = 'X'.
      ls_bkpf-control = '@5B@'.
      APPEND ls_bkpf TO gt_bkpf.
      CLEAR ls_bkpf.
    ENDIF.
    MOVE-CORRESPONDING ls_bkpf TO ls_flag.
    ls_flag-bukrs = ls_db_bkpf-bukrs.
    ls_flag-belnr = ls_db_bkpf-belnr.
    ls_flag-gjahr = ls_db_bkpf-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bkpf INTO ls_temp_bkpf.
    LOOP AT gt_db_bkpf INTO ls_db_bkpf.
      IF ls_temp_bkpf-bukrs = ls_db_bkpf-bukrs
        AND ls_temp_bkpf-belnr = ls_db_bkpf-belnr
        AND ls_temp_bkpf-gjahr = ls_db_bkpf-gjahr.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bkpf TO ls_bkpf.
      ls_bkpf-orig = 'EXTR'.
      ls_bkpf-check = 'X'.
      ls_bkpf-control = '@5D@'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      ls_flag-error = 'IMPORT BKPF'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bkpf TO gt_bkpf.
      CLEAR ls_bkpf.
    ENDIF.
    CLEAR flag_found.
    ls_flag-bukrs = ls_temp_bkpf-bukrs.
    ls_flag-belnr = ls_temp_bkpf-belnr.
    ls_flag-gjahr = ls_temp_bkpf-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bkpf

*&---------------------------------------------------------------------*
*&      Form  choose_bseg
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bseg.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_db_bseg TYPE bseg.
  DATA ls_temp_bseg TYPE bseg.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bseg INTO ls_db_bseg.
    LOOP AT gt_temp_bseg INTO ls_temp_bseg
      WHERE bukrs = ls_db_bseg-bukrs
      AND belnr = ls_db_bseg-belnr
      AND gjahr = ls_db_bseg-gjahr
      AND buzei = ls_db_bseg-buzei.
      IF ls_db_bseg = ls_temp_bseg.
        MOVE-CORRESPONDING ls_db_bseg TO ls_bseg.
        ls_bseg-orig = 'DTAB'.
        ls_bseg-check = 'X'.
        ls_bseg-control = '@5B@'.
        APPEND ls_bseg TO gt_bseg.
        CLEAR ls_bseg.
      ELSE.
        ASSIGN ls_db_bseg TO <fstruc_db>.
        ASSIGN ls_temp_bseg TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bseg TO ls_bseg.
          ls_bseg-orig = 'DTAB'.
          ls_bseg-check = 'X'.
          ls_bseg-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
          MOVE-CORRESPONDING ls_temp_bseg TO ls_bseg.
          ls_bseg-orig = 'EXTR'.
          ls_bseg-check = ' '.
          ls_bseg-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bseg TO ls_bseg.
          ls_bseg-orig = 'DTAB'.
          ls_bseg-check = 'X'.
          ls_bseg-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
          MOVE-CORRESPONDING ls_temp_bseg TO ls_bseg.
          ls_bseg-orig = 'EXTR'.
          ls_bseg-check = ' '.
          ls_bseg-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bseg TO ls_bseg.
          ls_bseg-orig = 'EXTR'.
          ls_bseg-check = ' '.
          ls_bseg-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
          MOVE-CORRESPONDING ls_db_bseg TO ls_bseg.
          ls_bseg-orig = 'DTAB'.
          ls_bseg-check = 'X'.
          ls_bseg-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg TO gt_bseg.
          CLEAR ls_bseg.
        ENDIF.
        CLEAR field_db_count.
        CLEAR field_temp_count.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bseg TO ls_bseg.
      ls_bseg-orig = 'DTAB'.
      ls_bseg-check = 'X'.
      ls_bseg-control = '@5B@'.
      APPEND ls_bseg TO gt_bseg.
      CLEAR ls_bseg.
    ENDIF.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    ls_flag-bukrs = ls_db_bseg-bukrs.
    ls_flag-belnr = ls_db_bseg-belnr.
    ls_flag-gjahr = ls_db_bseg-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bseg INTO ls_temp_bseg.
    LOOP AT gt_db_bseg INTO ls_db_bseg.
      IF ls_temp_bseg-bukrs = ls_db_bseg-bukrs
        AND ls_temp_bseg-belnr = ls_db_bseg-belnr
        AND ls_temp_bseg-gjahr = ls_db_bseg-gjahr
        AND ls_temp_bseg-buzei = ls_db_bseg-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bseg TO ls_bseg.
      ls_bseg-orig = 'EXTR'.
      ls_bseg-check = 'X'.
      ls_bseg-control = '@5D@'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      ls_flag-error = 'IMPORT BSEG'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bseg TO gt_bseg.
      CLEAR ls_bseg.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    ls_flag-bukrs = ls_temp_bseg-bukrs.
    ls_flag-belnr = ls_temp_bseg-belnr.
    ls_flag-gjahr = ls_temp_bseg-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.

ENDFORM.                    "choose_bseg

*&---------------------------------------------------------------------*
*&      Form  choose_bsec
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsec.
  DATA ls_bsec LIKE bsecmoddisp.
  DATA ls_db_bsec TYPE bsec.
  DATA ls_temp_bsec TYPE bsec.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.
  LOOP AT gt_db_bsec INTO ls_db_bsec.
    LOOP AT gt_temp_bsec INTO ls_temp_bsec
      WHERE bukrs = ls_db_bsec-bukrs
      AND belnr = ls_db_bsec-belnr
      AND gjahr = ls_db_bsec-gjahr
      AND buzei = ls_db_bsec-buzei.
      IF ls_db_bsec = ls_temp_bsec.
        MOVE-CORRESPONDING ls_db_bsec TO ls_bsec.
        ls_bsec-orig = 'DTAB'.
        ls_bsec-check = 'X'.
        ls_bsec-control = '@5B@'.
        APPEND ls_bsec TO gt_bsec.
        CLEAR ls_bsec.
      ELSE.
        ASSIGN ls_db_bsec TO <fstruc_db>.
        ASSIGN ls_temp_bsec TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsec TO ls_bsec.
          ls_bsec-orig = 'DTAB'.
          ls_bsec-check = 'X'.
          ls_bsec-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
          MOVE-CORRESPONDING ls_temp_bsec TO ls_bsec.
          ls_bsec-orig = 'EXTR'.
          ls_bsec-check = ' '.
          ls_bsec-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsec TO ls_bsec.
          ls_bsec-orig = 'DTAB'.
          ls_bsec-check = 'X'.
          ls_bsec-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
          MOVE-CORRESPONDING ls_temp_bsec TO ls_bsec.
          ls_bsec-orig = 'EXTR'.
          ls_bsec-check = ' '.
          ls_bsec-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsec TO ls_bsec.
          ls_bsec-orig = 'EXTR'.
          ls_bsec-check = ' '.
          ls_bsec-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
          MOVE-CORRESPONDING ls_db_bsec TO ls_bsec.
          ls_bsec-orig = 'DTAB'.
          ls_bsec-check = 'X'.
          ls_bsec-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsec TO gt_bsec.
          CLEAR ls_bsec.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsec TO ls_bsec.
      ls_bsec-orig = 'DTAB'.
      ls_bsec-check = 'X'.
      ls_bsec-control = '@5B@'.
      APPEND ls_bsec TO gt_bsec.
      CLEAR ls_bsec.
    ENDIF.
    MOVE-CORRESPONDING ls_bsec TO ls_flag.
    ls_flag-bukrs = ls_db_bsec-bukrs.
    ls_flag-belnr = ls_db_bsec-belnr.
    ls_flag-gjahr = ls_db_bsec-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsec INTO ls_temp_bsec.
    LOOP AT gt_db_bsec INTO ls_db_bsec.
      IF ls_temp_bsec-bukrs = ls_db_bsec-bukrs
        AND ls_temp_bsec-belnr = ls_db_bsec-belnr
        AND ls_temp_bsec-gjahr = ls_db_bsec-gjahr
        AND ls_temp_bsec-buzei = ls_db_bsec-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsec TO ls_bsec.
      ls_bsec-orig = 'EXTR'.
      ls_bsec-check = 'X'.
      ls_bsec-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsec TO ls_flag.
      ls_flag-error = 'IMPORT BSEC'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsec TO gt_bsec.
      CLEAR ls_bsec.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsec TO ls_flag.
    ls_flag-bukrs = ls_temp_bsec-bukrs.
    ls_flag-belnr = ls_temp_bsec-belnr.
    ls_flag-gjahr = ls_temp_bsec-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsec

*&---------------------------------------------------------------------*
*&      Form  choose_bset
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bset.
  DATA ls_bset LIKE bsetmoddisp.
  DATA ls_db_bset TYPE bset.
  DATA ls_temp_bset TYPE bset.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bset INTO ls_db_bset.
    LOOP AT gt_temp_bset INTO ls_temp_bset
      WHERE bukrs = ls_db_bset-bukrs
      AND belnr = ls_db_bset-belnr
      AND gjahr = ls_db_bset-gjahr
      AND buzei = ls_db_bset-buzei.
      IF ls_db_bset = ls_temp_bset.
        MOVE-CORRESPONDING ls_db_bset TO ls_bset.
        ls_bset-orig = 'DTAB'.
        ls_bset-check = 'X'.
        ls_bset-control = '@5B@'.
        APPEND ls_bset TO gt_bset.
        CLEAR ls_bset.
      ELSE.
        ASSIGN ls_db_bset TO <fstruc_db>.
        ASSIGN ls_temp_bset TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bset TO ls_bset.
          ls_bset-orig = 'DTAB'.
          ls_bset-check = 'X'.
          ls_bset-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
          MOVE-CORRESPONDING ls_temp_bset TO ls_bset.
          ls_bset-orig = 'EXTR'.
          ls_bset-check = ' '.
          ls_bset-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bset TO ls_bset.
          ls_bset-orig = 'DTAB'.
          ls_bset-check = 'X'.
          ls_bset-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
          MOVE-CORRESPONDING ls_temp_bset TO ls_bset.
          ls_bset-orig = 'EXTR'.
          ls_bset-check = ' '.
          ls_bset-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bset TO ls_bset.
          ls_bset-orig = 'EXTR'.
          ls_bset-check = ' '.
          ls_bset-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
          MOVE-CORRESPONDING ls_db_bset TO ls_bset.
          ls_bset-orig = 'DTAB'.
          ls_bset-check = 'X'.
          ls_bset-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bset TO gt_bset.
          CLEAR ls_bset.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bset TO ls_bset.
      ls_bset-orig = 'DTAB'.
      ls_bset-check = 'X'.
      ls_bset-control = '@5B@'.
      APPEND ls_bset TO gt_bset.
      CLEAR ls_bset.
    ENDIF.
    MOVE-CORRESPONDING ls_bset TO ls_flag.
    ls_flag-bukrs = ls_db_bset-bukrs.
    ls_flag-belnr = ls_db_bset-belnr.
    ls_flag-gjahr = ls_db_bset-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bset INTO ls_temp_bset.
    LOOP AT gt_db_bset INTO ls_db_bset.
      IF ls_temp_bset-bukrs = ls_db_bset-bukrs
        AND ls_temp_bset-belnr = ls_db_bset-belnr
        AND ls_temp_bset-gjahr = ls_db_bset-gjahr
        AND ls_temp_bset-buzei = ls_db_bset-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bset TO ls_bset.
      ls_bset-orig = 'EXTR'.
      ls_bset-check = 'X'.
      ls_bset-control = '@5D@'.
      MOVE-CORRESPONDING ls_bset TO ls_flag.
      ls_flag-error = 'IMPORT BSET'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bset TO gt_bset.
      CLEAR ls_bset.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bset TO ls_flag.
    ls_flag-bukrs = ls_temp_bset-bukrs.
    ls_flag-belnr = ls_temp_bset-belnr.
    ls_flag-gjahr = ls_temp_bset-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bset

*&---------------------------------------------------------------------*
*&      Form  choose_bsed
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsed.
  DATA ls_bsed LIKE bsedmoddisp.
  DATA ls_db_bsed TYPE bsed.
  DATA ls_temp_bsed TYPE bsed.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.
  LOOP AT gt_db_bsed INTO ls_db_bsed.
    LOOP AT gt_temp_bsed INTO ls_temp_bsed
      WHERE bukrs = ls_db_bsed-bukrs
      AND belnr = ls_db_bsed-belnr
      AND gjahr = ls_db_bsed-gjahr
      AND buzei = ls_db_bsed-buzei.
      IF ls_db_bsed = ls_temp_bsed.
        MOVE-CORRESPONDING ls_db_bsed TO ls_bsed.
        ls_bsed-orig = 'DTAB'.
        ls_bsed-check = 'X'.
        ls_bsed-control = '@5B@'.
        APPEND ls_bsed TO gt_bsed.
        CLEAR ls_bsed.
      ELSE.
        ASSIGN ls_db_bsed TO <fstruc_db>.
        ASSIGN ls_temp_bsed TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsed TO ls_bsed.
          ls_bsed-orig = 'DTAB'.
          ls_bsed-check = 'X'.
          ls_bsed-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
          MOVE-CORRESPONDING ls_temp_bsed TO ls_bsed.
          ls_bsed-orig = 'EXTR'.
          ls_bsed-check = ' '.
          ls_bsed-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsed TO ls_bsed.
          ls_bsed-orig = 'DTAB'.
          ls_bsed-check = 'X'.
          ls_bsed-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
          MOVE-CORRESPONDING ls_temp_bsed TO ls_bsed.
          ls_bsed-orig = 'EXTR'.
          ls_bsed-check = ' '.
          ls_bsed-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsed TO ls_bsed.
          ls_bsed-orig = 'EXTR'.
          ls_bsed-check = ' '.
          ls_bsed-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
          MOVE-CORRESPONDING ls_db_bsed TO ls_bsed.
          ls_bsed-orig = 'DTAB'.
          ls_bsed-check = 'X'.
          ls_bsed-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsed TO gt_bsed.
          CLEAR ls_bsed.
        ENDIF.
        CLEAR field_db_count.
        CLEAR field_temp_count.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsed TO ls_bsed.
      ls_bsed-orig = 'DTAB'.
      ls_bsed-check = 'X'.
      ls_bsed-control = '@5B@'.
      APPEND ls_bsed TO gt_bsed.
      CLEAR ls_bsed.
    ENDIF.
    MOVE-CORRESPONDING ls_bsed TO ls_flag.
    ls_flag-bukrs = ls_db_bsed-bukrs.
    ls_flag-belnr = ls_db_bsed-belnr.
    ls_flag-gjahr = ls_db_bsed-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsed INTO ls_temp_bsed.
    LOOP AT gt_db_bsed INTO ls_db_bsed.
      IF ls_temp_bsed-bukrs = ls_db_bsed-bukrs
        AND ls_temp_bsed-belnr = ls_db_bsed-belnr
        AND ls_temp_bsed-gjahr = ls_db_bsed-gjahr
        AND ls_temp_bsed-buzei = ls_db_bsed-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsed TO ls_bsed.
      ls_bsed-orig = 'EXTR'.
      ls_bsed-check = 'X'.
      ls_bsed-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsed TO ls_flag.
      ls_flag-error = 'IMPORT BSED'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsed TO gt_bsed.
      CLEAR ls_bsed.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsed TO ls_flag.
    ls_flag-bukrs = ls_temp_bsed-bukrs.
    ls_flag-belnr = ls_temp_bsed-belnr.
    ls_flag-gjahr = ls_temp_bsed-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsed

*&---------------------------------------------------------------------*
*&      Form  choose_bsis
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsis.
  DATA ls_bsis LIKE bsismoddisp.
  DATA ls_db_bsis TYPE bsis.
  DATA ls_temp_bsis TYPE bsis.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsis INTO ls_db_bsis.
    LOOP AT gt_temp_bsis INTO ls_temp_bsis
      WHERE bukrs = ls_db_bsis-bukrs
      AND belnr = ls_db_bsis-belnr
      AND gjahr = ls_db_bsis-gjahr
      AND buzei = ls_db_bsis-buzei.
      IF ls_db_bsis = ls_temp_bsis.
        MOVE-CORRESPONDING ls_db_bsis TO ls_bsis.
        ls_bsis-orig = 'DTAB'.
        ls_bsis-check = 'X'.
        ls_bsis-control = '@5B@'.
        APPEND ls_bsis TO gt_bsis.
        CLEAR ls_bsis.
      ELSE.
        ASSIGN ls_db_bsis TO <fstruc_db>.
        ASSIGN ls_temp_bsis TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsis TO ls_bsis.
          ls_bsis-orig = 'DTAB'.
          ls_bsis-check = 'X'.
          ls_bsis-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
          MOVE-CORRESPONDING ls_temp_bsis TO ls_bsis.
          ls_bsis-orig = 'EXTR'.
          ls_bsis-check = ' '.
          ls_bsis-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsis TO ls_bsis.
          ls_bsis-orig = 'DTAB'.
          ls_bsis-check = 'X'.
          ls_bsis-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
          MOVE-CORRESPONDING ls_temp_bsis TO ls_bsis.
          ls_bsis-orig = 'EXTR'.
          ls_bsis-check = ' '.
          ls_bsis-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsis TO ls_bsis.
          ls_bsis-orig = 'EXTR'.
          ls_bsis-check = ' '.
          ls_bsis-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
          MOVE-CORRESPONDING ls_db_bsis TO ls_bsis.
          ls_bsis-orig = 'DTAB'.
          ls_bsis-check = 'X'.
          ls_bsis-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsis TO gt_bsis.
          CLEAR ls_bsis.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsis TO ls_bsis.
      ls_bsis-orig = 'DTAB'.
      ls_bsis-check = 'X'.
      ls_bsis-control = '@5B@'.
      APPEND ls_bsis TO gt_bsis.
      CLEAR ls_bsis.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    ls_flag-bukrs = ls_db_bsis-bukrs.
    ls_flag-belnr = ls_db_bsis-belnr.
    ls_flag-gjahr = ls_db_bsis-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsis INTO ls_temp_bsis.
    LOOP AT gt_db_bsis INTO ls_db_bsis.
      IF ls_temp_bsis-bukrs = ls_db_bsis-bukrs
        AND ls_temp_bsis-belnr = ls_db_bsis-belnr
        AND ls_temp_bsis-gjahr = ls_db_bsis-gjahr
        AND ls_temp_bsis-buzei = ls_db_bsis-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsis TO ls_bsis.
      ls_bsis-orig = 'EXTR'.
      ls_bsis-check = 'X'.
      ls_bsis-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsis TO ls_flag.
      ls_flag-error = 'IMPORT BSIS'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsis TO gt_bsis.
      CLEAR ls_bsis.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    ls_flag-bukrs = ls_temp_bsis-bukrs.
    ls_flag-belnr = ls_temp_bsis-belnr.
    ls_flag-gjahr = ls_temp_bsis-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsis

*&---------------------------------------------------------------------*
*&      Form  choose_bsas
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsas.
  DATA ls_bsas LIKE bsasmoddisp.
  DATA ls_db_bsas TYPE bsas.
  DATA ls_temp_bsas TYPE bsas.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsas INTO ls_db_bsas.
    LOOP AT gt_temp_bsas INTO ls_temp_bsas
      WHERE bukrs = ls_db_bsas-bukrs
      AND belnr = ls_db_bsas-belnr
      AND gjahr = ls_db_bsas-gjahr
      AND buzei = ls_db_bsas-buzei.
      IF ls_db_bsas = ls_temp_bsas.
        MOVE-CORRESPONDING ls_db_bsas TO ls_bsas.
        ls_bsas-orig = 'DTAB'.
        ls_bsas-check = 'X'.
        ls_bsas-control = '@5B@'.
        APPEND ls_bsas TO gt_bsas.
        CLEAR ls_bsas.
      ELSE.
        ASSIGN ls_db_bsas TO <fstruc_db>.
        ASSIGN ls_temp_bsas TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsas TO ls_bsas.
          ls_bsas-orig = 'DTAB'.
          ls_bsas-check = 'X'.
          ls_bsas-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
          MOVE-CORRESPONDING ls_temp_bsas TO ls_bsas.
          ls_bsas-orig = 'EXTR'.
          ls_bsas-check = ' '.
          ls_bsas-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsas TO ls_bsas.
          ls_bsas-orig = 'DTAB'.
          ls_bsas-check = 'X'.
          ls_bsas-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
          MOVE-CORRESPONDING ls_temp_bsas TO ls_bsas.
          ls_bsas-orig = 'EXTR'.
          ls_bsas-check = ' '.
          ls_bsas-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsas TO ls_bsas.
          ls_bsas-orig = 'EXTR'.
          ls_bsas-check = ' '.
          ls_bsas-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
          MOVE-CORRESPONDING ls_db_bsas TO ls_bsas.
          ls_bsas-orig = 'DTAB'.
          ls_bsas-check = 'X'.
          ls_bsas-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsas TO gt_bsas.
          CLEAR ls_bsas.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsas TO ls_bsas.
      ls_bsas-orig = 'DTAB'.
      ls_bsas-check = 'X'.
      ls_bsas-control = '@5B@'.
      APPEND ls_bsas TO gt_bsas.
      CLEAR ls_bsas.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    ls_flag-bukrs = ls_db_bsas-bukrs.
    ls_flag-belnr = ls_db_bsas-belnr.
    ls_flag-gjahr = ls_db_bsas-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsas INTO ls_temp_bsas.
    LOOP AT gt_db_bsas INTO ls_db_bsas.
      IF ls_temp_bsas-bukrs = ls_db_bsas-bukrs
        AND ls_temp_bsas-belnr = ls_db_bsas-belnr
        AND ls_temp_bsas-gjahr = ls_db_bsas-gjahr
        AND ls_temp_bsas-buzei = ls_db_bsas-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsas TO ls_bsas.
      ls_bsas-orig = 'EXTR'.
      ls_bsas-check = 'X'.
      ls_bsas-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsas TO ls_flag.
      ls_flag-error = 'IMPORT BSAS'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsas TO gt_bsas.
      CLEAR ls_bsas.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    ls_flag-bukrs = ls_temp_bsas-bukrs.
    ls_flag-belnr = ls_temp_bsas-belnr.
    ls_flag-gjahr = ls_temp_bsas-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsas

*&---------------------------------------------------------------------*
*&      Form  choose_bsid
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsid.
  DATA ls_bsid LIKE bsidmoddisp.
  DATA ls_db_bsid TYPE bsid.
  DATA ls_temp_bsid TYPE bsid.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsid INTO ls_db_bsid.
    LOOP AT gt_temp_bsid INTO ls_temp_bsid
      WHERE bukrs = ls_db_bsid-bukrs
      AND belnr = ls_db_bsid-belnr
      AND gjahr = ls_db_bsid-gjahr
      AND buzei = ls_db_bsid-buzei.
      IF ls_db_bsid = ls_temp_bsid.
        MOVE-CORRESPONDING ls_db_bsid TO ls_bsid.
        ls_bsid-orig = 'DTAB'.
        ls_bsid-check = 'X'.
        ls_bsid-control = '@5B@'.
        APPEND ls_bsid TO gt_bsid.
        CLEAR ls_bsid.
      ELSE.
        ASSIGN ls_db_bsid TO <fstruc_db>.
        ASSIGN ls_temp_bsid TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsid TO ls_bsid.
          ls_bsid-orig = 'DTAB'.
          ls_bsid-check = 'X'.
          ls_bsid-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
          MOVE-CORRESPONDING ls_temp_bsid TO ls_bsid.
          ls_bsid-orig = 'EXTR'.
          ls_bsid-check = ' '.
          ls_bsid-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsid TO ls_bsid.
          ls_bsid-orig = 'DTAB'.
          ls_bsid-check = 'X'.
          ls_bsid-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
          MOVE-CORRESPONDING ls_temp_bsid TO ls_bsid.
          ls_bsid-orig = 'EXTR'.
          ls_bsid-check = ' '.
          ls_bsid-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsid TO ls_bsid.
          ls_bsid-orig = 'EXTR'.
          ls_bsid-check = ' '.
          ls_bsid-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
          MOVE-CORRESPONDING ls_db_bsid TO ls_bsid.
          ls_bsid-orig = 'DTAB'.
          ls_bsid-check = 'X'.
          ls_bsid-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsid TO gt_bsid.
          CLEAR ls_bsid.
        ENDIF.
        CLEAR field_db_count.
        CLEAR field_temp_count.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsid TO ls_bsid.
      ls_bsid-orig = 'DTAB'.
      ls_bsid-check = 'X'.
      ls_bsid-control = '@5B@'.
      APPEND ls_bsid TO gt_bsid.
      CLEAR ls_bsid.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    ls_flag-bukrs = ls_db_bsid-bukrs.
    ls_flag-belnr = ls_db_bsid-belnr.
    ls_flag-gjahr = ls_db_bsid-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsid INTO ls_temp_bsid.
    LOOP AT gt_db_bsid INTO ls_db_bsid.
      IF ls_temp_bsid-bukrs = ls_db_bsid-bukrs
        AND ls_temp_bsid-belnr = ls_db_bsid-belnr
        AND ls_temp_bsid-gjahr = ls_db_bsid-gjahr
        AND ls_temp_bsid-buzei = ls_db_bsid-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsid TO ls_bsid.
      ls_bsid-orig = 'EXTR'.
      ls_bsid-check = 'X'.
      ls_bsid-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsid TO ls_flag.
      ls_flag-error = 'IMPORT BSID'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsid TO gt_bsid.
      CLEAR ls_bsid.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    ls_flag-bukrs = ls_temp_bsid-bukrs.
    ls_flag-belnr = ls_temp_bsid-belnr.
    ls_flag-gjahr = ls_temp_bsid-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsid

*&---------------------------------------------------------------------*
*&      Form  choose_bsad
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsad.
  DATA ls_bsad LIKE bsadmoddisp.
  DATA ls_db_bsad TYPE bsad.
  DATA ls_temp_bsad TYPE bsad.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsad INTO ls_db_bsad.
    LOOP AT gt_temp_bsad INTO ls_temp_bsad
      WHERE bukrs = ls_db_bsad-bukrs
      AND belnr = ls_db_bsad-belnr
      AND gjahr = ls_db_bsad-gjahr
      AND buzei = ls_db_bsad-buzei.
      IF ls_db_bsad = ls_temp_bsad.
        MOVE-CORRESPONDING ls_db_bsad TO ls_bsad.
        ls_bsad-orig = 'DTAB'.
        ls_bsad-check = 'X'.
        ls_bsad-control = '@5B@'.
        APPEND ls_bsad TO gt_bsad.
        CLEAR ls_bsad.
      ELSE.
        ASSIGN ls_db_bsad TO <fstruc_db>.
        ASSIGN ls_temp_bsad TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsad TO ls_bsad.
          ls_bsad-orig = 'DTAB'.
          ls_bsad-check = 'X'.
          ls_bsad-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
          MOVE-CORRESPONDING ls_temp_bsad TO ls_bsad.
          ls_bsad-orig = 'EXTR'.
          ls_bsad-check = ' '.
          ls_bsad-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsad TO ls_bsad.
          ls_bsad-orig = 'DTAB'.
          ls_bsad-check = 'X'.
          ls_bsad-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
          MOVE-CORRESPONDING ls_temp_bsad TO ls_bsad.
          ls_bsad-orig = 'EXTR'.
          ls_bsad-check = ' '.
          ls_bsad-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsad TO ls_bsad.
          ls_bsad-orig = 'EXTR'.
          ls_bsad-check = ' '.
          ls_bsad-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
          MOVE-CORRESPONDING ls_db_bsad TO ls_bsad.
          ls_bsad-orig = 'DTAB'.
          ls_bsad-check = 'X'.
          ls_bsad-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsad TO gt_bsad.
          CLEAR ls_bsad.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsad TO ls_bsad.
      ls_bsad-orig = 'DTAB'.
      ls_bsad-check = 'X'.
      ls_bsad-control = '@5B@'.
      APPEND ls_bsad TO gt_bsad.
      CLEAR ls_bsad.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    ls_flag-bukrs = ls_db_bsad-bukrs.
    ls_flag-belnr = ls_db_bsad-belnr.
    ls_flag-gjahr = ls_db_bsad-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsad INTO ls_temp_bsad.
    LOOP AT gt_db_bsad INTO ls_db_bsad.
      IF ls_temp_bsad-bukrs = ls_db_bsad-bukrs
        AND ls_temp_bsad-belnr = ls_db_bsad-belnr
        AND ls_temp_bsad-gjahr = ls_db_bsad-gjahr
        AND ls_temp_bsad-buzei = ls_db_bsad-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsad TO ls_bsad.
      ls_bsad-orig = 'EXTR'.
      ls_bsad-check = 'X'.
      ls_bsad-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsad TO ls_flag.
      ls_flag-error = 'IMPORT BSAD'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsad TO gt_bsad.
      CLEAR ls_bsad.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    ls_flag-bukrs = ls_temp_bsad-bukrs.
    ls_flag-belnr = ls_temp_bsad-belnr.
    ls_flag-gjahr = ls_temp_bsad-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsad

*&---------------------------------------------------------------------*
*&      Form  choose_bsik
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsik.
  DATA ls_bsik LIKE bsikmoddisp.
  DATA ls_db_bsik TYPE bsik.
  DATA ls_temp_bsik TYPE bsik.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsik INTO ls_db_bsik.
    LOOP AT gt_temp_bsik INTO ls_temp_bsik
      WHERE bukrs = ls_db_bsik-bukrs
      AND belnr = ls_db_bsik-belnr
      AND gjahr = ls_db_bsik-gjahr
      AND buzei = ls_db_bsik-buzei.
      IF ls_db_bsik = ls_temp_bsik.
        MOVE-CORRESPONDING ls_db_bsik TO ls_bsik.
        ls_bsik-orig = 'DTAB'.
        ls_bsik-check = 'X'.
        ls_bsik-control = '@5B@'.
        APPEND ls_bsik TO gt_bsik.
        CLEAR ls_bsik.
      ELSE.
        ASSIGN ls_db_bsik TO <fstruc_db>.
        ASSIGN ls_temp_bsik TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsik TO ls_bsik.
          ls_bsik-orig = 'DTAB'.
          ls_bsik-check = 'X'.
          ls_bsik-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
          MOVE-CORRESPONDING ls_temp_bsik TO ls_bsik.
          ls_bsik-orig = 'EXTR'.
          ls_bsik-check = ' '.
          ls_bsik-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsik TO ls_bsik.
          ls_bsik-orig = 'DTAB'.
          ls_bsik-check = 'X'.
          ls_bsik-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
          MOVE-CORRESPONDING ls_temp_bsik TO ls_bsik.
          ls_bsik-orig = 'EXTR'.
          ls_bsik-check = ' '.
          ls_bsik-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsik TO ls_bsik.
          ls_bsik-orig = 'EXTR'.
          ls_bsik-check = ' '.
          ls_bsik-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
          MOVE-CORRESPONDING ls_db_bsik TO ls_bsik.
          ls_bsik-orig = 'DTAB'.
          ls_bsik-check = 'X'.
          ls_bsik-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsik TO gt_bsik.
          CLEAR ls_bsik.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsik TO ls_bsik.
      ls_bsik-orig = 'DTAB'.
      ls_bsik-check = 'X'.
      ls_bsik-control = '@5B@'.
      APPEND ls_bsik TO gt_bsik.
      CLEAR ls_bsik.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    ls_flag-bukrs = ls_db_bsik-bukrs.
    ls_flag-belnr = ls_db_bsik-belnr.
    ls_flag-gjahr = ls_db_bsik-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsik INTO ls_temp_bsik.
    LOOP AT gt_db_bsik INTO ls_db_bsik.
      IF ls_temp_bsik-bukrs = ls_db_bsik-bukrs
        AND ls_temp_bsik-belnr = ls_db_bsik-belnr
        AND ls_temp_bsik-gjahr = ls_db_bsik-gjahr
        AND ls_temp_bsik-buzei = ls_db_bsik-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsik TO ls_bsik.
      ls_bsik-orig = 'EXTR'.
      ls_bsik-check = 'X'.
      ls_bsik-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsik TO ls_flag.
      ls_flag-error = 'IMPORT BSIK'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsik TO gt_bsik.
      CLEAR ls_bsik.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    ls_flag-bukrs = ls_temp_bsik-bukrs.
    ls_flag-belnr = ls_temp_bsik-belnr.
    ls_flag-gjahr = ls_temp_bsik-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsik

*&---------------------------------------------------------------------*
*&      Form  choose_bsak
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bsak.
  DATA ls_bsak LIKE bsakmoddisp.
  DATA ls_db_bsak TYPE bsak.
  DATA ls_temp_bsak TYPE bsak.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bsak INTO ls_db_bsak.
    LOOP AT gt_temp_bsak INTO ls_temp_bsak
      WHERE bukrs = ls_db_bsak-bukrs
      AND belnr = ls_db_bsak-belnr
      AND gjahr = ls_db_bsak-gjahr
      AND buzei = ls_db_bsak-buzei.
      IF ls_db_bsak = ls_temp_bsak.
        MOVE-CORRESPONDING ls_db_bsak TO ls_bsak.
        ls_bsak-orig = 'DTAB'.
        ls_bsak-check = 'X'.
        ls_bsak-control = '@5B@'.
        APPEND ls_bsak TO gt_bsak.
        CLEAR ls_bsak.
      ELSE.
        ASSIGN ls_db_bsak TO <fstruc_db>.
        ASSIGN ls_temp_bsak TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bsak TO ls_bsak.
          ls_bsak-orig = 'DTAB'.
          ls_bsak-check = 'X'.
          ls_bsak-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
          MOVE-CORRESPONDING ls_temp_bsak TO ls_bsak.
          ls_bsak-orig = 'EXTR'.
          ls_bsak-check = ' '.
          ls_bsak-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bsak TO ls_bsak.
          ls_bsak-orig = 'DTAB'.
          ls_bsak-check = 'X'.
          ls_bsak-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
          MOVE-CORRESPONDING ls_temp_bsak TO ls_bsak.
          ls_bsak-orig = 'EXTR'.
          ls_bsak-check = ' '.
          ls_bsak-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bsak TO ls_bsak.
          ls_bsak-orig = 'EXTR'.
          ls_bsak-check = ' '.
          ls_bsak-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
          MOVE-CORRESPONDING ls_db_bsak TO ls_bsak.
          ls_bsak-orig = 'DTAB'.
          ls_bsak-check = 'X'.
          ls_bsak-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bsak TO gt_bsak.
          CLEAR ls_bsak.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bsak TO ls_bsak.
      ls_bsak-orig = 'DTAB'.
      ls_bsak-check = 'X'.
      ls_bsak-control = '@5B@'.
      APPEND ls_bsak TO gt_bsak.
      CLEAR ls_bsak.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    ls_flag-bukrs = ls_db_bsak-bukrs.
    ls_flag-belnr = ls_db_bsak-belnr.
    ls_flag-gjahr = ls_db_bsak-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bsak INTO ls_temp_bsak.
    LOOP AT gt_db_bsak INTO ls_db_bsak.
      IF ls_temp_bsak-bukrs = ls_db_bsak-bukrs
        AND ls_temp_bsak-belnr = ls_db_bsak-belnr
        AND ls_temp_bsak-gjahr = ls_db_bsak-gjahr
        AND ls_temp_bsak-buzei = ls_db_bsak-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bsak TO ls_bsak.
      ls_bsak-orig = 'EXTR'.
      ls_bsak-check = 'X'.
      ls_bsak-control = '@5D@'.
      MOVE-CORRESPONDING ls_bsak TO ls_flag.
      ls_flag-error = 'IMPORT BSAK'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bsak TO gt_bsak.
      CLEAR ls_bsak.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    ls_flag-bukrs = ls_temp_bsak-bukrs.
    ls_flag-belnr = ls_temp_bsak-belnr.
    ls_flag-gjahr = ls_temp_bsak-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bsak

*&---------------------------------------------------------------------*
*&      Form  choose_bseg_add
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bseg_add.
  DATA ls_bseg_add LIKE bseg_addmoddisp.
  DATA ls_db_bseg_add TYPE bseg_add.
  DATA ls_temp_bseg_add TYPE bseg_add.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bseg_add INTO ls_db_bseg_add.
    LOOP AT gt_temp_bseg_add INTO ls_temp_bseg_add
      WHERE bukrs = ls_db_bseg_add-bukrs
      AND belnr = ls_db_bseg_add-belnr
      AND gjahr = ls_db_bseg_add-gjahr
      AND buzei = ls_db_bseg_add-buzei.
      IF ls_db_bseg_add = ls_temp_bseg_add.
        MOVE-CORRESPONDING ls_db_bseg_add TO ls_bseg_add.
        ls_bseg_add-orig = 'DTAB'.
        ls_bseg_add-check = 'X'.
        ls_bseg_add-control = '@5B@'.
        APPEND ls_bseg_add TO gt_bseg_add.
        CLEAR ls_bseg_add.
      ELSE.
        ASSIGN ls_db_bseg_add TO <fstruc_db>.
        ASSIGN ls_temp_bseg_add TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'DTAB'.
          ls_bseg_add-check = 'X'.
          ls_bseg_add-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
          MOVE-CORRESPONDING ls_temp_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'EXTR'.
          ls_bseg_add-check = ' '.
          ls_bseg_add-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'DTAB'.
          ls_bseg_add-check = 'X'.
          ls_bseg_add-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
          MOVE-CORRESPONDING ls_temp_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'EXTR'.
          ls_bseg_add-check = ' '.
          ls_bseg_add-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'EXTR'.
          ls_bseg_add-check = ' '.
          ls_bseg_add-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
          MOVE-CORRESPONDING ls_db_bseg_add TO ls_bseg_add.
          ls_bseg_add-orig = 'DTAB'.
          ls_bseg_add-check = 'X'.
          ls_bseg_add-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bseg_add TO gt_bseg_add.
          CLEAR ls_bseg_add.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bseg_add TO ls_bseg_add.
      ls_bseg_add-orig = 'DTAB'.
      ls_bseg_add-check = 'X'.
      ls_bseg_add-control = '@5B@'.
      APPEND ls_bseg_add TO gt_bseg_add.
      CLEAR ls_bseg_add.
    ENDIF.
    MOVE-CORRESPONDING ls_bseg_add TO ls_flag.
    ls_flag-bukrs = ls_db_bseg_add-bukrs.
    ls_flag-belnr = ls_db_bseg_add-belnr.
    ls_flag-gjahr = ls_db_bseg_add-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.

  LOOP AT gt_temp_bseg_add INTO ls_temp_bseg_add.
    LOOP AT gt_db_bseg_add INTO ls_db_bseg_add.
      IF ls_temp_bseg_add-bukrs = ls_db_bseg_add-bukrs
        AND ls_temp_bseg_add-belnr = ls_db_bseg_add-belnr
        AND ls_temp_bseg_add-gjahr = ls_db_bseg_add-gjahr
        AND ls_temp_bseg_add-buzei = ls_db_bseg_add-buzei.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bseg_add TO ls_bseg_add.
      ls_bseg_add-orig = 'EXTR'.
      ls_bseg_add-check = 'X'.
      ls_bseg_add-control = '@5D@'.
      MOVE-CORRESPONDING ls_bseg_add TO ls_flag.
      ls_flag-error = 'IMPORT BSEG_ADD'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bseg_add TO gt_bseg_add.
      CLEAR ls_bseg_add.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bseg_add TO ls_flag.
    ls_flag-bukrs = ls_temp_bseg_add-bukrs.
    ls_flag-belnr = ls_temp_bseg_add-belnr.
    ls_flag-gjahr = ls_temp_bseg_add-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bseg_add


*&---------------------------------------------------------------------*
*&      Form  choose_splinfo
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_splinfo.
  DATA ls_splinfo LIKE splinfomoddisp.
  DATA ls_db_splinfo TYPE fagl_splinfo.
  DATA ls_temp_splinfo TYPE fagl_splinfo.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_splinfo INTO ls_db_splinfo.
    LOOP AT gt_temp_splinfo INTO ls_temp_splinfo
      WHERE bukrs = ls_db_splinfo-bukrs
      AND belnr = ls_db_splinfo-belnr
      AND gjahr = ls_db_splinfo-gjahr
      AND buzei = ls_db_splinfo-buzei
      AND spl_no = ls_db_splinfo-spl_no.
      IF ls_db_splinfo = ls_temp_splinfo.
        MOVE-CORRESPONDING ls_db_splinfo TO ls_splinfo.
        ls_splinfo-orig = 'DTAB'.
        ls_splinfo-check = 'X'.
        ls_splinfo-control = '@5B@'.
        APPEND ls_splinfo TO gt_splinfo.
        CLEAR ls_splinfo.
      ELSE.
        ASSIGN ls_db_splinfo TO <fstruc_db>.
        ASSIGN ls_temp_splinfo TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'DTAB'.
          ls_splinfo-check = 'X'.
          ls_splinfo-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
          MOVE-CORRESPONDING ls_temp_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'EXTR'.
          ls_splinfo-check = ' '.
          ls_splinfo-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'DTAB'.
          ls_splinfo-check = 'X'.
          ls_splinfo-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
          MOVE-CORRESPONDING ls_temp_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'EXTR'.
          ls_splinfo-check = ' '.
          ls_splinfo-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
        ELSE.
          MOVE-CORRESPONDING ls_temp_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'EXTR'.
          ls_splinfo-check = ' '.
          ls_splinfo-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
          MOVE-CORRESPONDING ls_db_splinfo TO ls_splinfo.
          ls_splinfo-orig = 'DTAB'.
          ls_splinfo-check = 'X'.
          ls_splinfo-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo TO gt_splinfo.
          CLEAR ls_splinfo.
        ENDIF.
      ENDIF.

    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_splinfo TO ls_splinfo.
      ls_splinfo-orig = 'DTAB'.
      ls_splinfo-check = 'X'.
      ls_splinfo-control = '@5B@'.
      APPEND ls_splinfo TO gt_splinfo.
      CLEAR ls_splinfo.
    ENDIF.
    MOVE-CORRESPONDING ls_splinfo TO ls_flag.
    ls_flag-bukrs = ls_db_splinfo-bukrs.
    ls_flag-belnr = ls_db_splinfo-belnr.
    ls_flag-gjahr = ls_db_splinfo-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_splinfo INTO ls_temp_splinfo.
    LOOP AT gt_db_splinfo INTO ls_db_splinfo.
      IF ls_temp_splinfo-bukrs = ls_db_splinfo-bukrs
        AND ls_temp_splinfo-belnr = ls_db_splinfo-belnr
        AND ls_temp_splinfo-gjahr = ls_db_splinfo-gjahr
        AND ls_temp_splinfo-buzei = ls_db_splinfo-buzei
        AND ls_temp_splinfo-spl_no = ls_db_splinfo-spl_no.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_splinfo TO ls_splinfo.
      ls_splinfo-orig = 'EXTR'.
      ls_splinfo-check = 'X'.
      ls_splinfo-control = '@5D@'.
      MOVE-CORRESPONDING ls_splinfo TO ls_flag.
      ls_flag-error = 'IMPORT SPLINFO'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_splinfo TO gt_splinfo.
      CLEAR ls_splinfo.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_splinfo TO ls_flag.
    ls_flag-bukrs = ls_temp_splinfo-bukrs.
    ls_flag-belnr = ls_temp_splinfo-belnr.
    ls_flag-gjahr = ls_temp_splinfo-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_splinfo

*&---------------------------------------------------------------------*
*&      Form  choose_splinfo_val
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_splinfo_val.
  DATA ls_splinfo_val LIKE splinfovalmoddisp.
  DATA ls_db_splinfo_val TYPE fagl_splinfo_val.
  DATA ls_temp_splinfo_val TYPE fagl_splinfo_val.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_splinfo_val INTO ls_db_splinfo_val.
    LOOP AT gt_temp_splinfo_val INTO ls_temp_splinfo_val
      WHERE bukrs = ls_db_splinfo_val-bukrs
      AND belnr = ls_db_splinfo_val-belnr
      AND gjahr = ls_db_splinfo_val-gjahr
      AND buzei = ls_db_splinfo_val-buzei
      AND spl_no = ls_db_splinfo_val-spl_no
      AND curtp = ls_db_splinfo_val-curtp.
      IF ls_db_splinfo_val = ls_temp_splinfo_val.
        MOVE-CORRESPONDING ls_db_splinfo_val TO ls_splinfo_val.
        ls_splinfo_val-orig = 'DTAB'.
        ls_splinfo_val-check = 'X'.
        ls_splinfo_val-control = '@5B@'.
        APPEND ls_splinfo_val TO gt_splinfo_val.
        CLEAR ls_splinfo_val.
      ELSE.
        ASSIGN ls_db_splinfo_val TO <fstruc_db>.
        ASSIGN ls_temp_splinfo_val TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'DTAB'.
          ls_splinfo_val-check = 'X'.
          ls_splinfo_val-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
          MOVE-CORRESPONDING ls_temp_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'EXTR'.
          ls_splinfo_val-check = ' '.
          ls_splinfo_val-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'DTAB'.
          ls_splinfo_val-check = 'X'.
          ls_splinfo_val-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
          MOVE-CORRESPONDING ls_temp_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'EXTR'.
          ls_splinfo_val-check = ' '.
          ls_splinfo_val-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
        ELSE.
          MOVE-CORRESPONDING ls_temp_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'EXTR'.
          ls_splinfo_val-check = ' '.
          ls_splinfo_val-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
          MOVE-CORRESPONDING ls_db_splinfo_val TO ls_splinfo_val.
          ls_splinfo_val-orig = 'DTAB'.
          ls_splinfo_val-check = 'X'.
          ls_splinfo_val-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_splinfo_val TO gt_splinfo_val.
          CLEAR ls_splinfo_val.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_splinfo_val TO ls_splinfo_val.
      ls_splinfo_val-orig = 'DTAB'.
      ls_splinfo_val-check = 'X'.
      ls_splinfo_val-control = '@5B@'.
      APPEND ls_splinfo_val TO gt_splinfo_val.
      CLEAR ls_splinfo_val.
    ENDIF.
    MOVE-CORRESPONDING ls_splinfo_val TO ls_flag.
    ls_flag-bukrs = ls_db_splinfo_val-bukrs.
    ls_flag-belnr = ls_db_splinfo_val-belnr.
    ls_flag-gjahr = ls_db_splinfo_val-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_splinfo_val INTO ls_temp_splinfo_val.
    LOOP AT gt_db_splinfo_val INTO ls_db_splinfo_val.
      IF ls_temp_splinfo_val-bukrs = ls_db_splinfo_val-bukrs
        AND ls_temp_splinfo_val-belnr = ls_db_splinfo_val-belnr
        AND ls_temp_splinfo_val-gjahr = ls_db_splinfo_val-gjahr
        AND ls_temp_splinfo_val-buzei = ls_db_splinfo_val-buzei
        AND ls_temp_splinfo_val-spl_no = ls_db_splinfo_val-spl_no
        AND ls_temp_splinfo_val-curtp = ls_db_splinfo_val-curtp.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_splinfo_val TO ls_splinfo_val.
      ls_splinfo_val-orig = 'EXTR'.
      ls_splinfo_val-check = 'X'.
      ls_splinfo_val-control = '@5D@'.
      MOVE-CORRESPONDING ls_splinfo_val TO ls_flag.
      ls_flag-error = 'IMPORT SPLINFO_VAL'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_splinfo_val TO gt_splinfo_val.
      CLEAR ls_splinfo_val.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_splinfo_val TO ls_flag.
    ls_flag-bukrs = ls_temp_splinfo_val-bukrs.
    ls_flag-belnr = ls_temp_splinfo_val-belnr.
    ls_flag-gjahr = ls_temp_splinfo_val-gjahr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_splinfo_val

*&---------------------------------------------------------------------*
*&      Form  choose_bse_clr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_bse_clr.
  DATA ls_bse_clr LIKE bse_clrmoddisp.
  DATA ls_db_bse_clr TYPE bse_clr.
  DATA ls_temp_bse_clr TYPE bse_clr.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_bse_clr INTO ls_db_bse_clr.
    LOOP AT gt_temp_bse_clr INTO ls_temp_bse_clr
      WHERE bukrs_clr = ls_db_bse_clr-bukrs_clr
      AND belnr_clr = ls_db_bse_clr-belnr_clr
      AND gjahr_clr = ls_db_bse_clr-gjahr_clr
      AND index_clr = ls_db_bse_clr-index_clr.
      IF ls_db_bse_clr = ls_temp_bse_clr.
        MOVE-CORRESPONDING ls_db_bse_clr TO ls_bse_clr.
        ls_bse_clr-orig = 'DTAB'.
        ls_bse_clr-check = 'X'.
        ls_bse_clr-control = '@5B@'.
        APPEND ls_bse_clr TO gt_bse_clr.
        CLEAR ls_bse_clr.
      ELSE.
        ASSIGN ls_db_bse_clr TO <fstruc_db>.
        ASSIGN ls_temp_bse_clr TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'DTAB'.
          ls_bse_clr-check = 'X'.
          ls_bse_clr-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
          MOVE-CORRESPONDING ls_temp_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'EXTR'.
          ls_bse_clr-check = ' '.
          ls_bse_clr-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'DTAB'.
          ls_bse_clr-check = 'X'.
          ls_bse_clr-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
          MOVE-CORRESPONDING ls_temp_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'EXTR'.
          ls_bse_clr-check = ' '.
          ls_bse_clr-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
        ELSE.
          MOVE-CORRESPONDING ls_temp_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'EXTR'.
          ls_bse_clr-check = ' '.
          ls_bse_clr-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
          MOVE-CORRESPONDING ls_db_bse_clr TO ls_bse_clr.
          ls_bse_clr-orig = 'DTAB'.
          ls_bse_clr-check = 'X'.
          ls_bse_clr-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_bse_clr TO gt_bse_clr.
          CLEAR ls_bse_clr.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_bse_clr TO ls_bse_clr.
      ls_bse_clr-orig = 'DTAB'.
      ls_bse_clr-check = 'X'.
      ls_bse_clr-control = '@5B@'.
      APPEND ls_bse_clr TO gt_bse_clr.
      CLEAR ls_bse_clr.
    ENDIF.
    MOVE-CORRESPONDING ls_bse_clr TO ls_flag.
    ls_flag-bukrs = ls_db_bse_clr-bukrs_clr.
    ls_flag-belnr = ls_db_bse_clr-belnr_clr.
    ls_flag-gjahr = ls_db_bse_clr-gjahr_clr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_bse_clr INTO ls_temp_bse_clr.
    LOOP AT gt_db_bse_clr INTO ls_db_bse_clr.
      IF ls_temp_bse_clr-bukrs_clr = ls_db_bse_clr-bukrs_clr
        AND ls_temp_bse_clr-belnr_clr = ls_db_bse_clr-belnr_clr
        AND ls_temp_bse_clr-gjahr_clr = ls_db_bse_clr-gjahr_clr
        AND ls_temp_bse_clr-index_clr = ls_db_bse_clr-index_clr.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_bse_clr TO ls_bse_clr.
      ls_bse_clr-orig = 'EXTR'.
      ls_bse_clr-check = 'X'.
      ls_bse_clr-control = '@5D@'.
      MOVE-CORRESPONDING ls_bse_clr TO ls_flag.
      ls_flag-error = 'IMPORT BSE_CLR'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_bse_clr TO gt_bse_clr.
      CLEAR ls_bse_clr.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_bse_clr TO ls_flag.
    ls_flag-bukrs = ls_temp_bse_clr-bukrs_clr.
    ls_flag-belnr = ls_temp_bse_clr-belnr_clr.
    ls_flag-gjahr = ls_temp_bse_clr-gjahr_clr.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_bse_clr

*&---------------------------------------------------------------------*
*&      Form  choose_glu1mod
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM choose_glu1mod.
  DATA ls_glu1mod LIKE glu1moddisp.
  DATA ls_db_glu1mod LIKE glu1mod.
  DATA ls_temp_glu1mod LIKE glu1mod.
  DATA flag_eq TYPE i.
  DATA field_db_count TYPE i.
  DATA field_temp_count TYPE i.
  DATA flag_found TYPE i.

  FIELD-SYMBOLS: <fstruc_db>, <ffield_db>, <fstruc_temp>, <ffield_temp>.

  LOOP AT gt_db_glu1mod INTO ls_db_glu1mod.
    LOOP AT gt_temp_glu1mod INTO ls_temp_glu1mod
      WHERE rbukrs = ls_db_glu1mod-rbukrs
      AND belnr = ls_db_glu1mod-belnr
      AND ryear = ls_db_glu1mod-ryear
      AND rldnr = ls_db_glu1mod-rldnr
      AND docln = ls_db_glu1mod-docln.
      IF ls_db_glu1mod = ls_temp_glu1mod.
        MOVE-CORRESPONDING ls_db_glu1mod TO ls_glu1mod.
        ls_glu1mod-orig = 'DTAB'.
        ls_glu1mod-check = 'X'.
        ls_glu1mod-control = '@5B@'.
        APPEND ls_glu1mod TO gt_glu1mod.
        CLEAR ls_glu1mod.
      ELSE.
        ASSIGN ls_db_glu1mod TO <fstruc_db>.
        ASSIGN ls_temp_glu1mod TO <fstruc_temp>.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_db> TO <ffield_db>.
          IF <ffield_db> IS NOT INITIAL.
            ADD 1 TO field_db_count.
          ENDIF.
          ASSIGN COMPONENT sy-index OF STRUCTURE <fstruc_temp>  TO <ffield_temp>.
          IF <ffield_temp> IS NOT INITIAL.
            ADD 1 TO field_temp_count.
          ENDIF.
          IF sy-subrc = 4.
            EXIT.
          ENDIF.
        ENDDO.
        IF field_db_count = field_temp_count.
          MOVE-CORRESPONDING ls_db_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'DTAB'.
          ls_glu1mod-check = 'X'.
          ls_glu1mod-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
          MOVE-CORRESPONDING ls_temp_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'EXTR'.
          ls_glu1mod-check = ' '.
          ls_glu1mod-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
        ELSEIF field_db_count > field_temp_count.
          MOVE-CORRESPONDING ls_db_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'DTAB'.
          ls_glu1mod-check = 'X'.
          ls_glu1mod-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
          MOVE-CORRESPONDING ls_temp_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'EXTR'.
          ls_glu1mod-check = ' '.
          ls_glu1mod-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
        ELSE.
          MOVE-CORRESPONDING ls_temp_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'EXTR'.
          ls_glu1mod-check = ' '.
          ls_glu1mod-control = '@5D@'.
          IF ls_flag-control NE '@5C@'.
            ls_flag-control = '@5D@'.
          ENDIF.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
          MOVE-CORRESPONDING ls_db_glu1mod TO ls_glu1mod.
          ls_glu1mod-orig = 'DTAB'.
          ls_glu1mod-check = 'X'.
          ls_glu1mod-control = '@5C@'.
          ls_flag-control = '@5C@'.
          APPEND ls_glu1mod TO gt_glu1mod.
          CLEAR ls_glu1mod.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 4.
      MOVE-CORRESPONDING ls_db_glu1mod TO ls_glu1mod.
      ls_glu1mod-orig = 'DTAB'.
      ls_glu1mod-check = 'X'.
      ls_glu1mod-control = '@5B@'.
      APPEND ls_glu1mod TO gt_glu1mod.
      CLEAR ls_glu1mod.
    ENDIF.
    MOVE-CORRESPONDING ls_glu1mod TO ls_flag.
    ls_flag-bukrs = ls_db_glu1mod-rbukrs.
    ls_flag-belnr = ls_db_glu1mod-belnr.
    ls_flag-gjahr = ls_db_glu1mod-ryear.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
  LOOP AT gt_temp_glu1mod INTO ls_temp_glu1mod.
    LOOP AT gt_db_glu1mod INTO ls_db_glu1mod.
      IF ls_temp_glu1mod-rbukrs = ls_db_glu1mod-rbukrs
        AND ls_temp_glu1mod-belnr = ls_db_glu1mod-belnr
        AND ls_temp_glu1mod-ryear = ls_db_glu1mod-ryear
        AND ls_temp_glu1mod-rldnr = ls_db_glu1mod-rldnr
        AND ls_temp_glu1mod-docln = ls_db_glu1mod-docln.
        flag_found = 1.
      ENDIF.
    ENDLOOP.
    IF flag_found = 0.
      MOVE-CORRESPONDING ls_temp_glu1mod TO ls_glu1mod.
      ls_glu1mod-orig = 'EXTR'.
      ls_glu1mod-check = 'X'.
      ls_glu1mod-control = '@5D@'.
      MOVE-CORRESPONDING ls_glu1mod TO ls_flag.
      ls_flag-error = 'IMPORT GL'.
      APPEND ls_flag TO gt_flag.
      APPEND ls_glu1mod TO gt_glu1mod.
      CLEAR ls_glu1mod.
    ENDIF.
    CLEAR flag_found.
    MOVE-CORRESPONDING ls_glu1mod TO ls_flag.
    ls_flag-bukrs = ls_glu1mod-rbukrs.
    ls_flag-belnr = ls_glu1mod-belnr.
    ls_flag-gjahr = ls_glu1mod-ryear.
    IF ls_flag-control IS NOT INITIAL
      AND ls_flag-control NE '@5B@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
    CLEAR ls_flag.
  ENDLOOP.
ENDFORM.                    "choose_glu1mod

***********************************************************************
* CHECK ACQUIRED DATA
***********************************************************************
FORM check_scenario.

  IF save_flag = 1.
    PERFORM consistency_check.
  ELSE.
    PERFORM check_balance_zero.
    PERFORM cross_check.
    IF acdoca_active = 0.
      PERFORM check_index.
      PERFORM check_superfluous.
    ENDIF.
  ENDIF.
ENDFORM.                    "check_scenario

*&---------------------------------------------------------------------*
*&      Form  check_index
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_index.

  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsad LIKE LINE OF gt_bsad.
  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ld_tabix TYPE i.

  IF gt_bseg IS NOT INITIAL.
    LOOP AT gt_bseg INTO ls_bseg.
      IF ls_bseg-control = '@5C@'.
        LOOP AT gt_bsas INTO ls_bsas
  WHERE bukrs = ls_bseg-bukrs
  AND belnr = ls_bseg-belnr
  AND gjahr = ls_bseg-gjahr
  AND buzei = ls_bseg-buzei.
          ls_bsas-control = '@5C@'.
          MODIFY gt_bsas FROM ls_bsas INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsid INTO ls_bsid
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsid-control = '@5C@'.
          MODIFY gt_bsid FROM ls_bsid INDEX sy-tabix.
        ENDLOOP.


        LOOP AT gt_bsad INTO ls_bsad
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsad-control = '@5C@'.
          MODIFY gt_bsad FROM ls_bsad INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsik INTO ls_bsik
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsik-control = '@5C@'.
          MODIFY gt_bsik FROM ls_bsik INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsak INTO ls_bsak
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsak-control = '@5C@'.
          MODIFY gt_bsak FROM ls_bsak INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsis INTO ls_bsis
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsis-control = '@5C@'.
          MODIFY gt_bsis FROM ls_bsis INDEX sy-tabix.
        ENDLOOP.
      ELSE.
        CLEAR ls_flag.
        ld_tabix = sy-tabix.
        IF ls_bseg-xkres = 'X'.
          CASE ls_bseg-koart.
            WHEN 'S'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsas INTO ls_bsas
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsas-hkont = ls_bseg-hkont
                    AND ls_bsas-augdt = ls_bseg-augdt
                    AND ls_bsas-augbl = ls_bseg-augbl
                    AND ls_bsas-dmbtr = ls_bseg-dmbtr
                    AND ls_bsas-wrbtr = ls_bseg-wrbtr.
                  ELSE.
                    ls_bsas-hkont = ls_bseg-hkont.
                    ls_bsas-augdt = ls_bseg-augdt.
                    ls_bsas-augbl = ls_bseg-augbl.
                    ls_bsas-dmbtr = ls_bseg-dmbtr.
                    ls_bsas-wrbtr = ls_bseg-wrbtr.
                    ls_bsas-control = '@5D@'.
                    ls_bsas-orig = 'CORR'.
                    MODIFY gt_bsas FROM ls_bsas INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ELSE.
                LOOP AT gt_bsis INTO ls_bsis
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsis-hkont = ls_bseg-hkont
                    AND ls_bsis-augdt = ls_bseg-augdt
                    AND ls_bsis-augbl = ls_bseg-augbl
                    AND ls_bsis-dmbtr = ls_bseg-dmbtr
                    AND ls_bsis-wrbtr = ls_bseg-wrbtr.
                  ELSE.
                    ls_bsis-hkont = ls_bseg-hkont.
                    ls_bsis-augdt = ls_bseg-augdt.
                    ls_bsis-augbl = ls_bseg-augbl.
                    ls_bsis-dmbtr = ls_bseg-dmbtr.
                    ls_bsis-wrbtr = ls_bseg-wrbtr.
                    ls_bsis-control = '@5D@'.
                    ls_bsis-orig = 'CORR'.
                    MODIFY gt_bsis FROM ls_bsis INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ENDIF.

            WHEN 'D'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsad INTO ls_bsad
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsad-hkont = ls_bseg-hkont
                    AND ls_bsad-augdt = ls_bseg-augdt
                    AND ls_bsad-augbl = ls_bseg-augbl
                    AND ls_bsad-dmbtr = ls_bseg-dmbtr
                    AND ls_bsad-wrbtr = ls_bseg-wrbtr
                    AND ls_bsad-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsad-hkont = ls_bseg-hkont.
                    ls_bsad-augdt = ls_bseg-augdt.
                    ls_bsad-augbl = ls_bseg-augbl.
                    ls_bsad-dmbtr = ls_bseg-dmbtr.
                    ls_bsad-wrbtr = ls_bseg-wrbtr.
                    ls_bsad-umskz = ls_bseg-umskz.
                    ls_bsad-control = '@5D@'.
                    ls_bsad-orig = 'CORR'.
                    MODIFY gt_bsad FROM ls_bsad INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ELSE.
                LOOP AT gt_bsid INTO ls_bsid
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsid-hkont = ls_bseg-hkont
                    AND ls_bsid-augdt = ls_bseg-augdt
                    AND ls_bsid-augbl = ls_bseg-augbl
                    AND ls_bsid-dmbtr = ls_bseg-dmbtr
                    AND ls_bsid-wrbtr = ls_bseg-wrbtr
                    AND ls_bsid-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsid-hkont = ls_bseg-hkont.
                    ls_bsid-augdt = ls_bseg-augdt.
                    ls_bsid-augbl = ls_bseg-augbl.
                    ls_bsid-dmbtr = ls_bseg-dmbtr.
                    ls_bsid-wrbtr = ls_bseg-wrbtr.
                    ls_bsid-umskz = ls_bseg-umskz.
                    ls_bsid-control = '@5D@'.
                    ls_bsid-orig = 'CORR'.
                    MODIFY gt_bsid FROM ls_bsid INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ENDIF.

            WHEN 'K'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsak INTO ls_bsak
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsak-hkont = ls_bseg-hkont
                    AND ls_bsak-augdt = ls_bseg-augdt
                    AND ls_bsak-augbl = ls_bseg-augbl
                    AND ls_bsak-dmbtr = ls_bseg-dmbtr
                    AND ls_bsak-wrbtr = ls_bseg-wrbtr
                    AND ls_bsak-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsak-hkont = ls_bseg-hkont.
                    ls_bsak-augdt = ls_bseg-augdt.
                    ls_bsak-augbl = ls_bseg-augbl.
                    ls_bsak-dmbtr = ls_bseg-dmbtr.
                    ls_bsak-wrbtr = ls_bseg-wrbtr.
                    ls_bsak-umskz = ls_bseg-umskz.
                    ls_bsak-control = '@5D@'.
                    ls_bsak-orig = 'CORR'.
                    MODIFY gt_bsak FROM ls_bsak INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ELSE.
                LOOP AT gt_bsik INTO ls_bsik
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsik-hkont = ls_bseg-hkont
                    AND ls_bsik-augdt = ls_bseg-augdt
                    AND ls_bsik-augbl = ls_bseg-augbl
                    AND ls_bsik-dmbtr = ls_bseg-dmbtr
                    AND ls_bsik-wrbtr = ls_bseg-wrbtr
                    AND ls_bsik-umskz = ls_bseg-umskz..
                  ELSE.
                    ls_bsik-hkont = ls_bseg-hkont.
                    ls_bsik-augdt = ls_bseg-augdt.
                    ls_bsik-augbl = ls_bseg-augbl.
                    ls_bsik-dmbtr = ls_bseg-dmbtr.
                    ls_bsik-wrbtr = ls_bseg-wrbtr.
                    ls_bsik-umskz = ls_bseg-umskz.
                    ls_bsik-control = '@5D@'.
                    ls_bsik-orig = 'CORR'.
                    MODIFY gt_bsik FROM ls_bsik INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag.
                ENDIF.
              ENDIF.
          ENDCASE.
        ENDIF.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsas INTO ls_bsas WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsas-bukrs
        AND belnr = ls_bsas-belnr
        AND buzei = ls_bsas-buzei
        AND gjahr = ls_bsas-gjahr.
        IF ls_bsas-hkont = ls_bseg-hkont
        AND ls_bsas-augdt = ls_bseg-augdt
        AND ls_bsas-augbl = ls_bseg-augbl
        AND ls_bsas-dmbtr = ls_bseg-dmbtr
        AND ls_bsas-wrbtr = ls_bseg-wrbtr.
        ELSE.
          ls_bsas-hkont = ls_bseg-hkont.
          ls_bsas-augdt = ls_bseg-augdt.
          ls_bsas-augbl = ls_bseg-augbl.
          ls_bsas-dmbtr = ls_bseg-dmbtr.
          ls_bsas-wrbtr = ls_bseg-wrbtr.
          ls_bsas-control = '@5D@'.
          ls_bsas-orig = 'CORR'.
          MODIFY gt_bsas FROM ls_bsas INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsas-control = '@5D@'.
        MODIFY gt_bsas FROM ls_bsas INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsas TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsis INTO ls_bsis WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsis-bukrs
        AND belnr = ls_bsis-belnr
        AND buzei = ls_bsis-buzei
        AND gjahr = ls_bsis-gjahr.
        IF ls_bsis-hkont = ls_bseg-hkont
        AND ls_bsis-augdt = ls_bseg-augdt
        AND ls_bsis-augbl = ls_bseg-augbl
        AND ls_bsis-dmbtr = ls_bseg-dmbtr
        AND ls_bsis-wrbtr = ls_bseg-wrbtr.
        ELSE.
          ls_bsis-hkont = ls_bseg-hkont.
          ls_bsis-augdt = ls_bseg-augdt.
          ls_bsis-augbl = ls_bseg-augbl.
          ls_bsis-dmbtr = ls_bseg-dmbtr.
          ls_bsis-wrbtr = ls_bseg-wrbtr.
          ls_bsis-control = '@5D@'.
          ls_bsis-orig = 'CORR'.
          MODIFY gt_bsis FROM ls_bsis INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsis-control = '@5C@'.
        MODIFY gt_bsis FROM ls_bsis INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsis TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsak INTO ls_bsak WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsak-bukrs
        AND belnr = ls_bsak-belnr
        AND buzei = ls_bsak-buzei
        AND gjahr = ls_bsak-gjahr.
        IF ls_bsak-hkont = ls_bseg-hkont
        AND ls_bsak-augdt = ls_bseg-augdt
        AND ls_bsak-augbl = ls_bseg-augbl
        AND ls_bsak-dmbtr = ls_bseg-dmbtr
        AND ls_bsak-wrbtr = ls_bseg-wrbtr
        AND ls_bsak-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsak-hkont = ls_bseg-hkont.
          ls_bsak-augdt = ls_bseg-augdt.
          ls_bsak-augbl = ls_bseg-augbl.
          ls_bsak-dmbtr = ls_bseg-dmbtr.
          ls_bsak-wrbtr = ls_bseg-wrbtr.
          ls_bsak-umskz = ls_bseg-umskz.
          ls_bsak-control = '@5D@'.
          ls_bsak-orig = 'CORR'.
          MODIFY gt_bsak FROM ls_bsak INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsak-control = '@5C@'.
        MODIFY gt_bsak FROM ls_bsak INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsak TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsik INTO ls_bsik WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsik-bukrs
        AND belnr = ls_bsik-belnr
        AND buzei = ls_bsik-buzei
        AND gjahr = ls_bsik-gjahr.
        IF ls_bsik-hkont = ls_bseg-hkont
        AND ls_bsik-augdt = ls_bseg-augdt
        AND ls_bsik-augbl = ls_bseg-augbl
        AND ls_bsik-dmbtr = ls_bseg-dmbtr
        AND ls_bsik-wrbtr = ls_bseg-wrbtr
        AND ls_bsik-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsik-hkont = ls_bseg-hkont.
          ls_bsik-augdt = ls_bseg-augdt.
          ls_bsik-augbl = ls_bseg-augbl.
          ls_bsik-dmbtr = ls_bseg-dmbtr.
          ls_bsik-wrbtr = ls_bseg-wrbtr.
          ls_bsik-umskz = ls_bseg-umskz.
          ls_bsik-control = '@5D@'.
          ls_bsik-orig = 'CORR'.
          MODIFY gt_bsik FROM ls_bsik INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsik-control = '@5C@'.
        MODIFY gt_bsik FROM ls_bsik INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsik TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsad INTO ls_bsad WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsad-bukrs
        AND belnr = ls_bsad-belnr
        AND buzei = ls_bsad-buzei
        AND gjahr = ls_bsad-gjahr.
        IF ls_bsad-hkont = ls_bseg-hkont
        AND ls_bsad-augdt = ls_bseg-augdt
        AND ls_bsad-augbl = ls_bseg-augbl
        AND ls_bsad-dmbtr = ls_bseg-dmbtr
        AND ls_bsad-wrbtr = ls_bseg-wrbtr
        AND ls_bsad-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsad-hkont = ls_bseg-hkont.
          ls_bsad-augdt = ls_bseg-augdt.
          ls_bsad-augbl = ls_bseg-augbl.
          ls_bsad-dmbtr = ls_bseg-dmbtr.
          ls_bsad-wrbtr = ls_bseg-wrbtr.
          ls_bsad-umskz = ls_bseg-umskz.
          ls_bsad-control = '@5D@'.
          ls_bsad-orig = 'CORR'.
          MODIFY gt_bsad FROM ls_bsad INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsad-control = '@5C@'.
        MODIFY gt_bsad FROM ls_bsad INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsad TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsid INTO ls_bsid WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bsid-bukrs
        AND belnr = ls_bsid-belnr
        AND buzei = ls_bsid-buzei
        AND gjahr = ls_bsid-gjahr.
        IF ls_bsid-hkont = ls_bseg-hkont
        AND ls_bsid-augdt = ls_bseg-augdt
        AND ls_bsid-augbl = ls_bseg-augbl
        AND ls_bsid-dmbtr = ls_bseg-dmbtr
        AND ls_bsid-wrbtr = ls_bseg-wrbtr
        AND ls_bsid-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsid-hkont = ls_bseg-hkont.
          ls_bsid-augdt = ls_bseg-augdt.
          ls_bsid-augbl = ls_bseg-augbl.
          ls_bsid-dmbtr = ls_bseg-dmbtr.
          ls_bsid-wrbtr = ls_bseg-wrbtr.
          ls_bsid-umskz = ls_bseg-umskz.
          ls_bsid-control = '@5D@'.
          ls_bsid-orig = 'CORR'.
          MODIFY gt_bsid FROM ls_bsid INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsid-control = '@5C@'.
        MODIFY gt_bsid FROM ls_bsid INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsid TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT gt_bseg_store INTO ls_bseg.
      IF ls_bseg-control = '@5C'.
        LOOP AT gt_bsas INTO ls_bsas
  WHERE bukrs = ls_bseg-bukrs
  AND belnr = ls_bseg-belnr
  AND gjahr = ls_bseg-gjahr
  AND buzei = ls_bseg-buzei.
          ls_bsas-control = '@5C@'.
          MODIFY gt_bsas FROM ls_bsas INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsid INTO ls_bsid
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsid-control = '@5C@'.
          MODIFY gt_bsid FROM ls_bsid INDEX sy-tabix.
        ENDLOOP.


        LOOP AT gt_bsad INTO ls_bsad
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsad-control = '@5C@'.
          MODIFY gt_bsad FROM ls_bsad INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsik INTO ls_bsik
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsik-control = '@5C@'.
          MODIFY gt_bsik FROM ls_bsik INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsak INTO ls_bsak
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsak-control = '@5C@'.
          MODIFY gt_bsak FROM ls_bsak INDEX sy-tabix.
        ENDLOOP.

        LOOP AT gt_bsis INTO ls_bsis
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
          ls_bsis-control = '@5C@'.
          MODIFY gt_bsis FROM ls_bsis INDEX sy-tabix.
        ENDLOOP.
      ELSE.
        CLEAR ls_flag.
        ld_tabix = sy-tabix.
        IF ls_bseg-xkres = 'X'.
          CASE ls_bseg-koart.
            WHEN 'S'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsas_store INTO ls_bsas
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsas-hkont = ls_bseg-hkont
                    AND ls_bsas-augdt = ls_bseg-augdt
                    AND ls_bsas-augbl = ls_bseg-augbl
                    AND ls_bsas-dmbtr = ls_bseg-dmbtr
                    AND ls_bsas-wrbtr = ls_bseg-wrbtr.
                  ELSE.
                    ls_bsas-hkont = ls_bseg-hkont.
                    ls_bsas-augdt = ls_bseg-augdt.
                    ls_bsas-augbl = ls_bseg-augbl.
                    ls_bsas-dmbtr = ls_bseg-dmbtr.
                    ls_bsas-wrbtr = ls_bseg-wrbtr.
                    ls_bsas-control = '@5D@'.
                    ls_bsas-orig = 'CORR'.
                    MODIFY gt_bsas_store FROM ls_bsas INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ELSE.
                LOOP AT gt_bsis_store INTO ls_bsis
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsis-hkont = ls_bseg-hkont
                    AND ls_bsis-augdt = ls_bseg-augdt
                    AND ls_bsis-augbl = ls_bseg-augbl
                    AND ls_bsis-dmbtr = ls_bseg-dmbtr
                    AND ls_bsis-wrbtr = ls_bseg-wrbtr.
                  ELSE.
                    ls_bsis-hkont = ls_bseg-hkont.
                    ls_bsis-augdt = ls_bseg-augdt.
                    ls_bsis-augbl = ls_bseg-augbl.
                    ls_bsis-dmbtr = ls_bseg-dmbtr.
                    ls_bsis-wrbtr = ls_bseg-wrbtr.
                    ls_bsis-control = '@5D@'.
                    ls_bsis-orig = 'CORR'.
                    MODIFY gt_bsis_store FROM ls_bsis INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ENDIF.

            WHEN 'D'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsad_store INTO ls_bsad
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsad-hkont = ls_bseg-hkont
                    AND ls_bsad-augdt = ls_bseg-augdt
                    AND ls_bsad-augbl = ls_bseg-augbl
                    AND ls_bsad-dmbtr = ls_bseg-dmbtr
                    AND ls_bsad-wrbtr = ls_bseg-wrbtr
                    AND ls_bsad-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsad-hkont = ls_bseg-hkont.
                    ls_bsad-augdt = ls_bseg-augdt.
                    ls_bsad-augbl = ls_bseg-augbl.
                    ls_bsad-dmbtr = ls_bseg-dmbtr.
                    ls_bsad-wrbtr = ls_bseg-wrbtr.
                    ls_bsad-umskz = ls_bseg-umskz.
                    ls_bsad-control = '@5D@'.
                    ls_bsad-orig = 'CORR'.
                    MODIFY gt_bsad_store FROM ls_bsad INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ELSE.
                LOOP AT gt_bsid_store INTO ls_bsid
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsid-hkont = ls_bseg-hkont
                    AND ls_bsid-augdt = ls_bseg-augdt
                    AND ls_bsid-augbl = ls_bseg-augbl
                    AND ls_bsid-dmbtr = ls_bseg-dmbtr
                    AND ls_bsid-wrbtr = ls_bseg-wrbtr
                    AND ls_bsid-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsid-hkont = ls_bseg-hkont.
                    ls_bsid-augdt = ls_bseg-augdt.
                    ls_bsid-augbl = ls_bseg-augbl.
                    ls_bsid-dmbtr = ls_bseg-dmbtr.
                    ls_bsid-wrbtr = ls_bseg-wrbtr.
                    ls_bsid-umskz = ls_bseg-umskz.
                    ls_bsid-control = '@5D@'.
                    ls_bsid-orig = 'CORR'.
                    MODIFY gt_bsid_store FROM ls_bsid INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ENDIF.

            WHEN 'K'.
              IF ls_bseg-augbl IS NOT INITIAL.
                LOOP AT gt_bsak_store INTO ls_bsak
                  WHERE bukrs = ls_bseg-bukrs
                  AND belnr = ls_bseg-belnr
                  AND gjahr = ls_bseg-gjahr
                  AND buzei = ls_bseg-buzei.
                  IF ls_bsak-hkont = ls_bseg-hkont
                    AND ls_bsak-augdt = ls_bseg-augdt
                    AND ls_bsak-augbl = ls_bseg-augbl
                    AND ls_bsak-dmbtr = ls_bseg-dmbtr
                    AND ls_bsak-wrbtr = ls_bseg-wrbtr
                    AND ls_bsak-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsak-hkont = ls_bseg-hkont.
                    ls_bsak-augdt = ls_bseg-augdt.
                    ls_bsak-augbl = ls_bseg-augbl.
                    ls_bsak-dmbtr = ls_bseg-dmbtr.
                    ls_bsak-wrbtr = ls_bseg-wrbtr.
                    ls_bsak-umskz = ls_bseg-umskz.
                    ls_bsak-control = '@5D@'.
                    ls_bsak-orig = 'CORR'.
                    MODIFY gt_bsak_store FROM ls_bsak INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ELSE.
                LOOP AT gt_bsik_store INTO ls_bsik
              WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei.
                  IF ls_bsik-hkont = ls_bseg-hkont
                    AND ls_bsik-augdt = ls_bseg-augdt
                    AND ls_bsik-augbl = ls_bseg-augbl
                    AND ls_bsik-dmbtr = ls_bseg-dmbtr
                    AND ls_bsik-wrbtr = ls_bseg-wrbtr
                    AND ls_bsik-umskz = ls_bseg-umskz.
                  ELSE.
                    ls_bsik-hkont = ls_bseg-hkont.
                    ls_bsik-augdt = ls_bseg-augdt.
                    ls_bsik-augbl = ls_bseg-augbl.
                    ls_bsik-dmbtr = ls_bseg-dmbtr.
                    ls_bsik-wrbtr = ls_bseg-wrbtr.
                    ls_bsik-umskz = ls_bseg-umskz.
                    ls_bsik-control = '@5D@'.
                    ls_bsik-orig = 'CORR'.
                    MODIFY gt_bsik_store FROM ls_bsik INDEX sy-tabix.
                    MOVE-CORRESPONDING ls_bseg TO ls_flag.
                    ls_flag-error = 'INDEX MISMATCH'.
                    APPEND ls_flag TO gt_flag_store.
                  ENDIF.
                ENDLOOP.
                IF sy-subrc = 4.
                  ls_bseg-control = '@5D@'.
                  MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
                  ls_flag-error = 'INDEX MISSING'.
                  MOVE-CORRESPONDING ls_bseg TO ls_flag.
                  APPEND ls_flag TO gt_flag_store.
                ENDIF.
              ENDIF.
          ENDCASE.
        ENDIF.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsas_store INTO ls_bsas WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsas-bukrs
        AND belnr = ls_bsas-belnr
        AND buzei = ls_bsas-buzei
        AND gjahr = ls_bsas-gjahr.
        IF ls_bsas-hkont = ls_bseg-hkont
        AND ls_bsas-augdt = ls_bseg-augdt
        AND ls_bsas-augbl = ls_bseg-augbl
        AND ls_bsas-dmbtr = ls_bseg-dmbtr
        AND ls_bsas-wrbtr = ls_bseg-wrbtr.
        ELSE.
          ls_bsas-hkont = ls_bseg-hkont.
          ls_bsas-augdt = ls_bseg-augdt.
          ls_bsas-augbl = ls_bseg-augbl.
          ls_bsas-dmbtr = ls_bseg-dmbtr.
          ls_bsas-wrbtr = ls_bseg-wrbtr.
          ls_bsas-control = '@5D@'.
          ls_bsas-orig = 'CORR'.
          MODIFY gt_bsas_store FROM ls_bsas INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsas-control = '@5D@'.
        MODIFY gt_bsas_store FROM ls_bsas INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsas TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsis_store INTO ls_bsis WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsis-bukrs
        AND belnr = ls_bsis-belnr
        AND buzei = ls_bsis-buzei
        AND gjahr = ls_bsis-gjahr.
        IF ls_bsis-hkont = ls_bseg-hkont
        AND ls_bsis-augdt = ls_bseg-augdt
        AND ls_bsis-augbl = ls_bseg-augbl
        AND ls_bsis-dmbtr = ls_bseg-dmbtr
        AND ls_bsis-wrbtr = ls_bseg-wrbtr.
        ELSE.
          ls_bsis-hkont = ls_bseg-hkont.
          ls_bsis-augdt = ls_bseg-augdt.
          ls_bsis-augbl = ls_bseg-augbl.
          ls_bsis-dmbtr = ls_bseg-dmbtr.
          ls_bsis-wrbtr = ls_bseg-wrbtr.
          ls_bsis-control = '@5D@'.
          ls_bsis-orig = 'CORR'.
          MODIFY gt_bsis_store FROM ls_bsis INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsis-control = '@5C@'.
        MODIFY gt_bsis_store FROM ls_bsis INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsis TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsak_store INTO ls_bsak WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsak-bukrs
        AND belnr = ls_bsak-belnr
        AND buzei = ls_bsak-buzei
        AND gjahr = ls_bsak-gjahr.
        IF ls_bsak-hkont = ls_bseg-hkont
        AND ls_bsak-augdt = ls_bseg-augdt
        AND ls_bsak-augbl = ls_bseg-augbl
        AND ls_bsak-dmbtr = ls_bseg-dmbtr
        AND ls_bsak-wrbtr = ls_bseg-wrbtr
        AND ls_bsak-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsak-hkont = ls_bseg-hkont.
          ls_bsak-augdt = ls_bseg-augdt.
          ls_bsak-augbl = ls_bseg-augbl.
          ls_bsak-dmbtr = ls_bseg-dmbtr.
          ls_bsak-wrbtr = ls_bseg-wrbtr.
          ls_bsak-umskz = ls_bseg-umskz.
          ls_bsak-control = '@5D@'.
          ls_bsak-orig = 'CORR'.
          MODIFY gt_bsak_store FROM ls_bsak INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsak-control = '@5C@'.
        MODIFY gt_bsak_store FROM ls_bsak INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsak TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsik_store INTO ls_bsik WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsik-bukrs
        AND belnr = ls_bsik-belnr
        AND buzei = ls_bsik-buzei
        AND gjahr = ls_bsik-gjahr.
        IF ls_bsik-hkont = ls_bseg-hkont
        AND ls_bsik-augdt = ls_bseg-augdt
        AND ls_bsik-augbl = ls_bseg-augbl
        AND ls_bsik-dmbtr = ls_bseg-dmbtr
        AND ls_bsik-wrbtr = ls_bseg-wrbtr
        AND ls_bsik-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsik-hkont = ls_bseg-hkont.
          ls_bsik-augdt = ls_bseg-augdt.
          ls_bsik-augbl = ls_bseg-augbl.
          ls_bsik-dmbtr = ls_bseg-dmbtr.
          ls_bsik-wrbtr = ls_bseg-wrbtr.
          ls_bsik-umskz = ls_bseg-umskz.
          ls_bsik-control = '@5D@'.
          ls_bsik-orig = 'CORR'.
          MODIFY gt_bsik_store FROM ls_bsik INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsik-control = '@5C@'.
        MODIFY gt_bsik_store FROM ls_bsik INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsik TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsad_store INTO ls_bsad WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsad-bukrs
        AND belnr = ls_bsad-belnr
        AND buzei = ls_bsad-buzei
        AND gjahr = ls_bsad-gjahr.
        IF ls_bsad-hkont = ls_bseg-hkont
        AND ls_bsad-augdt = ls_bseg-augdt
        AND ls_bsad-augbl = ls_bseg-augbl
        AND ls_bsad-dmbtr = ls_bseg-dmbtr
        AND ls_bsad-wrbtr = ls_bseg-wrbtr
        AND ls_bsad-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsad-hkont = ls_bseg-hkont.
          ls_bsad-augdt = ls_bseg-augdt.
          ls_bsad-augbl = ls_bseg-augbl.
          ls_bsad-dmbtr = ls_bseg-dmbtr.
          ls_bsad-wrbtr = ls_bseg-wrbtr.
          ls_bsad-umskz = ls_bseg-umskz.
          ls_bsad-control = '@5D@'.
          ls_bsad-orig = 'CORR'.
          MODIFY gt_bsad_store FROM ls_bsad INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsad-control = '@5C@'.
        MODIFY gt_bsad_store FROM ls_bsad INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsad TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsid_store INTO ls_bsid WHERE control NE '@5C@'.
      ld_tabix = sy-tabix.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE bukrs = ls_bsid-bukrs
        AND belnr = ls_bsid-belnr
        AND buzei = ls_bsid-buzei
        AND gjahr = ls_bsid-gjahr.
        IF ls_bsid-hkont = ls_bseg-hkont
        AND ls_bsid-augdt = ls_bseg-augdt
        AND ls_bsid-augbl = ls_bseg-augbl
        AND ls_bsid-dmbtr = ls_bseg-dmbtr
        AND ls_bsid-wrbtr = ls_bseg-wrbtr
        AND ls_bsid-umskz = ls_bseg-umskz.
        ELSE.
          ls_bsid-hkont = ls_bseg-hkont.
          ls_bsid-augdt = ls_bseg-augdt.
          ls_bsid-augbl = ls_bseg-augbl.
          ls_bsid-dmbtr = ls_bseg-dmbtr.
          ls_bsid-wrbtr = ls_bseg-wrbtr.
          ls_bsid-umskz = ls_bseg-umskz.
          ls_bsid-control = '@5D@'.
          ls_bsid-orig = 'CORR'.
          MODIFY gt_bsid_store FROM ls_bsid INDEX sy-tabix.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          ls_flag-error = 'INDEX_MISMATCH'.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bsid-control = '@5C@'.
        MODIFY gt_bsid_store FROM ls_bsid INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsid TO ls_flag.
        ls_flag-error = 'BSEG MISSING'.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    "check_index


*&---------------------------------------------------------------------*
*&      Form  check_balance_zero
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_balance_zero.
  DATA ls_bkpf LIKE bkpfmoddisp.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_splinfo_val LIKE splinfovalmoddisp.
  DATA ls_splinfo LIKE splinfomoddisp.
  DATA ld_dmbtr TYPE dmbtr.
  DATA ld_dmbe2 TYPE dmbe2.
  DATA ld_dmbe3 TYPE dmbe3.
  DATA ld_pswbt_splinfo TYPE pswbt.
  DATA sum_splinfo_val_wrbtr TYPE wrbtr.
  DATA sum_splinfo_val_dmbtr TYPE dmbtr.
  DATA sum_splinfo_pswbt TYPE pswbt.
  DATA ld_b_inactive TYPE c LENGTH 1.
  DATA flag_pswsl TYPE i.
  DATA ld_split TYPE c LENGTH 1.
  DATA ls_glu1 LIKE LINE OF gt_glu1.
  DATA ld_tabix TYPE sy-tabix.

  IF gt_bkpf IS NOT INITIAL.

    LOOP AT gt_bkpf INTO ls_bkpf.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE belnr = ls_bkpf-belnr
        AND bukrs = ls_bkpf-bukrs
        AND gjahr = ls_bkpf-gjahr
        AND ( check = 'X' OR check = 'E' ).
        ld_tabix = sy-tabix.
        IF ls_bseg-shkzg = 'S'.
          ld_dmbtr = ld_dmbtr + ls_bseg-dmbtr.
          ld_dmbe2 = ld_dmbe2 + ls_bseg-dmbe2.
          ld_dmbe3 = ld_dmbe3 + ls_bseg-dmbe3.
        ELSE.
          ld_dmbtr = ld_dmbtr - ls_bseg-dmbtr.
          ld_dmbe2 = ld_dmbe2 - ls_bseg-dmbe2.
          ld_dmbe3 = ld_dmbe3 - ls_bseg-dmbe3.
        ENDIF.
*      IF ld_pswsl IS INITIAL.
*        ld_pswsl = ls_bseg-pswsl.
*      ELSE.
*        IF ld_pswsl NE ls_bseg-pswsl.
*          flag_pswsl = 1.
*        ENDIF.
*      ENDIF.

        IF gd_mass = 'X'.
          ld_b_inactive = gd_b_inactive.
        ELSE.
          IF gs_fagl_activec-splitmethd IS NOT INITIAL.
            SELECT SINGLE b_inactive
              INTO ld_b_inactive
              FROM fagl_split_actc
              WHERE bukrs = ls_bseg-bukrs.
          ELSE.
            ld_b_inactive = 'X'.
          ENDIF.
        ENDIF.

        IF ld_b_inactive IS INITIAL.
          CLEAR ld_split.
          IF ls_bseg-xopvw = 'X'.
            ld_split = 'X'.
          ELSE.
            READ TABLE gt_glu1 INTO ls_glu1
                               WITH KEY rbukrs = ls_bseg-bukrs
                                        belnr = ls_bseg-belnr
                                        gjahr = ls_bseg-gjahr
                                        buzei = ls_bseg-buzei.
            IF ls_glu1-xsplitmod = 'X'.
              ld_split = 'X'.
            ENDIF.
          ENDIF.
        ENDIF.


        IF ld_split = 'X'.
          LOOP AT gt_splinfo INTO ls_splinfo
         WHERE belnr = ls_bkpf-belnr
         AND bukrs = ls_bkpf-bukrs
         AND gjahr = ls_bkpf-gjahr
         AND buzei = ls_bseg-buzei
         AND ( check = 'X' OR check = 'E' ).
            sum_splinfo_pswbt = sum_splinfo_pswbt + ls_splinfo-pswbt.

            LOOP AT gt_splinfo_val INTO ls_splinfo_val
              WHERE belnr = ls_bkpf-belnr
              AND bukrs = ls_bkpf-bukrs
              AND gjahr = ls_bkpf-gjahr
              AND buzei = ls_splinfo-buzei
              AND spl_no = ls_splinfo-spl_no
              AND ( check = 'X' OR check = 'E' ).
              IF ls_splinfo_val-curtp = '00'.
                sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr + ls_splinfo_val-wrbtr.
              ELSEIF ls_splinfo_val-curtp = '10'.
                sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr + ls_splinfo_val-wrbtr.
              ENDIF.
            ENDLOOP.
          ENDLOOP.

          IF ls_bseg-shkzg = 'H'.
            sum_splinfo_pswbt = sum_splinfo_pswbt * -1.
            sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr * -1.
            sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr * -1.
          ENDIF.

          IF bseg-xopvw = 'X'.
            ld_split = 'X'.
          ENDIF.

          IF ls_bseg-pswbt = sum_splinfo_pswbt
      AND ls_bseg-dmbtr = sum_splinfo_val_dmbtr
      AND ls_bseg-wrbtr = sum_splinfo_val_wrbtr.
          ELSE.
            ls_bseg-control = '@5C@'.
            ls_bseg-error = 'Err. Sum Split'.
            MODIFY gt_bseg FROM ls_bseg INDEX ld_tabix.
            CLEAR ls_flag.
            MOVE-CORRESPONDING ls_bseg TO ls_flag.
            APPEND ls_flag TO gt_flag.
            IF ls_bseg-pswbt NE sum_splinfo_pswbt.
              LOOP AT gt_splinfo INTO ls_splinfo
                     WHERE belnr = ls_bkpf-belnr
         AND bukrs = ls_bkpf-bukrs
         AND gjahr = ls_bkpf-gjahr
         AND buzei = ls_bseg-buzei
         AND ( check = 'X' OR check = 'E' ).
                ls_splinfo-control = '@5C@'.
                ls_splinfo-error = 'Err. Sum Split'.
                MODIFY gt_splinfo FROM ls_splinfo INDEX sy-tabix.
                CLEAR ls_flag.
                MOVE-CORRESPONDING ls_splinfo TO ls_flag.
                APPEND ls_flag TO gt_flag.
              ENDLOOP.
            ENDIF.
            IF ls_bseg-dmbtr NE sum_splinfo_val_dmbtr
              OR ls_bseg-wrbtr NE sum_splinfo_val_wrbtr.
              LOOP AT gt_splinfo_val INTO ls_splinfo_val
       WHERE belnr = ls_bkpf-belnr
    AND bukrs = ls_bkpf-bukrs
    AND gjahr = ls_bkpf-gjahr
    AND buzei = ls_bseg-buzei
    AND ( check = 'X' OR check = 'E' ).
                ls_splinfo_val-control = '@5C@'.
                ls_splinfo_val-error = 'Err. Sum Split'.
                MODIFY gt_splinfo_val FROM ls_splinfo_val INDEX sy-tabix.
                CLEAR ls_flag.
                MOVE-CORRESPONDING ls_splinfo_val TO ls_flag.
                APPEND ls_flag TO gt_flag.
              ENDLOOP.
            ENDIF.
          ENDIF.
          CLEAR: sum_splinfo_pswbt, sum_splinfo_val_dmbtr, sum_splinfo_val_wrbtr.
        ENDIF.
      ENDLOOP.


      IF  ld_dmbtr = 0
        AND ld_dmbe2 = 0
        AND ld_dmbe3 = 0.
      ELSE.
        LOOP AT gt_bseg INTO ls_bseg
          WHERE bukrs = ls_bkpf-bukrs
          AND gjahr = ls_bkpf-gjahr
          AND belnr = ls_bkpf-belnr.
          ls_bseg-control = '@5C@'.
          ls_bseg-error = 'Balance NE 0'.
          MODIFY gt_bseg FROM ls_bseg INDEX sy-tabix.
          CLEAR ls_flag.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          APPEND ls_flag TO gt_flag.
        ENDLOOP.
      ENDIF.

      CLEAR: ld_dmbtr, ld_dmbe2, ld_dmbe3.

    ENDLOOP.
  ELSE.
    LOOP AT gt_bkpf_store INTO ls_bkpf.
      LOOP AT gt_bseg_store INTO ls_bseg
        WHERE belnr = ls_bkpf-belnr
        AND bukrs = ls_bkpf-bukrs
        AND gjahr = ls_bkpf-gjahr
        AND ( check = 'X' OR check = 'E' ).
        ld_tabix = sy-tabix.
        IF ls_bseg-shkzg = 'S'.
          ld_dmbtr = ld_dmbtr + ls_bseg-dmbtr.
          ld_dmbe2 = ld_dmbe2 + ls_bseg-dmbe2.
          ld_dmbe3 = ld_dmbe3 + ls_bseg-dmbe3.
        ELSE.
          ld_dmbtr = ld_dmbtr - ls_bseg-dmbtr.
          ld_dmbe2 = ld_dmbe2 - ls_bseg-dmbe2.
          ld_dmbe3 = ld_dmbe3 - ls_bseg-dmbe3.
        ENDIF.
*      IF ld_pswsl IS INITIAL.
*        ld_pswsl = ls_bseg-pswsl.
*      ELSE.
*        IF ld_pswsl NE ls_bseg-pswsl.
*          flag_pswsl = 1.
*        ENDIF.
*      ENDIF.

        IF gd_mass = 'X'.
          ld_b_inactive = gd_b_inactive.
        ELSE.
          IF gs_fagl_activec-splitmethd IS NOT INITIAL.
            SELECT SINGLE b_inactive
              INTO ld_b_inactive
              FROM fagl_split_actc
              WHERE bukrs = ls_bseg-bukrs.
          ELSE.
            ld_b_inactive = 'X'.
          ENDIF.
        ENDIF.

        IF ld_b_inactive IS INITIAL.
          IF ls_bseg-xopvw = 'X'.
            ld_split = 'X'.
          ELSE.
            READ TABLE gt_glu1 INTO ls_glu1
                               WITH KEY rbukrs = ls_bseg-bukrs
                                        belnr = ls_bseg-belnr
                                        gjahr = ls_bseg-gjahr
                                        buzei = ls_bseg-buzei.
            IF ls_glu1-xsplitmod = 'X'.
              ld_split = 'X'.
            ENDIF.
          ENDIF.
        ENDIF.


        IF ld_split = 'X'.
          LOOP AT gt_splinfo_store INTO ls_splinfo
         WHERE belnr = ls_bkpf-belnr
         AND bukrs = ls_bkpf-bukrs
         AND gjahr = ls_bkpf-gjahr
         AND buzei = ls_bseg-buzei
         AND ( check = 'X' OR check = 'E' ).
            sum_splinfo_pswbt = sum_splinfo_pswbt + ls_splinfo-pswbt.

            LOOP AT gt_splinfo_val_store INTO ls_splinfo_val
              WHERE belnr = ls_bkpf-belnr
              AND bukrs = ls_bkpf-bukrs
              AND gjahr = ls_bkpf-gjahr
              AND buzei = ls_splinfo-buzei
              AND spl_no = ls_splinfo-spl_no
              AND ( check = 'X' OR check = 'E' ).
              IF ls_splinfo_val-curtp = '00'.
                sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr + ls_splinfo_val-wrbtr.
              ELSEIF ls_splinfo_val-curtp = '10'.
                sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr + ls_splinfo_val-wrbtr.
              ENDIF.
            ENDLOOP.
          ENDLOOP.

          IF ls_bseg-shkzg = 'H'.
            sum_splinfo_pswbt = sum_splinfo_pswbt * -1.
            sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr * -1.
            sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr * -1.
          ENDIF.

          IF ls_bseg-pswbt = sum_splinfo_pswbt
      AND ls_bseg-dmbtr = sum_splinfo_val_dmbtr
      AND ls_bseg-wrbtr = sum_splinfo_val_wrbtr.
          ELSE.
            ls_bseg-control = '@5C@'.
            ls_bseg-error = 'Balance NE 0'.
            MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
            CLEAR ls_flag.
            MOVE-CORRESPONDING ls_bseg TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
            IF ls_bseg-pswbt NE sum_splinfo_pswbt.
              LOOP AT gt_splinfo_store INTO ls_splinfo
                     WHERE belnr = ls_bkpf-belnr
         AND bukrs = ls_bkpf-bukrs
         AND gjahr = ls_bkpf-gjahr
         AND buzei = ls_bseg-buzei
         AND ( check = 'X' OR check = 'E' ).
                ls_splinfo-control = '@5C@'.
                ls_splinfo-error = 'Balance NE 0'.
                MODIFY gt_splinfo_store FROM ls_splinfo INDEX sy-tabix.
                CLEAR ls_flag.
                MOVE-CORRESPONDING ls_splinfo TO ls_flag.
                APPEND ls_flag TO gt_flag_store.
              ENDLOOP.
            ENDIF.
            IF ls_bseg-dmbtr NE sum_splinfo_val_dmbtr
              OR ls_bseg-wrbtr NE sum_splinfo_val_wrbtr.
              LOOP AT gt_splinfo_val_store INTO ls_splinfo_val
       WHERE belnr = ls_bkpf-belnr
    AND bukrs = ls_bkpf-bukrs
    AND gjahr = ls_bkpf-gjahr
    AND buzei = ls_bseg-buzei
    AND ( check = 'X' OR check = 'E' ).
                ls_splinfo_val-control = '@5C@'.
                ls_splinfo_val-error = 'Balance NE 0'.
                MODIFY gt_splinfo_val_store FROM ls_splinfo_val INDEX sy-tabix.
                CLEAR ls_flag.
                MOVE-CORRESPONDING ls_splinfo_val TO ls_flag.
                APPEND ls_flag TO gt_flag_store.
              ENDLOOP.
            ENDIF.
          ENDIF.
          CLEAR: sum_splinfo_pswbt, sum_splinfo_val_dmbtr, sum_splinfo_val_wrbtr.

        ENDIF.
      ENDLOOP.
      IF  ld_dmbtr = 0
        AND ld_dmbe2 = 0
        AND ld_dmbe3 = 0.
      ELSE.
        LOOP AT gt_bseg_store INTO ls_bseg
          WHERE bukrs = ls_bkpf-bukrs
          AND gjahr = ls_bkpf-gjahr
          AND belnr = ls_bkpf-belnr.
          ls_bseg-control = '@5C@'.
          ls_bseg-error = 'Balance NE 0'.
          MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
          CLEAR ls_flag.
          MOVE-CORRESPONDING ls_bseg TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDLOOP.
      ENDIF.

      CLEAR: ld_dmbtr, ld_dmbe2, ld_dmbe3.

    ENDLOOP.
  ENDIF.
ENDFORM.                    "check_balance_zero



***********************************************************************
* BUILD MISSING DATA
***********************************************************************
FORM build_scenario.
  DATA ld_doccounter TYPE i.

  IF p_build IS NOT INITIAL.
    PERFORM build_bkpf.
    PERFORM build_bseg.
    PERFORM build_gl.

    IF acdoca_active = 0.
      PERFORM build_indexes.
    ENDIF.

    IF gs_fagl_activec-active = 'X'
      AND gs_fagl_activec-splitmethd IS NOT INITIAL.
      PERFORM build_splinfo.
    ENDIF.

  ELSE.
    IF p_bbkpf IS NOT INITIAL.
      PERFORM build_bkpf.
    ENDIF.

    IF p_bbseg IS NOT INITIAL.
      PERFORM build_bseg.
    ENDIF.

    IF p_bindex IS NOT INITIAL AND acdoca_active = 0.
      PERFORM build_indexes.
    ENDIF.

    IF p_bsplit IS NOT INITIAL.
      IF gs_fagl_activec-active = 'X'
        AND gs_fagl_activec-splitmethd IS NOT INITIAL.
        PERFORM build_splinfo.
      ENDIF.
    ENDIF.

    IF p_bglu1 IS NOT INITIAL.
      PERFORM build_gl.
    ENDIF.
  ENDIF.

  CLEAR ld_doccounter.
  ld_doccounter = lines( gt_bkpf ).
  ADD ld_doccounter TO gd_doccounter.
ENDFORM.                    "build_scenario

*&---------------------------------------------------------------------*
*&      Form  build_bkpf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_bkpf.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_bkpf LIKE bkpfmoddisp.
  DATA ls_glu1mod LIKE glu1moddisp.
  DATA ls_bseg_add LIKE bseg_addmoddisp.
  DATA ls_bsis LIKE bsismoddisp.
  DATA ls_bsas LIKE bsasmoddisp.
  DATA ls_bsik LIKE bsikmoddisp.
  DATA ls_bsak LIKE bsakmoddisp.
  DATA ls_bsid LIKE bsidmoddisp.
  DATA ls_bsad LIKE bsadmoddisp.
  DATA ls_bsec LIKE bsecmoddisp.
  DATA ls_bsed LIKE bsedmoddisp.
  DATA ls_bset LIKE bsetmoddisp.
  DATA ls_splinfo LIKE splinfomoddisp.
  DATA ls_splinfo_val LIKE splinfovalmoddisp.
  DATA ls_bse_clr LIKE bse_clrmoddisp.

  DATA ls_glu1 TYPE glu1.
  DATA lt_glu1 TYPE TABLE OF glu1.
  DATA ls_acccr TYPE acccr.
  DATA lt_acccr TYPE TABLE OF acccr.
  DATA lt_accit TYPE TABLE OF accit.
  DATA ls_accit TYPE accit.
  DATA ls_acchd TYPE acchd.
  DATA lt_acchd TYPE TABLE OF acchd.

  DATA ls_bkpf_app LIKE ls_bkpf.
  DATA lt_bkpf_build LIKE TABLE OF ls_bkpf.
  DATA ls_bkpf_select TYPE bkpf.

  DATA ld_count TYPE i.

  DATA lt_map TYPE TABLE OF fagl_tldgrp_map.
  DATA ls_map TYPE fagl_tldgrp_map.
  DATA lt_map_keep TYPE TABLE OF fagl_tldgrp_map.
  DATA ls_map_keep TYPE fagl_tldgrp_map.

  DATA ls_x001 TYPE x001.
  DATA ld_hbstat TYPE bkpf-bstat.
  FIELD-SYMBOLS <ld_hbstat> TYPE any.

  SELECT * FROM fagl_tldgrp_map INTO TABLE gt_fagl_tldgrp_map.

  LOOP AT gt_bseg INTO ls_bseg.
    IF acdoca_active = 1.
      ASSIGN COMPONENT 'H_BSTAT' OF STRUCTURE ls_bseg TO <ld_hbstat>.
      ld_hbstat = <ld_hbstat>.
      IF ld_hbstat NE ' ' .
        ADD 1 TO ld_count.
      ELSE.
        LOOP AT gt_bkpf INTO ls_bkpf
          WHERE bukrs = ls_bseg-bukrs
          AND belnr = ls_bseg-belnr
          AND gjahr = ls_bseg-gjahr.
          ADD 1 TO ld_count.
          EXIT.
        ENDLOOP.
      ENDIF.
    ELSE.
      SELECT SINGLE bstat FROM bkpf
        INTO ld_hbstat
        WHERE bukrs = ls_bseg-bukrs
        AND belnr = ls_bseg-belnr
        AND gjahr = ls_bseg-gjahr.
      IF sy-subrc = 0.
        ADD 1 TO ld_count.
      ELSEIF sy-subrc = 4.
        READ TABLE gt_glu1mod INTO ls_glu1mod WITH KEY
    rbukrs = ls_bseg-bukrs
    gjahr = ls_bseg-gjahr
    belnr = ls_bseg-belnr
    buzei = ls_bseg-buzei.
        IF sy-subrc = 0.
          IF ls_glu1mod-bstat = ' '.
            ADD 1 TO ld_count.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ld_count = 0.
      MOVE-CORRESPONDING ls_bseg TO ls_bkpf.
      ls_bkpf-bstat = ' '.
      APPEND ls_bkpf TO lt_bkpf_build.
      CLEAR ld_count.
    ENDIF.
  ENDLOOP.

  CLEAR ld_count.

  LOOP AT gt_glu1mod INTO ls_glu1mod
    WHERE bstat = ' ' OR bstat = 'L'.
    LOOP AT gt_bkpf INTO ls_bkpf
      WHERE bukrs = ls_glu1mod-rbukrs
      AND belnr = ls_glu1mod-belnr
      AND gjahr = ls_glu1mod-gjahr.
      ADD 1 TO ld_count.
    ENDLOOP.
    IF ld_count = 0.
      REFRESH lt_glu1.
      MOVE-CORRESPONDING ls_glu1mod TO ls_glu1.
      APPEND ls_glu1 TO lt_glu1.
      CALL FUNCTION 'G_GLU1_TO_AC_DOC_TRANSFORM'
        EXPORTING
          ib_acdoc_compatibility_mode = ''
        TABLES
          t_glu1  = lt_glu1
          t_acchd = lt_acchd
          t_accit = lt_accit
          t_acccr = lt_acccr.
      MOVE-CORRESPONDING ls_glu1mod TO ls_bkpf.
      READ TABLE lt_acchd INTO ls_acchd INDEX 1.
      MOVE-CORRESPONDING ls_acchd TO ls_bkpf.
      READ TABLE lt_accit INTO ls_accit INDEX 1.
      MOVE-CORRESPONDING ls_accit TO ls_bkpf.
      ls_bkpf-waers = ls_glu1mod-rwcur.
      FIELD-SYMBOLS: <f_awref>    TYPE any, <f_refawref> TYPE any.
      ASSIGN COMPONENT 'AWREF' OF STRUCTURE ls_glu1mod TO <f_awref>.
      ASSIGN COMPONENT 'REFAWREF' OF STRUCTURE ls_glu1mod TO <f_refawref>.
      IF <f_awref> IS ASSIGNED.
        CONCATENATE <f_awref> ls_glu1mod-aworg INTO ls_bkpf-awkey.
      ELSE.
        CONCATENATE <f_refawref> ls_glu1mod-aworg INTO ls_bkpf-awkey.
      ENDIF.
      ls_bkpf-cpudt = sy-datum.
      ls_bkpf-cputm = sy-uzeit.
      ls_bkpf-waers = ls_glu1mod-rwcur.
      ls_bkpf-cpudt = sy-datum.
      ls_bkpf-cputm = sy-uzeit.
      ls_bkpf-waers = ls_glu1mod-rwcur.
      ls_bkpf-bukrs = ls_glu1mod-rbukrs.
      PERFORM get_currency_mapping CHANGING ls_bkpf-bukrs ls_glu1mod-rldnr
                             gs_curr_map gs_x001.
      FIELD-SYMBOLS: <f_rkcur> TYPE any, <f_rocur> TYPE any, <f_rhcur> TYPE any.
      ASSIGN COMPONENT 'RHCUR' OF STRUCTURE ls_glu1mod TO <f_rhcur>.
      ASSIGN COMPONENT gs_curr_map-hwae3 OF STRUCTURE ls_glu1mod TO <f_rocur>.
      ASSIGN COMPONENT gs_curr_map-hwae2 OF STRUCTURE ls_glu1mod TO <f_rkcur>.
      IF <f_rhcur> IS ASSIGNED AND <f_rocur> IS ASSIGNED AND <f_rkcur> IS ASSIGNED.
        IF <f_rkcur> IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = ls_glu1mod-budat
              foreign_amount   = 1
              foreign_currency = <f_rhcur>
              local_currency   = <f_rkcur>
            IMPORTING
              exchange_rate    = ls_bkpf-kurs2.
        ENDIF.
        IF <f_rocur> IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = ls_glu1mod-budat
              foreign_amount   = 1
              foreign_currency = <f_rhcur>
              local_currency   = <f_rocur>
            IMPORTING
              exchange_rate    = ls_bkpf-kurs3.
        ENDIF.
        IF ls_bkpf-bukrs = gs_x001-bukrs.
          ls_x001 = gs_x001.
        ELSE.
          CALL FUNCTION 'FI_CURRENCY_INFORMATION'
            EXPORTING
              i_bukrs = ls_glu1mod-rbukrs
            IMPORTING
              e_x001  = ls_x001.
        ENDIF.

        ls_bkpf-hwaer = <f_rhcur>.
        IF ls_x001-curt2 IS NOT INITIAL.
          ls_bkpf-hwae2 = <f_rkcur>.
        ENDIF.
        IF ls_x001-curt3 IS NOT INITIAL.
          ls_bkpf-hwae3 = <f_rocur>.
        ENDIF.
      ELSE.
        ls_bkpf-hwae2 = ls_x001-hwae2.
        ls_bkpf-hwae3 = ls_x001-hwae3.
        SELECT SINGLE waers FROM t001 INTO ls_bkpf-hwaer WHERE bukrs = ls_bkpf-bukrs.
        IF ls_bkpf-hwae3 IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = ls_glu1mod-budat
              foreign_amount   = 1
              foreign_currency = ls_bkpf-hwaer
              local_currency   = ls_bkpf-hwae3
            IMPORTING
              exchange_rate    = ls_bkpf-kurs3.
        ENDIF.
        IF ls_bkpf-hwae2 IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = ls_glu1mod-budat
              foreign_amount   = 1
              foreign_currency = ls_bkpf-hwaer
              local_currency   = ls_bkpf-hwae2
            IMPORTING
              exchange_rate    = ls_bkpf-kurs2.
        ENDIF.
      ENDIF.
      APPEND ls_bkpf TO lt_bkpf_build.
    ENDIF.
    CLEAR ld_count.
  ENDLOOP.

  IF acdoca_active = 0.
    LOOP AT gt_bsis INTO ls_bsis.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsis-bukrs
        AND belnr = ls_bsis-belnr
        AND gjahr = ls_bsis-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsis TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.

    LOOP AT gt_bsas INTO ls_bsas.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsas-bukrs
        AND belnr = ls_bsas-belnr
        AND gjahr = ls_bsas-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsas TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.

    LOOP AT gt_bsid INTO ls_bsid.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsid-bukrs
        AND belnr = ls_bsid-belnr
        AND gjahr = ls_bsid-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsid TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.

    LOOP AT gt_bsad INTO ls_bsad.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsad-bukrs
        AND belnr = ls_bsad-belnr
        AND gjahr = ls_bsad-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsad TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.

    LOOP AT gt_bsik INTO ls_bsik.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsik-bukrs
        AND belnr = ls_bsik-belnr
        AND gjahr = ls_bsik-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsik TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.

    LOOP AT gt_bsak INTO ls_bsak.
      LOOP AT gt_bkpf INTO ls_bkpf
        WHERE bukrs = ls_bsak-bukrs
        AND belnr = ls_bsak-belnr
        AND gjahr = ls_bsak-gjahr.
        ADD 1 TO ld_count.
      ENDLOOP.
      IF ld_count = 0.
        MOVE-CORRESPONDING ls_bsak TO ls_bkpf.
        APPEND ls_bkpf TO lt_bkpf_build.

      ENDIF.
      CLEAR ld_count.
    ENDLOOP.
  ENDIF.

  LOOP AT gt_bseg_add INTO ls_bseg_add.
    LOOP AT gt_bkpf INTO ls_bkpf
      WHERE bukrs = ls_bseg_add-bukrs
      AND belnr = ls_bseg_add-belnr
      AND gjahr = ls_bseg_add-gjahr.
      ADD 1 TO ld_count.
    ENDLOOP.
    IF ld_count = 0.
      MOVE-CORRESPONDING ls_bseg_add TO ls_bkpf.
      ls_bkpf-bstat = 'L'.
      IF ls_bseg_add-augbl IS INITIAL.
        SELECT SINGLE ldgrp FROM faglbsis
          INTO ls_bkpf-ldgrp
          WHERE bukrs = ls_bseg_add-bukrs
          AND belnr = ls_bseg_add-belnr
          AND gjahr = ls_bseg_add-gjahr.
      ELSE.
        SELECT SINGLE ldgrp FROM faglbsas
          INTO ls_bkpf-ldgrp
                  WHERE bukrs = ls_bseg_add-bukrs
      AND belnr = ls_bseg_add-belnr
      AND gjahr = ls_bseg_add-gjahr
      .
      ENDIF.
      IF ls_bkpf-ldgrp IS INITIAL.
        LOOP AT gt_glu1mod INTO ls_glu1mod
          WHERE rbukrs = ls_bseg_add-bukrs
          AND belnr = ls_bseg_add-belnr
          AND ryear = ls_bseg_add-gjahr.
          SELECT ldgrp FROM fagl_tldgrp_map
            INTO TABLE lt_map
            WHERE rldnr = ls_glu1mod-rldnr.
          AT FIRST.
            lt_map_keep = lt_map.
            IF lines( lt_map_keep ) = 1. EXIT. ENDIF.
            CONTINUE.
          ENDAT.
          LOOP AT lt_map_keep INTO ls_map_keep.
            READ TABLE lt_map WITH KEY ldgrp = ls_map_keep-ldgrp
            TRANSPORTING NO FIELDS.
            IF sy-subrc = 4.
              DELETE lt_map_keep INDEX sy-tabix.
              IF lines( lt_map_keep ) = 1. EXIT. ENDIF.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
        IF lines( lt_map_keep ) = 1.
          READ TABLE lt_map_keep INDEX 1
          INTO ls_map_keep.
          ls_bkpf-ldgrp = ls_map_keep-ldgrp.
        ENDIF.
      ENDIF.
      APPEND ls_bkpf TO lt_bkpf_build.

    ENDIF.
    CLEAR ld_count.
  ENDLOOP.

  LOOP AT gt_bsed INTO ls_bsed.
    LOOP AT gt_bkpf INTO ls_bkpf
      WHERE bukrs = ls_bsed-bukrs
      AND belnr = ls_bsed-belnr
      AND gjahr = ls_bsed-gjahr.
      ADD 1 TO ld_count.
    ENDLOOP.
    IF ld_count = 0.
      MOVE-CORRESPONDING ls_bsed TO ls_bkpf.
      APPEND ls_bkpf TO lt_bkpf_build.

    ENDIF.
    CLEAR ld_count.
  ENDLOOP.

  LOOP AT gt_bsec INTO ls_bsec.
    LOOP AT gt_bkpf INTO ls_bkpf
      WHERE bukrs = ls_bsec-bukrs
      AND belnr = ls_bsec-belnr
      AND gjahr = ls_bsec-gjahr.
      ADD 1 TO ld_count.
    ENDLOOP.
    IF ld_count = 0.
      MOVE-CORRESPONDING ls_bsec TO ls_bkpf.
      APPEND ls_bkpf TO lt_bkpf_build.

    ENDIF.
    CLEAR ld_count.
  ENDLOOP.

  LOOP AT gt_bset INTO ls_bset.
    LOOP AT gt_bkpf INTO ls_bkpf
      WHERE bukrs = ls_bset-bukrs
      AND belnr = ls_bset-belnr
      AND gjahr = ls_bset-gjahr.
      ADD 1 TO ld_count.
    ENDLOOP.
    IF ld_count = 0.
      MOVE-CORRESPONDING ls_bset TO ls_bkpf.
      APPEND ls_bkpf TO lt_bkpf_build.

    ENDIF.
    CLEAR ld_count.
  ENDLOOP.

*  LOOP AT gt_splinfo INTO ls_splinfo.
*    LOOP AT gt_bkpf INTO ls_bkpf
*      WHERE bukrs = ls_splinfo-bukrs
*      AND belnr = ls_splinfo-belnr
*      AND gjahr = ls_splinfo-gjahr.
*      ADD 1 TO ld_count.
*    ENDLOOP.
*    IF ld_count = 0.
*      MOVE-CORRESPONDING ls_splinfo TO ls_bkpf.
*      APPEND ls_bkpf TO lt_bkpf_build.
*
*    ENDIF.
*    CLEAR ld_count.
*  ENDLOOP.
*
*  LOOP AT gt_splinfo_val INTO ls_splinfo_val.
*    LOOP AT gt_bkpf INTO ls_bkpf
*      WHERE bukrs = ls_splinfo_val-bukrs
*      AND belnr = ls_splinfo_val-belnr
*      AND gjahr = ls_splinfo_val-gjahr.
*      ADD 1 TO ld_count.
*    ENDLOOP.
*    IF ld_count = 0.
*      MOVE-CORRESPONDING ls_splinfo_val TO ls_bkpf.
*      APPEND ls_bkpf TO lt_bkpf_build.
*
*    ENDIF.
*    CLEAR ld_count.
*  ENDLOOP.

  CLEAR ls_bkpf.
  SORT lt_bkpf_build BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING.
  LOOP AT lt_bkpf_build INTO ls_bkpf.
    SELECT SINGLE * FROM bkpf
      INTO ls_bkpf_select
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr.
    IF sy-subrc NE 0.
      IF ls_bkpf_app IS INITIAL.
        MOVE-CORRESPONDING ls_bkpf TO ls_bkpf_app.
      ELSE.
        IF ls_bkpf-bukrs = ls_bkpf_app-bukrs
          AND ls_bkpf-gjahr = ls_bkpf_app-gjahr
          AND ls_bkpf-belnr = ls_bkpf_app-belnr.
          PERFORM transfer_noninitial
                           USING ls_bkpf
                           CHANGING
                                 ls_bkpf_app.
        ELSE.
          PERFORM add_new_bkpf CHANGING ls_bkpf_app.
          CLEAR ls_bkpf_app.
          PERFORM transfer_noninitial
                           USING ls_bkpf
                           CHANGING
                                 ls_bkpf_app.
        ENDIF.
      ENDIF.
    ELSEIF ls_bkpf_select-bstat NE ' ' AND ls_bkpf_select-bstat NE 'L'.
      LOOP AT gt_glu1mod INTO ls_glu1mod
        WHERE rbukrs = ls_bkpf_select-bukrs
        AND belnr = ls_bkpf_select-belnr
        AND gjahr = ls_bkpf_select-gjahr.
        DELETE gt_glu1mod INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bseg INTO ls_bseg
WHERE bukrs = ls_bkpf_select-bukrs
AND belnr = ls_bkpf_select-belnr
AND gjahr = ls_bkpf_select-gjahr.
        DELETE gt_bseg INDEX sy-tabix.
      ENDLOOP.

    ENDIF.
  ENDLOOP.
  IF ls_bkpf_app IS NOT INITIAL.
    PERFORM add_new_bkpf CHANGING ls_bkpf_app.
    CLEAR ls_bkpf_app.
  ENDIF.
ENDFORM.                    "build_bkpf

*&---------------------------------------------------------------------*
*&      Form  add_new_bkpf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LS_BKPF_APP  text
*----------------------------------------------------------------------*
FORM add_new_bkpf CHANGING ls_bkpf_app LIKE bkpfmoddisp.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.

  IF ls_bkpf_app-awtyp IS INITIAL
    AND ls_bkpf_app-awkey IS INITIAL.
    ls_bkpf_app-awtyp = 'BKPF'.
    ls_bkpf_app-awkey(10) = ls_bkpf_app-belnr.
    ls_bkpf_app-awkey+10(4) = ls_bkpf_app-bukrs.
    ls_bkpf_app-awkey+14(4) = ls_bkpf_app-gjahr.
  ENDIF.
  IF ls_bkpf_app-glvor IS INITIAL
    AND ( ls_bkpf_app-awtyp = 'BKPF'
    OR ls_bkpf_app-awtyp = 'BKPFF' ).
    ls_bkpf_app-glvor = 'RFBU'.
  ELSEIF ls_bkpf_app-glvor IS INITIAL.
  ENDIF.

  IF ( ls_bkpf_app-bldat IS NOT INITIAL
    OR ls_bkpf_app-cpudt IS NOT INITIAL )
    AND ls_bkpf_app-budat IS INITIAL.
    ls_bkpf_app-budat = ls_bkpf_app-bldat.
  ENDIF.

  IF ls_bkpf_app-monat IS INITIAL.
    CALL FUNCTION 'FI_PERIOD_DETERMINE'
      EXPORTING
        i_budat = ls_bkpf_app-budat
        i_bukrs = ls_bkpf_app-bukrs
      IMPORTING
        e_gjahr = ls_bkpf_app-gjahr
        e_monat = ls_bkpf_app-monat.
  ENDIF.

  CLEAR ls_bkpf_app-rldnr.

  ls_bkpf_app-orig = 'BUIL'.
  ls_bkpf_app-check = 'X'.
  ls_bkpf_app-control = '@5D@'.
  CLEAR ls_flag.
  MOVE-CORRESPONDING ls_bkpf_app TO ls_flag.
  ls_flag-error = 'BUILD BKPF'.

  IF ls_bkpf_app-xblnr NOT IN p_xblnr
  OR ls_bkpf_app-tcode NOT IN p_tcode
  OR ls_bkpf_app-usnam NOT IN p_usnam
  OR ls_bkpf_app-cpudt NOT IN p_cpudt
  OR ls_bkpf_app-monat NOT IN p_monat
  OR ls_bkpf_app-awtyp NOT IN p_awtyp
  OR ls_bkpf_app-blart NOT IN p_blart
  OR ls_bkpf_app-budat NOT IN p_budat.
    LOOP AT gt_bseg INTO ls_bseg
      WHERE belnr = ls_bkpf_app-belnr
         AND bukrs = ls_bkpf_app-bukrs
         AND gjahr = ls_bkpf_app-gjahr.
      DELETE gt_bseg FROM ls_bseg.
    ENDLOOP.

    LOOP AT gt_glu1mod INTO ls_glu1mod
    WHERE belnr = ls_bkpf_app-belnr
     AND  rbukrs = ls_bkpf_app-bukrs
     AND  gjahr = ls_bkpf_app-gjahr.
      DELETE gt_glu1mod FROM ls_glu1mod.
    ENDLOOP.

  ELSE.
    APPEND ls_flag TO gt_flag.
    APPEND ls_bkpf_app TO gt_bkpf.
  ENDIF.
ENDFORM.                    "add_new_bkpf

*&---------------------------------------------------------------------*
*&      Form  build_gl
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_gl.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ld_build TYPE c LENGTH 1.
  DATA lt_import_glu1 TYPE TABLE OF glu1 WITH HEADER LINE.
  DATA ls_glu1 TYPE glu1.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA lt_ledgertab TYPE fagl_rldnr_tab.
  DATA ld_ledgertab LIKE LINE OF lt_ledgertab.

  SORT gt_bseg BY belnr ASCENDING gjahr ASCENDING.

  DATA bseg_conditions TYPE c LENGTH 50.
  IF acdoca_active = 1.
    bseg_conditions = 'h_bstat = '' '''.
  ELSE.
    bseg_conditions = 'belnr is not initial'.
  ENDIF.
  LOOP AT gt_bseg INTO ls_bseg
    WHERE (bseg_conditions).
    READ TABLE gt_bkpf INTO ls_bkpf
    WITH KEY bukrs = ls_bseg-bukrs
             gjahr = ls_bseg-gjahr
             belnr = ls_bseg-belnr.
    CALL FUNCTION 'FAGL_GET_LEDGER_FROM_GROUP'
      EXPORTING
        i_ldgrp   = ls_bkpf-ldgrp
        i_bukrs   = ls_bkpf-bukrs
      IMPORTING
        et_ledger = lt_ledgertab.

    LOOP AT lt_ledgertab INTO ld_ledgertab.
      READ TABLE gt_glu1mod WITH KEY
      rbukrs = ls_bseg-bukrs
      gjahr = ls_bseg-gjahr
      belnr = ls_bseg-belnr
      buzei = ls_bseg-buzei
      rldnr = ld_ledgertab
      TRANSPORTING NO FIELDS.
      IF sy-subrc = 4.
        IF ls_bseg-bukrs = simulate_bukrs
          AND ls_bseg-belnr = simulate_belnr
          AND ls_bseg-gjahr = simulate_gjahr.
          lt_import_glu1[] = gt_import_glu1[].
        ELSE.
          PERFORM simulate_gl TABLES gt_import_glu1 USING ls_bseg.
          simulate_bukrs = ls_bseg-bukrs.
          simulate_belnr = ls_bseg-belnr.
          simulate_gjahr = ls_bseg-gjahr.
          lt_import_glu1[] = gt_import_glu1[].
        ENDIF.
        IF lt_import_glu1[] IS NOT INITIAL.
          LOOP AT lt_import_glu1 INTO ls_glu1
            WHERE buzei = ls_bseg-buzei
            AND rldnr = ld_ledgertab.
            MOVE-CORRESPONDING ls_glu1 TO ls_glu1mod.
            ls_glu1mod-orig = 'BUIL'.
            ls_glu1mod-check = 'X'.
            ls_glu1mod-control = '@5D@'.
            IF acdoca_active = 1.
              ls_glu1mod-zzz_tabname = 'ACDOCA'.
            ELSE.
              SELECT SINGLE tab FROM t881
                INTO ls_glu1mod-zzz_tabname
                WHERE rldnr = ls_glu1mod-rldnr.
              SELECT SINGLE ntable FROM t800a
                INTO ls_glu1mod-zzz_tabname
                WHERE tab = ls_glu1mod-zzz_tabname.
            ENDIF.
            APPEND ls_glu1mod TO gt_glu1mod.
            MOVE-CORRESPONDING ls_glu1mod TO ls_flag.
            ls_flag-bukrs = ls_glu1mod-rbukrs.
            ls_flag-belnr = ls_glu1mod-belnr.
            ls_flag-gjahr = ls_glu1mod-ryear.
            ls_flag-error = 'BUILD GL'.
            APPEND ls_flag TO gt_flag.
          ENDLOOP.
        ELSE.
          CLEAR ls_flag.
          ls_flag-control = '@5C@'.
          ls_flag-bukrs = ls_bseg-bukrs.
          ls_flag-belnr = ls_bseg-belnr.
          ls_flag-gjahr = ls_bseg-gjahr.
          CONCATENATE 'BUILD GL: Error Sim. ' gd_sy-msgid '-' gd_sy-msgno INTO ls_flag-error.
          APPEND ls_flag TO gt_flag.
        ENDIF.
        REFRESH lt_import_glu1.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
ENDFORM.

FORM simulate_gl TABLES lt_import_glu1 USING ls_bseg LIKE LINE OF gt_bseg.
  RANGES: r_bukrs FOR bkpf-bukrs.
  RANGES: r_belnr FOR bkpf-belnr.
  RANGES: r_gjahr FOR bkpf-gjahr.
  DATA: r_rldnr TYPE fagl_rldnr_tab.
  DATA: ls_glu1 TYPE glu1.
  DATA: lt_glu1_db TYPE TABLE OF glu1 WITH HEADER LINE.
  DATA t_glu1 TYPE TABLE OF glu1 WITH HEADER LINE.
  DATA s_glu1 LIKE LINE OF t_glu1.
  DATA ld_ok TYPE c LENGTH 1.

  REFRESH: r_bukrs, r_belnr, r_gjahr, r_rldnr.
  CLEAR: r_bukrs, r_belnr, r_gjahr, ld_ok.
  REFRESH: lt_import_glu1, t_glu1.
  REFRESH: lt_glu1_db.
*** build ranges: BUKRS
  r_bukrs-sign = 'I'.
  r_bukrs-option = 'EQ'.
  r_bukrs-low = ls_bseg-bukrs.
  APPEND r_bukrs.
*** BELNR
  r_belnr-sign = 'I'.
  r_belnr-option = 'EQ'.
  r_belnr-low = ls_bseg-belnr.
  APPEND r_belnr.
*** GJAHR
  r_gjahr-sign = 'I'.
  r_gjahr-option = 'EQ'.
  r_gjahr-low = ls_bseg-gjahr.
  APPEND r_gjahr.

  CALL FUNCTION 'G_TRACE_START'
    EXCEPTIONS
      trace_already_on = 1
      OTHERS           = 2.

  IF acdoca_active = 1.
    CALL METHOD (cl_fins_sif_services)=>(subseq_post_set).
  ENDIF.

  PERFORM fagl_subseq_posting
    USING
       r_bukrs[]
       r_gjahr[]
       r_belnr[]
       r_rldnr[]
       abap_true
       abap_false
       abap_true.

  IF acdoca_active = 1.
    CALL METHOD (cl_fins_sif_services)=>(subseq_post_init).
  ENDIF.

*** import GLU1 contents from memory
  IMPORT t_glu1 FROM MEMORY ID 'T_GLU1'.
  LOOP AT t_glu1 INTO s_glu1
    WHERE belnr = ls_bseg-belnr
    AND rbukrs = ls_bseg-bukrs
    AND gjahr = ls_bseg-gjahr.
    APPEND s_glu1 TO lt_import_glu1.
    ld_ok = 'X'.
  ENDLOOP.
  IF ld_ok IS INITIAL.
    MOVE-CORRESPONDING sy TO gd_sy.
  ENDIF.
*** free buffer
  CALL FUNCTION 'G_TRACE_STOP'
    EXCEPTIONS
      is_already_off = 1
      OTHERS         = 2.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  build_bseg
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_bseg.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_bsas LIKE bsasmoddisp.
  DATA ls_bsis LIKE bsismoddisp.
  DATA ls_bsak LIKE bsakmoddisp.
  DATA ls_bsik LIKE bsikmoddisp.
  DATA ls_bsad LIKE bsadmoddisp.
  DATA ls_bsid LIKE bsidmoddisp.
  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA lt_bkpf LIKE gt_bkpf.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_bseg_app LIKE ls_bseg.
  DATA lt_bseg_build LIKE gt_bseg.
  DATA ld_b_inactive TYPE c LENGTH 1.

  FIELD-SYMBOLS: <ld_hmonat>, <ld_hbstat>, <ld_hbudat>, <ld_hbldat>, <ld_hwaers>, <ld_hblart>, <ld_hhwaer>, <ld_hhwae2>, <ld_hhwae3>, <ld_awkey>.

  LOOP AT gt_bkpf INTO ls_bkpf.
    IF acdoca_active = 1.
      ASSIGN COMPONENT 'H_MONAT' OF STRUCTURE ls_bseg TO <ld_hmonat>.
      <ld_hmonat> = ls_bkpf-monat.
      ASSIGN COMPONENT 'H_BSTAT' OF STRUCTURE ls_bseg TO <ld_hbstat>.
      <ld_hbstat> = ls_bkpf-bstat.
      ASSIGN COMPONENT 'H_BUDAT' OF STRUCTURE ls_bseg TO <ld_hbudat>.
      <ld_hbudat> = ls_bkpf-budat.
      ASSIGN COMPONENT 'H_BLDAT' OF STRUCTURE ls_bseg TO <ld_hbldat>.
      <ld_hbldat> = ls_bkpf-bldat.
      ASSIGN COMPONENT 'H_WAERS' OF STRUCTURE ls_bseg TO <ld_hwaers>.
      <ld_hwaers> = ls_bkpf-waers.
      ASSIGN COMPONENT 'H_BLART' OF STRUCTURE ls_bseg TO <ld_hblart>.
      <ld_hblart> = ls_bkpf-blart.
      ASSIGN COMPONENT 'H_HWAER' OF STRUCTURE ls_bseg TO <ld_hhwaer>.
      <ld_hhwaer> = ls_bkpf-hwaer.
      ASSIGN COMPONENT 'H_HWAE2' OF STRUCTURE ls_bseg TO <ld_hhwae2>.
      <ld_hhwae2> = ls_bkpf-hwae2.
      ASSIGN COMPONENT 'H_HWAE3' OF STRUCTURE ls_bseg TO <ld_hhwae3>.
      <ld_hhwae3> = ls_bkpf-hwae3.
      ASSIGN COMPONENT 'AWKEY' OF STRUCTURE ls_bseg TO <ld_awkey>.
      <ld_awkey> = ls_bkpf-awkey.
    ENDIF.

    IF ls_bkpf-bstat NE 'L'.
      IF acdoca_active = 0.
        LOOP AT gt_bsis INTO ls_bsis
          WHERE bukrs = ls_bkpf-bukrs
          AND gjahr = ls_bkpf-gjahr
          AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsis-bukrs
          gjahr = ls_bsis-gjahr
          belnr = ls_bsis-belnr
          buzei = ls_bsis-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsis TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_bsas INTO ls_bsas
  WHERE bukrs = ls_bkpf-bukrs
  AND gjahr = ls_bkpf-gjahr
  AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsas-bukrs
          gjahr = ls_bsas-gjahr
          belnr = ls_bsas-belnr
          buzei = ls_bsas-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsas TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_bsik INTO ls_bsik
  WHERE bukrs = ls_bkpf-bukrs
  AND gjahr = ls_bkpf-gjahr
  AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsik-bukrs
          gjahr = ls_bsik-gjahr
          belnr = ls_bsik-belnr
          buzei = ls_bsik-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsik TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_bsak INTO ls_bsak
  WHERE bukrs = ls_bkpf-bukrs
  AND gjahr = ls_bkpf-gjahr
  AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsak-bukrs
          gjahr = ls_bsak-gjahr
          belnr = ls_bsak-belnr
          buzei = ls_bsak-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsak TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_bsid INTO ls_bsid
  WHERE bukrs = ls_bkpf-bukrs
  AND gjahr = ls_bkpf-gjahr
  AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsid-bukrs
          gjahr = ls_bsid-gjahr
          belnr = ls_bsid-belnr
          buzei = ls_bsid-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsid TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_bsad INTO ls_bsad
  WHERE bukrs = ls_bkpf-bukrs
  AND gjahr = ls_bkpf-gjahr
  AND belnr = ls_bkpf-belnr.
          READ TABLE gt_bseg WITH KEY
          bukrs = ls_bsad-bukrs
          gjahr = ls_bsad-gjahr
          belnr = ls_bsad-belnr
          buzei = ls_bsad-buzei
          TRANSPORTING NO FIELDS.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsad TO ls_bseg.
            APPEND ls_bseg TO lt_bseg_build.
          ENDIF.
        ENDLOOP.
      ENDIF.
      IF gs_fagl_activec-splitmethd IS NOT INITIAL.
        IF gd_mass = 'X'.
          ld_b_inactive = gd_b_inactive.
        ELSE.
          IF gs_fagl_activec-splitmethd IS NOT INITIAL.
            SELECT SINGLE b_inactive
              INTO ld_b_inactive
              FROM fagl_split_actc
              WHERE bukrs = ls_bkpf-bukrs.
          ELSE.
            ld_b_inactive = 'X'.
          ENDIF.
        ENDIF.
        IF ld_b_inactive IS NOT INITIAL.
          PERFORM move_glu1_no_split USING ls_bkpf CHANGING lt_bseg_build.
        ELSE.
          PERFORM move_glu1_split USING ls_bkpf CHANGING lt_bseg_build.
        ENDIF.
      ELSE.
        PERFORM move_glu1_no_split USING ls_bkpf CHANGING lt_bseg_build.
      ENDIF.
    ENDIF.

    SORT lt_bseg_build BY buzei ASCENDING.

    LOOP AT lt_bseg_build INTO ls_bseg.
      READ TABLE gt_db_bseg WITH KEY bukrs = ls_bseg-bukrs
                                       belnr = ls_bseg-belnr
                                       gjahr = ls_bseg-gjahr
                                       buzei = ls_bseg-buzei
                                       TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        IF ls_bseg_app IS INITIAL.
          IF acdoca_active = 1.
            ASSIGN COMPONENT 'H_MONAT' OF STRUCTURE ls_bseg TO <ld_hmonat>.
            <ld_hmonat> = ls_bkpf-monat.
            ASSIGN COMPONENT 'H_BSTAT' OF STRUCTURE ls_bseg TO <ld_hbstat>.
            <ld_hbstat> = ls_bkpf-bstat.
            ASSIGN COMPONENT 'H_BUDAT' OF STRUCTURE ls_bseg TO <ld_hbudat>.
            <ld_hbudat> = ls_bkpf-budat.
            ASSIGN COMPONENT 'H_BLDAT' OF STRUCTURE ls_bseg TO <ld_hbldat>.
            <ld_hbldat> = ls_bkpf-bldat.
            ASSIGN COMPONENT 'H_WAERS' OF STRUCTURE ls_bseg TO <ld_hwaers>.
            <ld_hwaers> = ls_bkpf-waers.
            ASSIGN COMPONENT 'H_BLART' OF STRUCTURE ls_bseg TO <ld_hblart>.
            <ld_hblart> = ls_bkpf-blart.
            ASSIGN COMPONENT 'H_HWAER' OF STRUCTURE ls_bseg TO <ld_hhwaer>.
            <ld_hhwaer> = ls_bkpf-hwaer.
            ASSIGN COMPONENT 'H_HWAE2' OF STRUCTURE ls_bseg TO <ld_hhwae2>.
            <ld_hhwae2> = ls_bkpf-hwae2.
            ASSIGN COMPONENT 'H_HWAE3' OF STRUCTURE ls_bseg TO <ld_hhwae3>.
            <ld_hhwae3> = ls_bkpf-hwae3.
            ASSIGN COMPONENT 'AWKEY' OF STRUCTURE ls_bseg TO <ld_awkey>.
            <ld_awkey> = ls_bkpf-awkey.
          ENDIF.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_app.
        ELSE.
          IF ls_bseg-bukrs = ls_bseg_app-bukrs
            AND ls_bseg-gjahr = ls_bseg_app-gjahr
            AND ls_bseg-belnr = ls_bseg_app-belnr
            AND ls_bseg-buzei = ls_bseg_app-buzei.
            PERFORM transfer_noninitial
                             USING ls_bseg
                             CHANGING
                                   ls_bseg_app.
          ELSE.
            PERFORM add_new_bseg USING ls_bseg_app.
            CLEAR ls_bseg_app.
            PERFORM transfer_noninitial
                             USING ls_bseg
                             CHANGING
                                   ls_bseg_app.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF ls_bseg_app IS NOT INITIAL.
      PERFORM add_new_bseg USING ls_bseg_app.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "build_bseg

*&---------------------------------------------------------------------*
*&      Form  add_new_bseg
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LS_BSEG_APP  text
*----------------------------------------------------------------------*
FORM add_new_bseg USING ls_bseg_app LIKE bsegmoddisp.

  DATA ls_skb1 TYPE skb1.
  DATA ls_ska1 TYPE ska1.
  DATA ld_ktopl TYPE ska1-ktopl.
  DATA ls_flag LIKE LINE OF gt_flag.

  ls_bseg_app-orig = 'BUIL'.
  ls_bseg_app-check = 'X'.
  ls_bseg_app-control = '@5D@'.

  SELECT SINGLE * FROM skb1
    INTO ls_skb1
    WHERE bukrs = ls_bseg_app-bukrs
    AND saknr = ls_bseg_app-hkont.

  SELECT SINGLE ktopl FROM t001 INTO ld_ktopl WHERE bukrs = ls_bseg_app-bukrs.

  SELECT SINGLE * FROM ska1
INTO ls_ska1
WHERE ktopl = ld_ktopl
AND saknr = ls_bseg_app-hkont.

  ls_bseg_app-xbilk = ls_ska1-xbilk.

  IF ls_bseg_app-koart IS INITIAL.
    CASE ls_skb1-mitkz.
      WHEN ' '.
        ls_bseg_app-koart = 'S'.
      WHEN 'D'.
        ls_bseg_app-koart = 'D'.
      WHEN 'K'.
        ls_bseg_app-koart = 'K'.
    ENDCASE.
  ENDIF.

  CASE ls_bseg_app-koart.
    WHEN 'S'.
      IF ls_skb1-xopvw = 'X'.
        ls_bseg_app-xopvw = 'X'.
      ELSE.
        ls_bseg_app-xopvw = ' '.
      ENDIF.
      IF ls_skb1-xkres = 'X'.
        ls_bseg_app-xkres = 'X'.
      ELSE.
        ls_bseg_app-xkres = ' '.
      ENDIF.
    WHEN 'D' OR 'K'.
      ls_bseg_app-xkres = 'X'.
      ls_bseg_app-xopvw = 'X'.
      IF ls_skb1-xkres = 'X'.
        ls_bseg_app-xkres = 'X'.
      ENDIF.
  ENDCASE.

  IF acdoca_active = 1.
    ls_bseg_app-xkres = 'X'.
  ENDIF.

  IF ls_bseg_app-koart IS INITIAL AND ls_bseg_app-bschl IS NOT INITIAL.
    IF ls_bseg_app-bschl(1) = 0
      OR ls_bseg_app-bschl(1) = 1.
      ls_bseg_app-koart = 'D'.
    ELSEIF ls_bseg_app-bschl(1) = 2
    OR ls_bseg_app-bschl(1) = 3.
      ls_bseg_app-koart = 'K'.
    ELSEIF ls_bseg_app-bschl(1) = 4
  OR ls_bseg_app-bschl(1) = 5.
      ls_bseg_app-koart = 'S'.
    ELSEIF ls_bseg_app-bschl(1) = 7.
      ls_bseg_app-koart = 'A'.
    ELSEIF ls_bseg_app-bschl(1) = 8
OR ls_bseg_app-bschl(1) = 9.
      ls_bseg_app-koart = 'M'.
    ENDIF.
  ENDIF.

  READ TABLE gt_bseg
  WITH KEY bukrs = ls_bseg_app-bukrs
           belnr = ls_bseg_app-belnr
           gjahr = ls_bseg_app-gjahr
           buzei = ls_bseg_app-buzei
           TRANSPORTING NO FIELDS.

  IF sy-subrc = 4.
    APPEND ls_bseg_app TO gt_bseg.
    MOVE-CORRESPONDING ls_bseg_app TO ls_flag.
    ls_flag-control = '@5D@'.
    ls_flag-error = 'BUILD BSEG'.
    APPEND ls_flag TO gt_flag.
  ENDIF.
ENDFORM.                    "add_new_bseg

*&---------------------------------------------------------------------*
*&      Form  move_glu1_no_split
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LS_BKPF        text
*      -->LT_BSEG_BUILD  text
*----------------------------------------------------------------------*
FORM move_glu1_no_split USING ls_bkpf LIKE LINE OF gt_bkpf
      CHANGING lt_bseg_build LIKE gt_bseg.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA it_glu1 TYPE TABLE OF glu1.
  DATA it_accit TYPE TABLE OF accit.
  DATA it_acccr TYPE TABLE OF acccr.
  DATA is_accit TYPE accit.
  DATA ls_acccr TYPE acccr.
  DATA is_glu1 TYPE glu1.
  DATA is_bseg LIKE bsegmoddisp.
  DATA ls_x001 TYPE x001.

  LOOP AT gt_glu1mod INTO ls_glu1mod
    WHERE linetype NE '01001'
    AND buzei NE '000'
    AND belnr = ls_bkpf-belnr
    AND ryear = ls_bkpf-gjahr
    AND rbukrs = ls_bkpf-bukrs
    AND rldnr = gd_leading_ledger.

    READ TABLE gt_bseg TRANSPORTING NO FIELDS
        WITH KEY buzei = ls_glu1mod-buzei
         belnr = ls_glu1mod-belnr
       gjahr = ls_glu1mod-gjahr
        bukrs = ls_glu1mod-rbukrs.
    IF sy-subrc = 0.
      CONTINUE.
    ENDIF.

    CLEAR: it_accit, it_acccr, it_glu1.

    MOVE-CORRESPONDING ls_glu1mod TO is_glu1.
    APPEND is_glu1 TO it_glu1.

    CALL FUNCTION 'G_GLU1_TO_AC_DOC_TRANSFORM'
      EXPORTING
        ib_acdoc_compatibility_mode = ''
      TABLES
        t_glu1  = it_glu1
        t_accit = it_accit
        t_acccr = it_acccr.

    READ TABLE it_accit INDEX 1 INTO is_accit.
    MOVE-CORRESPONDING ls_glu1mod TO is_bseg.
    MOVE-CORRESPONDING is_accit TO is_bseg.
    is_bseg-buzei = ls_glu1mod-buzei.

    IF is_bseg-bukrs NE gs_x001-bukrs.
      CALL FUNCTION 'FI_CURRENCY_INFORMATION'
        EXPORTING
          i_bukrs = ls_glu1mod-rbukrs
        IMPORTING
          e_x001  = ls_x001.
    ELSE.
      ls_x001 = gs_x001.
    ENDIF.

    LOOP AT it_acccr INTO ls_acccr.
      CASE ls_acccr-curtp.
        WHEN '10'.
          IF ls_acccr-wrbtr > 0.
            is_bseg-dmbtr = ls_acccr-wrbtr.
            is_bseg-shkzg = 'S'.
          ELSE.
            is_bseg-dmbtr = abs( ls_acccr-wrbtr ).
            is_bseg-shkzg = 'H'.
          ENDIF.
        WHEN '00'.
          is_bseg-wrbtr = abs( ls_acccr-wrbtr ).
        WHEN ls_x001-curt2.
          is_bseg-dmbe2 = abs( ls_acccr-wrbtr ).
        WHEN ls_x001-curt3.
          is_bseg-dmbe3 = abs( ls_acccr-wrbtr ).
      ENDCASE.
    ENDLOOP.
    is_bseg-pswbt = abs( ls_glu1mod-wsl ).
    is_bseg-pswsl = ls_glu1mod-rwcur.
    APPEND is_bseg TO lt_bseg_build.
  ENDLOOP.
ENDFORM.                    "move_glu1_no_split

*&---------------------------------------------------------------------*
*&      Form  move_glu1_split
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LS_BKPF        text
*      -->LT_BSEG_BUILD  text
*----------------------------------------------------------------------*
FORM move_glu1_split USING ls_bkpf LIKE LINE OF gt_bkpf
      CHANGING lt_bseg_build LIKE gt_bseg.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_glu1mod_sum LIKE LINE OF gt_glu1mod.
  DATA it_glu1mod LIKE TABLE OF ls_glu1mod.
  DATA it_glu1 TYPE TABLE OF glu1.
  DATA it_accit TYPE TABLE OF accit.
  DATA it_acccr TYPE TABLE OF acccr.
  DATA is_accit TYPE accit.
  DATA ls_acccr TYPE acccr.
  DATA is_glu1 TYPE glu1.
  DATA is_bseg LIKE bsegmoddisp.
  DATA ls_x001 TYPE x001.

  DATA bsl TYPE c LENGTH 3 VALUE 'BSL'.
  DATA csl TYPE c LENGTH 3 VALUE 'CSL'.
  DATA dsl TYPE c LENGTH 3 VALUE 'DSL'.
  DATA esl TYPE c LENGTH 3 VALUE 'ESL'.
  DATA fsl TYPE c LENGTH 3 VALUE 'FSL'.
  DATA gsl TYPE c LENGTH 3 VALUE 'GSL'.

  CLEAR it_glu1mod.
  LOOP AT gt_glu1mod INTO ls_glu1mod
    WHERE linetype NE '01001'
    AND buzei NE '000'
    AND belnr = ls_bkpf-belnr
    AND ryear = ls_bkpf-gjahr
    AND rbukrs = ls_bkpf-bukrs
    AND rldnr = gd_leading_ledger.
    APPEND ls_glu1mod TO it_glu1mod.
  ENDLOOP.

  SORT it_glu1mod BY buzei ASCENDING.

  CLEAR ls_glu1mod_sum.

  LOOP AT it_glu1mod INTO ls_glu1mod.
    READ TABLE gt_bseg TRANSPORTING NO FIELDS
    WITH KEY buzei = ls_glu1mod-buzei
     belnr = ls_glu1mod-belnr
   gjahr = ls_glu1mod-gjahr
    bukrs = ls_glu1mod-rbukrs.
    IF sy-subrc = 0.
      CONTINUE.
    ENDIF.
    IF ls_glu1mod_sum IS INITIAL.
      MOVE-CORRESPONDING ls_glu1mod TO ls_glu1mod_sum.
    ELSE.
      IF ls_glu1mod-buzei = ls_glu1mod_sum-buzei.
        ADD ls_glu1mod-hsl TO ls_glu1mod_sum-hsl.
        ADD ls_glu1mod-ksl TO ls_glu1mod_sum-ksl.
        ADD ls_glu1mod-osl TO ls_glu1mod_sum-osl.
        ADD ls_glu1mod-tsl TO ls_glu1mod_sum-tsl.
        ADD ls_glu1mod-wsl TO ls_glu1mod_sum-wsl.
        IF acdoca_active = 1.
          FIELD-SYMBOLS:
            <ls_glu1mod_bsl>, <ls_glu1mod_sum_bsl>,
            <ls_glu1mod_csl>, <ls_glu1mod_sum_csl>,
            <ls_glu1mod_dsl>, <ls_glu1mod_sum_dsl>,
            <ls_glu1mod_esl>, <ls_glu1mod_sum_esl>,
            <ls_glu1mod_fsl>, <ls_glu1mod_sum_fsl>,
            <ls_glu1mod_gsl>, <ls_glu1mod_sum_gsl>.

          ASSIGN COMPONENT bsl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_bsl>.
          ASSIGN COMPONENT bsl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_bsl>.
          ASSIGN COMPONENT csl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_csl>.
          ASSIGN COMPONENT csl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_csl>.
          ASSIGN COMPONENT dsl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_dsl>.
          ASSIGN COMPONENT dsl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_dsl>.
          ASSIGN COMPONENT esl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_esl>.
          ASSIGN COMPONENT esl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_esl>.
          ASSIGN COMPONENT fsl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_fsl>.
          ASSIGN COMPONENT fsl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_fsl>.
          ASSIGN COMPONENT gsl OF STRUCTURE ls_glu1mod TO <ls_glu1mod_gsl>.
          ASSIGN COMPONENT gsl OF STRUCTURE ls_glu1mod_sum TO <ls_glu1mod_sum_gsl>.

          ADD <ls_glu1mod_bsl> TO <ls_glu1mod_sum_bsl>.
          ADD <ls_glu1mod_csl> TO <ls_glu1mod_sum_csl>.
          ADD <ls_glu1mod_dsl> TO <ls_glu1mod_sum_dsl>.
          ADD <ls_glu1mod_esl> TO <ls_glu1mod_sum_esl>.
          ADD <ls_glu1mod_fsl> TO <ls_glu1mod_sum_fsl>.
          ADD <ls_glu1mod_gsl> TO <ls_glu1mod_sum_gsl>.
        ENDIF.
      ELSE.

        CLEAR: is_glu1, it_glu1, it_acccr, it_accit.
        MOVE-CORRESPONDING ls_glu1mod_sum TO is_glu1.
        APPEND is_glu1 TO it_glu1.

        CALL FUNCTION 'G_GLU1_TO_AC_DOC_TRANSFORM'
          EXPORTING
            ib_acdoc_compatibility_mode = ''
          TABLES
            t_glu1  = it_glu1
            t_accit = it_accit
            t_acccr = it_acccr.

        READ TABLE it_accit INDEX 1 INTO is_accit.
        CLEAR is_bseg.
        MOVE-CORRESPONDING ls_glu1mod_sum TO is_bseg.
        MOVE-CORRESPONDING is_accit TO is_bseg.
        is_bseg-buzei = ls_glu1mod_sum-buzei.

        IF is_bseg-bukrs NE gs_x001-bukrs.
          CALL FUNCTION 'FI_CURRENCY_INFORMATION'
            EXPORTING
              i_bukrs = ls_glu1mod-rbukrs
            IMPORTING
              e_x001  = ls_x001.
        ELSE.
          ls_x001 = gs_x001.
        ENDIF.

        LOOP AT it_acccr INTO ls_acccr.
          IF ls_acccr-wrbtr < 0.
            is_bseg-shkzg = 'H'.
            EXIT.
          ELSEIF ls_acccr-wrbtr > 0.
            is_bseg-shkzg = 'S'.
            EXIT.
          ENDIF.
        ENDLOOP.
        LOOP AT it_acccr INTO ls_acccr.
          CASE ls_acccr-curtp.
            WHEN '10'.
              is_bseg-dmbtr = abs( ls_acccr-wrbtr ).
            WHEN '00'.
              is_bseg-wrbtr = abs( ls_acccr-wrbtr ).
            WHEN ls_x001-curt2.
              is_bseg-dmbe2 = abs( ls_acccr-wrbtr ).
            WHEN ls_x001-curt3.
              is_bseg-dmbe3 = abs( ls_acccr-wrbtr ).
          ENDCASE.
        ENDLOOP.
        is_bseg-pswbt = abs( ls_glu1mod_sum-wsl ).
        is_bseg-pswsl = ls_glu1mod_sum-rwcur.
        APPEND is_bseg TO lt_bseg_build.
        CLEAR ls_glu1mod_sum.                               "VE13082018
        MOVE-CORRESPONDING ls_glu1mod TO ls_glu1mod_sum.    "VE13082018
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF ls_glu1mod_sum IS NOT INITIAL.
    CLEAR: is_glu1, it_glu1, it_acccr, it_accit.
    MOVE-CORRESPONDING ls_glu1mod_sum TO is_glu1.
    APPEND is_glu1 TO it_glu1.

    CALL FUNCTION 'G_GLU1_TO_AC_DOC_TRANSFORM'
      EXPORTING
        ib_acdoc_compatibility_mode = ''
      TABLES
        t_glu1  = it_glu1
        t_accit = it_accit
        t_acccr = it_acccr.

    READ TABLE it_accit INDEX 1 INTO is_accit.
    CLEAR is_bseg.
    MOVE-CORRESPONDING ls_glu1mod_sum TO is_bseg.
    MOVE-CORRESPONDING is_accit TO is_bseg.
    is_bseg-buzei = ls_glu1mod_sum-buzei. "VE30/07/2018

    IF is_bseg-bukrs NE gs_x001-bukrs.
      CALL FUNCTION 'FI_CURRENCY_INFORMATION'
        EXPORTING
          i_bukrs = ls_glu1mod-rbukrs
        IMPORTING
          e_x001  = ls_x001.
    ELSE.
      ls_x001 = gs_x001.
    ENDIF.

    LOOP AT it_acccr INTO ls_acccr.
      CASE ls_acccr-curtp.
        WHEN '10'.
          IF ls_acccr-wrbtr > 0.
            is_bseg-dmbtr = ls_acccr-wrbtr.
            is_bseg-shkzg = 'S'.
          ELSE.
            is_bseg-dmbtr = abs( ls_acccr-wrbtr ).
            is_bseg-shkzg = 'H'.
          ENDIF.
        WHEN '00'.
          is_bseg-wrbtr = abs( ls_acccr-wrbtr ).
        WHEN ls_x001-curt2.
          is_bseg-dmbe2 = abs( ls_acccr-wrbtr ).
        WHEN ls_x001-curt3.
          is_bseg-dmbe3 = abs( ls_acccr-wrbtr ).
      ENDCASE.
    ENDLOOP.
    is_bseg-pswbt = abs( ls_glu1mod_sum-wsl ).
    is_bseg-pswsl = ls_glu1mod_sum-rwcur.
    APPEND is_bseg TO lt_bseg_build.
  ENDIF.
ENDFORM.                    "move_glu1_split

*&---------------------------------------------------------------------*
*&      Form  build_indexes
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_indexes.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_bsas LIKE bsasmoddisp.
  DATA ls_bsis LIKE bsismoddisp.
  DATA ls_bsak LIKE bsakmoddisp.
  DATA ls_bsik LIKE bsikmoddisp.
  DATA ls_bsad LIKE bsadmoddisp.
  DATA ls_bsid LIKE bsidmoddisp.
  DATA ls_bkpf LIKE bkpfmoddisp.
  DATA ld_subrc_bkpf TYPE sy-subrc.
  DATA ls_skb1 LIKE skb1.
  DATA ld_ktopl TYPE t001-ktopl.
  DATA ld_t030 TYPE i.
  DATA ld_count TYPE i.

  LOOP AT gt_bseg INTO ls_bseg.
    READ TABLE gt_bkpf INTO ls_bkpf
    WITH KEY bukrs = ls_bseg-bukrs
             belnr = ls_bseg-belnr
             gjahr = ls_bseg-gjahr.
    ld_subrc_bkpf = sy-subrc.

    CASE ls_bseg-bschl(1).
      WHEN '0' OR '1'.
        ls_bseg-koart = 'D'.
      WHEN '2' OR '3'.
        ls_bseg-koart = 'K'.
      WHEN '7'.
        ls_bseg-koart = 'A'.
      WHEN '8' OR '9'.
        IF ls_bseg-bschl EQ '89' OR
           ls_bseg-bschl EQ '99'.
          ls_bseg-koart = 'M'.
        ELSE.
          ls_bseg-koart = 'S'.
        ENDIF.
      WHEN OTHERS.
***BSCHL might still be initial
        SELECT SINGLE * FROM skb1
          INTO ls_skb1
          WHERE bukrs = ls_bseg-bukrs
            AND saknr = ls_bseg-hkont
          .
        IF ls_skb1-mitkz IS NOT INITIAL.
          ls_bseg-koart = ls_skb1-mitkz.
        ELSE.
*** material account
          SELECT SINGLE ktopl FROM t001
            INTO ld_ktopl
            WHERE bukrs = ls_bseg-bukrs
            .

          SELECT COUNT( * ) FROM t030 INTO ld_t030
            WHERE ktopl = ld_ktopl
              AND ktosl = 'BSX'
              AND konts = ls_bseg-hkont.
          IF ld_t030 NE 0.
            ls_bseg-koart = 'M'.
          ELSE.
            ls_bseg-koart = 'S'.
          ENDIF.
        ENDIF.
    ENDCASE.

    CASE ls_bseg-koart.
      WHEN 'K'.
        IF ls_bseg-augbl = ' '.

          SELECT COUNT(*) FROM bsik
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsik INTO ls_bsik
      WHERE bukrs = ls_bseg-bukrs
    AND belnr = ls_bseg-belnr
    AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsik.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsik.
            ls_bsik-zuonr = ls_bseg-zuonr.
            ls_bsik-orig = 'BUIL'.
            ls_bsik-check = 'X'.
            ls_bsik-control = '@5D@'.
            APPEND ls_bsik TO gt_bsik.
            MOVE-CORRESPONDING ls_bsik TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSIK'.
            APPEND ls_flag TO gt_flag.
          ENDIF.

        ELSE.

          SELECT COUNT(*) FROM bsak
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsak INTO ls_bsak
      WHERE bukrs = ls_bseg-bukrs
    AND belnr = ls_bseg-belnr
    AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsak.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsak.
            ls_bsak-zuonr = ls_bseg-zuonr.
            ls_bsak-orig = 'BUIL'.
            ls_bsak-check = 'X'.
            ls_bsak-control = '@5D@'.
            APPEND ls_bsak TO gt_bsak.
            MOVE-CORRESPONDING ls_bsak TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSAK'.
            APPEND ls_flag TO gt_flag.
          ENDIF.
        ENDIF.
      WHEN 'D'.
        IF ls_bseg-augbl = ' '.

          SELECT COUNT(*) FROM bsid
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsid INTO ls_bsid
      WHERE bukrs = ls_bseg-bukrs
    AND belnr = ls_bseg-belnr
    AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsid.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsid.
            ls_bsid-zuonr = ls_bseg-zuonr.
            ls_bsid-orig = 'BUIL'.
            ls_bsid-check = 'X'.
            ls_bsid-control = '@5D@'.
            APPEND ls_bsid TO gt_bsid.
            MOVE-CORRESPONDING ls_bsid TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSID'.
            APPEND ls_flag TO gt_flag.
          ENDIF.
        ELSE.

          SELECT COUNT(*) FROM bsad
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsad INTO ls_bsad
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsad.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsad.
            ls_bsad-zuonr = ls_bseg-zuonr.
            ls_bsad-orig = 'BUIL'.
            ls_bsad-check = 'X'.
            ls_bsad-control = '@5D@'.
            APPEND ls_bsad TO gt_bsad.
            MOVE-CORRESPONDING ls_bsad TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSAD'.
            APPEND ls_flag TO gt_flag.
          ENDIF.

        ENDIF.

      WHEN OTHERS.
        IF ls_bseg-augbl = ' ' AND ls_bseg-xkres = 'X'.
          SELECT COUNT(*) FROM bsis
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsis INTO ls_bsis
      WHERE bukrs = ls_bseg-bukrs
    AND belnr = ls_bseg-belnr
    AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsis.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsis.
            ls_bsis-zuonr = ls_bseg-zuonr.
            ls_bsis-orig = 'BUIL'.
            ls_bsis-check = 'X'.
            ls_bsis-control = '@5D@'.
            APPEND ls_bsis TO gt_bsis.
            MOVE-CORRESPONDING ls_bsis TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSIS'.
            APPEND ls_flag TO gt_flag.
          ENDIF.
        ELSEIF ls_bseg-xkres = 'X'.
          SELECT COUNT(*) FROM bsas
            INTO ld_count
                  WHERE bukrs = ls_bseg-bukrs
              AND belnr = ls_bseg-belnr
              AND gjahr = ls_bseg-gjahr
              AND buzei = ls_bseg-buzei
              .

          LOOP AT gt_bsas INTO ls_bsas
WHERE bukrs = ls_bseg-bukrs
AND belnr = ls_bseg-belnr
AND gjahr = ls_bseg-gjahr
AND buzei = ls_bseg-buzei.
            ADD 1 TO ld_count.
          ENDLOOP.

          IF ld_count = 0.
            IF ld_subrc_bkpf = 0.
              MOVE-CORRESPONDING ls_bkpf TO ls_bsas.
            ENDIF.
            MOVE-CORRESPONDING ls_bseg TO ls_bsas.
            ls_bsas-zuonr = ls_bseg-zuonr.
            ls_bsas-orig = 'BUIL'.
            ls_bsas-check = 'X'.
            ls_bsas-control = '@5D@'.
            APPEND ls_bsas TO gt_bsas.
            MOVE-CORRESPONDING ls_bsas TO ls_flag.
            ls_flag-control = '@5D@'.
            ls_flag-error = 'BUILD BSAS'.
            APPEND ls_flag TO gt_flag.
          ENDIF.
        ENDIF.
    ENDCASE.
  ENDLOOP.
ENDFORM.                    "build_indexes

*&---------------------------------------------------------------------*
*&      Form  build_splinfo
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_splinfo.

  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA sum_splinfo_pswbt TYPE pswbt.
  DATA sum_splinfo_val_wrbtr TYPE wrbtr.
  DATA sum_splinfo_val_dmbtr TYPE dmbtr.
  DATA lt_glu1 TYPE TABLE OF glu1.
  DATA lt_accit TYPE TABLE OF accit.
  DATA ls_accit TYPE accit.
  DATA lt_acccr TYPE TABLE OF acccr.
  DATA ls_acccr TYPE acccr.
  DATA lt_acchd TYPE TABLE OF acchd.
  DATA ls_splinfo LIKE LINE OF gt_splinfo.
  DATA ls_splinfo_val LIKE LINE OF gt_splinfo_val.
  DATA ld_spl_no TYPE i.
  DATA ls_glu1 LIKE glu1.
  DATA lt_glu1_func TYPE TABLE OF glu1.
  DATA ld_b_inactive TYPE fagl_split_actc-b_inactive.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA lt_splinfo TYPE TABLE OF fagl_splinfo.
  DATA lt_splinfo_val TYPE TABLE OF fagl_splinfo_val.
  DATA ls_splinfo_sim TYPE fagl_splinfo.
  DATA ls_splinfo_dtab LIKE LINE OF gt_splinfo.
  DATA ls_splinfo_check TYPE fagl_splinfo.
  DATA ls_splinfo_val_sim TYPE fagl_splinfo_val.
  DATA ls_splinfo_val_dtab LIKE LINE OF gt_splinfo_val.
  DATA ls_splinfo_val_check TYPE fagl_splinfo_val.
  DATA ld_tabix TYPE sy-tabix.
  DATA ld_tabix_val TYPE sy-tabix.
  DATA ls_splinfo_val_build LIKE LINE OF gt_splinfo_val.
  DATA ls_splinfo_build LIKE LINE OF gt_splinfo.


  LOOP AT gt_bkpf INTO ls_bkpf.
    CLEAR lt_splinfo[]. REFRESH lt_splinfo[].
    CLEAR lt_splinfo_val[]. REFRESH lt_splinfo_val[].
    CLEAR pairing_counter.
    IF gd_mass = 'X'.
      ld_b_inactive = gd_b_inactive.
    ELSE.
      IF gs_fagl_activec-splitmethd IS NOT INITIAL.
        SELECT SINGLE b_inactive
          INTO ld_b_inactive
          FROM fagl_split_actc
          WHERE bukrs = ls_bkpf-bukrs.
      ELSE.
        ld_b_inactive = 'X'.
      ENDIF.
    ENDIF.

    IF ld_b_inactive IS INITIAL.
      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_bkpf-bukrs
        AND belnr = ls_bkpf-belnr
        AND gjahr = ls_bkpf-gjahr.
        CLEAR ls_glu1-xsplitmod.
        IF ls_bseg-xopvw = 'X'.
          ls_glu1-xsplitmod = 'X'.
        ELSE.
          READ TABLE gt_glu1 INTO ls_glu1
  WITH KEY belnr = ls_bseg-belnr
           rbukrs = ls_bseg-bukrs
           gjahr = ls_bseg-gjahr
           buzei = ls_bseg-buzei.
        ENDIF.
        CLEAR sum_splinfo_pswbt.
        CLEAR sum_splinfo_val_wrbtr.
        CLEAR sum_splinfo_val_dmbtr.

        IF ls_glu1-xsplitmod = 'X'.
          LOOP AT gt_splinfo_val INTO ls_splinfo_val
            WHERE bukrs = ls_bseg-bukrs
            AND belnr = ls_bseg-belnr
            AND buzei = ls_bseg-buzei
            AND gjahr = ls_bseg-gjahr.
            IF ls_splinfo_val-curtp = '00'.
              sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr + ls_splinfo_val-wrbtr.
            ELSEIF ls_splinfo_val-curtp = '10'.
              sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr + ls_splinfo_val-wrbtr.
            ENDIF.
          ENDLOOP.

          LOOP AT gt_splinfo INTO ls_splinfo
                    WHERE bukrs = ls_bseg-bukrs
            AND belnr = ls_bseg-belnr
            AND buzei = ls_bseg-buzei
            AND gjahr = ls_bseg-gjahr.
            sum_splinfo_pswbt = sum_splinfo_pswbt + ls_splinfo-pswbt.
          ENDLOOP.

          IF ls_bseg-shkzg = 'H'.
            sum_splinfo_pswbt = sum_splinfo_pswbt * -1.
            sum_splinfo_val_dmbtr = sum_splinfo_val_dmbtr * -1.
            sum_splinfo_val_wrbtr = sum_splinfo_val_wrbtr * -1.
          ENDIF.

          READ TABLE gt_glu1 INTO ls_glu1
          WITH KEY belnr = ls_bseg-belnr
                   rbukrs = ls_bseg-bukrs
                   gjahr = ls_bseg-gjahr
                   buzei = ls_bseg-buzei.

          IF ls_bseg-pswbt = sum_splinfo_pswbt
            AND ls_bseg-dmbtr = sum_splinfo_val_dmbtr
            AND ls_bseg-wrbtr = sum_splinfo_val_wrbtr.
          ELSE.
            IF ls_bkpf-orig NE 'BUIL'.
              PERFORM process_splinfo USING ls_bkpf
                              CHANGING lt_splinfo
                                       lt_splinfo_val.
            ELSE.
              CLEAR ld_spl_no.
              LOOP AT gt_glu1mod INTO ls_glu1mod
                WHERE belnr = ls_bseg-belnr
                AND rbukrs = ls_bseg-bukrs
                AND gjahr = ls_bseg-gjahr
                AND buzei = ls_bseg-buzei
                AND rldnr = gd_leading_ledger.
                ADD 1 TO ld_spl_no.
                REFRESH lt_glu1_func.
                MOVE-CORRESPONDING ls_glu1mod TO ls_glu1.
                APPEND ls_glu1 TO lt_glu1_func.
                CALL FUNCTION 'G_GLU1_TO_AC_DOC_TRANSFORM'
                  EXPORTING
                    ib_acdoc_compatibility_mode = ''
                  TABLES
                    t_glu1           = lt_glu1_func
                    t_acchd          = lt_acchd
                    t_accit          = lt_accit
                    t_acccr          = lt_acccr
                  EXCEPTIONS
                    overflow_occured = 1
                    OTHERS           = 2.

                READ TABLE lt_accit INTO ls_accit INDEX 1.
                MOVE-CORRESPONDING ls_accit TO ls_splinfo_sim.
                ls_splinfo_sim-buzei = ls_glu1mod-buzei.
                ls_splinfo_sim-spl_no = ld_spl_no.
                APPEND ls_splinfo_sim TO lt_splinfo.


                LOOP AT lt_acccr INTO ls_acccr.
                  MOVE-CORRESPONDING ls_splinfo_sim TO ls_splinfo_val_sim.
                  MOVE-CORRESPONDING ls_acccr TO ls_splinfo_val_sim.
                  APPEND ls_splinfo_val_sim TO lt_splinfo_val.
                  CLEAR ls_splinfo_val_sim.
                ENDLOOP.
                CLEAR lt_glu1_func.
                CLEAR ls_splinfo_sim.
              ENDLOOP.
            ENDIF.

            LOOP AT lt_splinfo INTO ls_splinfo_sim.
              READ TABLE gt_splinfo INTO ls_splinfo_dtab
              WITH KEY belnr = ls_splinfo_sim-belnr
                        bukrs = ls_splinfo_sim-bukrs
                        gjahr = ls_splinfo_sim-gjahr
                        buzei = ls_splinfo_sim-buzei
                        spl_no = ls_splinfo_sim-spl_no.
              IF sy-subrc = 0.
                ld_tabix = sy-tabix.
                MOVE-CORRESPONDING ls_splinfo_dtab TO ls_splinfo_check.
                IF ls_splinfo_sim = ls_splinfo_check.
                  "simulated splinfo is the same as dtab...checking val.
                  LOOP AT lt_splinfo_val INTO ls_splinfo_val_sim
                    WHERE belnr = ls_splinfo_sim-belnr
                      AND    bukrs = ls_splinfo_sim-bukrs
                      AND    gjahr = ls_splinfo_sim-gjahr
                      AND    buzei = ls_splinfo_sim-buzei
                      AND    spl_no = ls_splinfo_sim-spl_no.
                    READ TABLE gt_splinfo_val INTO ls_splinfo_val_dtab
                      WITH KEY belnr = ls_splinfo_val_sim-belnr
                          bukrs = ls_splinfo_val_sim-bukrs
                         gjahr = ls_splinfo_val_sim-gjahr
                          buzei = ls_splinfo_val_sim-buzei
                          spl_no = ls_splinfo_val_sim-spl_no
                          curtp = ls_splinfo_val_sim-curtp.
                    IF sy-subrc = 0.
                      ld_tabix_val = sy-tabix.
                      MOVE-CORRESPONDING ls_splinfo_val_dtab TO ls_splinfo_val_check.
                      IF ls_splinfo_val_sim = ls_splinfo_val_check.
                        "simulated splinfo_val and splinfo are the same as dtab.
                        CONTINUE.
                      ELSE.
                        "simulated splinfo_val is different than dtab.
                        ADD 1 TO pairing_counter.
                        MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                        ls_splinfo_val_build-pairing = pairing_counter.
                        ls_splinfo_val_dtab-pairing = pairing_counter.
                        ls_splinfo_val_dtab-error = 'SPLINFO_VAL MISMATCH'.
                        ls_splinfo_val_dtab-control = '@5D@'.
                        ls_splinfo_val_dtab-check = 'O'.
                        MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                        ls_flag-error = 'SPLINFO_VAL MISMATCH'.
                        APPEND ls_flag TO gt_flag.
                        MODIFY gt_splinfo_val FROM ls_splinfo_val_dtab INDEX ld_tabix.
                        ls_splinfo_val_build-error = 'SPLINFO_VAL MISMATCH'.
                        ls_splinfo_val_build-control = '@5D@'.
                        ls_splinfo_val_build-orig = 'CORR'.
                        ls_splinfo_val_build-check = 'X'.
                        APPEND ls_splinfo_val_build TO gt_splinfo_val.
                      ENDIF.
                    ELSE.
                      "simulated splinfo_val is missing in dtab
                      MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                      ls_splinfo_val_build-orig = 'BUIL'.
                      ls_splinfo_val_build-check = 'X'.
                      ls_splinfo_val_build-control = '@5D@'.
                      CLEAR ls_splinfo_val_build-pairing.
                      APPEND ls_splinfo_val_build TO gt_splinfo_val.
                      MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                      ls_flag-error = 'BUILD SPLINFO_VAL'.
                      APPEND ls_flag TO gt_flag.
                      CLEAR ls_splinfo_val_build.
                    ENDIF.
                  ENDLOOP.

                ELSE.
                  "simulated splinfo is different than dtab
                  ADD 1 TO pairing_counter.
                  MOVE-CORRESPONDING ls_splinfo_sim TO ls_splinfo_build.
                  ls_splinfo_build-pairing = pairing_counter.
                  ls_splinfo_dtab-pairing = pairing_counter.
                  ls_splinfo_dtab-error = 'SPLINFO MISMATCH'.
                  ls_splinfo_dtab-control = '@5D@'.
                  ls_splinfo_dtab-check = 'O'.
                  MODIFY gt_splinfo FROM ls_splinfo_dtab INDEX ld_tabix.
                  ls_splinfo_build-error = 'SPLINFO MISMATCH'.
                  ls_splinfo_build-control = '@5D@'.
                  ls_splinfo_build-orig = 'CORR'.
                  ls_splinfo_build-check = 'X'.
                  APPEND ls_splinfo_build TO gt_splinfo.
                  MOVE-CORRESPONDING ls_splinfo_build TO ls_flag.
                  ls_flag-error = 'SPLINFO MISMATCH'.
                  APPEND ls_flag TO gt_flag.
                  LOOP AT lt_splinfo_val INTO ls_splinfo_val_sim
        WHERE belnr = ls_splinfo_build-belnr
          AND    bukrs = ls_splinfo_build-bukrs
          AND    gjahr = ls_splinfo_build-gjahr
          AND    buzei = ls_splinfo_build-buzei
          AND    spl_no = ls_splinfo_build-spl_no.
                    READ TABLE gt_splinfo_val INTO ls_splinfo_val_dtab
                      WITH KEY belnr = ls_splinfo_val_sim-belnr
                          bukrs = ls_splinfo_val_sim-bukrs
                         gjahr = ls_splinfo_val_sim-gjahr
                          buzei = ls_splinfo_val_sim-buzei
                          spl_no = ls_splinfo_val_sim-spl_no
                          curtp = ls_splinfo_val_sim-curtp.
                    IF sy-subrc = 0.
                      ld_tabix_val = sy-tabix.
                      MOVE-CORRESPONDING ls_splinfo_val_dtab TO ls_splinfo_val_check.
                      IF ls_splinfo_val_check = ls_splinfo_val_sim.
                        "simulated splinfo_val and splinfo are the same as dtab.
                        CONTINUE.
                      ELSE.
                        "simulated splinfo_val is different than dtab.
                        ADD 1 TO pairing_counter.
                        MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                        ls_splinfo_val_build-pairing = pairing_counter.
                        ls_splinfo_val_dtab-pairing = pairing_counter.
                        ls_splinfo_val_dtab-error = 'SPLINFO_VAL MISMATCH'.
                        ls_splinfo_val_dtab-control = '@5D@'.
                        ls_splinfo_val_dtab-check = 'O'.
                        MODIFY gt_splinfo_val FROM ls_splinfo_val_dtab INDEX ld_tabix_val.
                        ls_splinfo_val_build-error = 'SPLINFO_VAL MISMATCH'.
                        ls_splinfo_val_build-control = '@5D@'.
                        ls_splinfo_val_build-orig = 'CORR'.
                        ls_splinfo_val_build-check = 'X'.
                        APPEND ls_splinfo_val_build TO gt_splinfo_val.
                        MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                        ls_flag-error = 'SPLINFO_VAL MISMATCH'.
                        APPEND ls_flag TO gt_flag.
                      ENDIF.

                    ELSE.
                      "simulated splinfo_val is missing in dtab
                      MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                      ls_splinfo_val_build-orig = 'BUIL'.
                      ls_splinfo_val_build-check = 'X'.
                      ls_splinfo_val_build-control = '@5D@'.
                      CLEAR ls_splinfo_val_build-pairing.
                      APPEND ls_splinfo_val_build TO gt_splinfo_val.
                      MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                      ls_flag-error = 'BUILD SPLINFO_VAL'.
                      APPEND ls_flag TO gt_flag.
                      CLEAR ls_splinfo_val_build.
                    ENDIF.
                  ENDLOOP.
                ENDIF.
              ELSE.
                "simulated splinfo is missing in dtab
                MOVE-CORRESPONDING ls_splinfo_sim TO ls_splinfo_build.
                ls_splinfo_build-orig = 'BUIL'.
                ls_splinfo_build-check = 'X'.
                ls_splinfo_build-control = '@5D@'.
                CLEAR ls_splinfo_build-pairing.
                APPEND ls_splinfo_build TO gt_splinfo.
                MOVE-CORRESPONDING ls_splinfo_build TO ls_flag.
                ls_flag-error = 'BUILD SPLINFO'.
                APPEND ls_flag TO gt_flag.

                LOOP AT lt_splinfo_val INTO ls_splinfo_val_sim
        WHERE belnr = ls_splinfo_build-belnr
          AND    bukrs = ls_splinfo_build-bukrs
          AND    gjahr = ls_splinfo_build-gjahr
          AND    buzei = ls_splinfo_build-buzei
          AND    spl_no = ls_splinfo_build-spl_no.
                  READ TABLE gt_splinfo_val INTO ls_splinfo_val_dtab
                    WITH KEY belnr = ls_splinfo_val_sim-belnr
                        bukrs = ls_splinfo_val_sim-bukrs
                       gjahr = ls_splinfo_val_sim-gjahr
                        buzei = ls_splinfo_val_sim-buzei
                        spl_no = ls_splinfo_val_sim-spl_no
                        curtp = ls_splinfo_val_sim-curtp.
                  IF sy-subrc = 0.
                    ld_tabix_val = sy-tabix.
                    MOVE-CORRESPONDING ls_splinfo_val_dtab TO ls_splinfo_val_check.
                    IF ls_splinfo_val_check = ls_splinfo_val_sim.
                      "simulated splinfo_val and splinfo are the same as dtab.
                      CONTINUE.
                    ELSE.
                      "simulated splinfo_val is different than dtab.
                      ADD 1 TO pairing_counter.
                      MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                      ls_splinfo_val_build-pairing = pairing_counter.
                      ls_splinfo_val_dtab-pairing = pairing_counter.
                      ls_splinfo_val_dtab-error = 'SPLINFO_VAL MISMATCH'.
                      ls_splinfo_val_dtab-control = '@5D@'.
                      ls_splinfo_val_dtab-check = 'O'.
                      MODIFY gt_splinfo_val FROM ls_splinfo_val_dtab INDEX ld_tabix_val.
                      ls_splinfo_val_build-error = 'SPLINFO_VAL MISMATCH'.
                      ls_splinfo_val_build-control = '@5D@'.
                      ls_splinfo_val_build-orig = 'CORR'.
                      ls_splinfo_val_build-check = 'X'.
                      APPEND ls_splinfo_val_build TO gt_splinfo_val.
                      MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                      ls_flag-error = 'SPLINFO_VAL MISMATCH'.
                      APPEND ls_flag TO gt_flag.
                    ENDIF.
                  ELSE.
                    "simulated splinfo_val is missing in dtab
                    MOVE-CORRESPONDING ls_splinfo_val_sim TO ls_splinfo_val_build.
                    ls_splinfo_val_build-orig = 'BUIL'.
                    ls_splinfo_val_build-check = 'X'.
                    ls_splinfo_val_build-control = '@5D@'.
                    CLEAR ls_splinfo_val_build-pairing.
                    APPEND ls_splinfo_val_build TO gt_splinfo_val.
                    MOVE-CORRESPONDING ls_splinfo_val_build TO ls_flag.
                    ls_flag-error = 'BUILD SPLINFO_VAL'.
                    APPEND ls_flag TO gt_flag.
                    CLEAR ls_splinfo_val_build.
                  ENDIF.
                ENDLOOP.
                CLEAR ls_splinfo_build.
              ENDIF.
            ENDLOOP.
            LOOP AT lt_splinfo INTO ls_splinfo_sim.
              READ TABLE gt_splinfo WITH KEY
                bukrs = ls_splinfo_sim-bukrs
                belnr = ls_splinfo_sim-belnr
                gjahr = ls_splinfo_sim-gjahr
                buzei = ls_splinfo_sim-buzei
                spl_no = ls_splinfo_sim-spl_no
                TRANSPORTING NO FIELDS.
              IF sy-subrc = 4.
                MOVE-CORRESPONDING ls_splinfo_sim TO ls_splinfo_build.
                ls_splinfo_build-orig = 'BUIL'.
                ls_splinfo_build-check = 'X'.
                ls_splinfo_build-control = '@5D@'.
                CLEAR ls_splinfo_build-pairing.
                APPEND ls_splinfo_build TO gt_splinfo.
                MOVE-CORRESPONDING ls_splinfo_build TO ls_flag.
                ls_flag-error = 'BUILD SPLINFO'.
                APPEND ls_flag TO gt_flag.
                CLEAR ls_splinfo_build.
              ENDIF.



            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "check that there are no superfluous SPLINFOS.
    IF lt_splinfo[] IS NOT INITIAL.
      LOOP AT gt_splinfo INTO ls_splinfo_dtab
        WHERE belnr = ls_bkpf-belnr
        AND bukrs = ls_bkpf-bukrs
        AND gjahr = ls_bkpf-gjahr.
        ld_tabix = sy-tabix.
        READ TABLE lt_splinfo TRANSPORTING NO FIELDS
        WITH KEY spl_no = ls_splinfo_dtab-spl_no
        buzei = ls_splinfo_dtab-buzei
        bukrs = ls_splinfo_dtab-bukrs
        gjahr = ls_splinfo_dtab-gjahr
        belnr = ls_splinfo_dtab-belnr.
        IF sy-subrc = 4.
          ls_splinfo_dtab-error = 'SUPERFLUOUS SPLINFO'.
          ls_splinfo_dtab-control = '@5D@'.
          ls_splinfo_dtab-check = ' '.
          MODIFY gt_splinfo FROM ls_splinfo_dtab INDEX ld_tabix.
          MOVE-CORRESPONDING ls_splinfo_dtab TO ls_flag.
          ls_flag-error = 'SUPERFLUOUS SPLINFO'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.


      LOOP AT gt_splinfo_val INTO ls_splinfo_val_dtab
        WHERE belnr = ls_bkpf-belnr
        AND bukrs = ls_bkpf-bukrs
        AND gjahr = ls_bkpf-gjahr.
        ld_tabix = sy-tabix.
        READ TABLE lt_splinfo_val TRANSPORTING NO FIELDS
       WITH KEY belnr = ls_splinfo_val_dtab-belnr
                           bukrs = ls_splinfo_val_dtab-bukrs
                          gjahr = ls_splinfo_val_dtab-gjahr
                           buzei = ls_splinfo_val_dtab-buzei
                           spl_no = ls_splinfo_val_dtab-spl_no.
        IF sy-subrc = 4.
          ls_splinfo_val_dtab-error = 'SPLINFO_VAL MISMATCH'.
          ls_splinfo_val_dtab-control = '@5D@'.
          ls_splinfo_val_dtab-check = ' '.
          MODIFY gt_splinfo_val FROM ls_splinfo_val_dtab INDEX ld_tabix.
          MOVE-CORRESPONDING ls_splinfo_val_dtab TO ls_flag.
          ls_flag-error = 'SPLINFO_VAL MISMATCH'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
      SORT gt_splinfo.
      DELETE ADJACENT DUPLICATES FROM gt_splinfo.
      SORT gt_splinfo_val.
      DELETE ADJACENT DUPLICATES FROM gt_splinfo_val.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "build_splinfo

FORM process_splinfo USING ls_bkpf LIKE LINE OF gt_bkpf
                     CHANGING lt_splinfo_sim TYPE fagl_splinfo_t
                              lt_val_sim TYPE fagl_splinfo_val_t.
  RANGES: r_bukrs FOR bkpf-bukrs.
  RANGES: r_belnr FOR bkpf-belnr.
  RANGES: r_gjahr FOR bkpf-gjahr.
  DATA ld_rldnr TYPE LINE OF fagl_rldnr_tab.
  DATA: r_rldnr TYPE fagl_rldnr_tab.
  DATA: t_glu1 TYPE TABLE OF glu1 WITH HEADER LINE.
  DATA: ls_glu1 TYPE glu1.
  DATA: t_splinfo TYPE fagl_ts_splinfo.
  DATA: t_val TYPE fagl_ts_splinfo_val.
  DATA: lt_glu1_db TYPE TABLE OF glu1 WITH HEADER LINE.
  DATA: lt_splinfo_db TYPE TABLE OF fagl_splinfo WITH HEADER LINE.
  DATA: lt_val_db TYPE TABLE OF fagl_splinfo_val WITH HEADER LINE.
  DATA: ls_spl TYPE fagl_splinfo.
  DATA: lt_splinfo_check TYPE TABLE OF fagl_splinfo.
  DATA: ls_splinfo_check TYPE fagl_splinfo.
  DATA: lt_splinfo_val_check TYPE TABLE OF fagl_splinfo_val.
  DATA: ls_splinfo_val_check TYPE fagl_splinfo_val.
  DATA: ls_splinfo_sim TYPE fagl_splinfo.
  DATA ls_val_sim TYPE fagl_splinfo_val.


  REFRESH: r_bukrs, r_belnr, r_gjahr, r_rldnr.
  CLEAR: r_bukrs, r_belnr, r_gjahr.
  REFRESH: t_glu1, t_splinfo, t_val, lt_splinfo_sim, lt_val_sim.
  REFRESH: lt_glu1_db, lt_splinfo_db, lt_val_db.
*** build ranges: BUKRS
  r_bukrs-sign = 'I'.
  r_bukrs-option = 'EQ'.
  r_bukrs-low = ls_bkpf-bukrs.
  APPEND r_bukrs.
*** BELNR
  r_belnr-sign = 'I'.
  r_belnr-option = 'EQ'.
  r_belnr-low = ls_bkpf-belnr.
  APPEND r_belnr.
*** GJAHR
  r_gjahr-sign = 'I'.
  r_gjahr-option = 'EQ'.
  r_gjahr-low = ls_bkpf-gjahr.
  APPEND r_gjahr.
*** RLDNR
  CALL FUNCTION 'FAGL_GET_REPRESENTATIVE_LEDGER'
    EXPORTING
      i_ldgrp = ls_bkpf-ldgrp
      i_bukrs = ls_bkpf-bukrs
    IMPORTING
      e_rldnr = ld_rldnr.
  APPEND ld_rldnr TO r_rldnr.

  CALL FUNCTION 'G_TRACE_START'
    EXCEPTIONS
      trace_already_on = 1
      OTHERS           = 2.

  IF acdoca_active = 1.
    CALL METHOD (cl_fins_sif_services)=>(subseq_post_set).
  ENDIF.

  PERFORM fagl_subseq_posting
    USING
       r_bukrs[]
       r_gjahr[]
       r_belnr[]
       r_rldnr[]
       abap_true
       abap_false
       abap_true.

  IF acdoca_active = 1.
    CALL METHOD (cl_fins_sif_services)=>(subseq_post_init).
  ENDIF.

*** import GLU1 contents from memory
  IMPORT t_glu1 FROM MEMORY ID 'T_GLU1'.
*** import FAGL_SPLINFO/-_VAL data from memory
  CALL METHOD cl_fagl_oi_read=>get_splinfo_data_ext
    IMPORTING
      gt_out_splinfo     = t_splinfo
      gt_out_splinfo_val = t_val.
  APPEND LINES OF t_splinfo TO lt_splinfo_sim.
  APPEND LINES OF t_val TO lt_val_sim.
*** free buffer
  CALL FUNCTION 'G_TRACE_STOP'
    EXCEPTIONS
      is_already_off = 1
      OTHERS         = 2.

ENDFORM.

FORM display_data.

  SORT gt_flag_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING rldnr ASCENDING control ASCENDING error ASCENDING.
  SORT gt_protocol_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING rldnr ASCENDING type ASCENDING message ASCENDING.
  DELETE ADJACENT DUPLICATES FROM gt_flag_store.
  DELETE ADJACENT DUPLICATES FROM gt_protocol_store.

  IF sy-batch IS INITIAL.

*    IF p_log IS NOT INITIAL AND p_test IS NOT INITIAL AND log_read IS INITIAL..
*      PERFORM save_protocol.
*    ENDIF.

    IF flag_alv_tool NE 1.
      gs_variant-report = sy-repid.
      gs_variant-username = sy-uname.

*  color_layout-info_fname = 'ROWCOLOR'.
*  color_layout-stylefname = 'STYLE'.

      PERFORM build_fieldcat.

      o_tool->set_registered_events( events = it_events ).

*      o_tool->add_button( fcode = 'BKPF'
*                          icon = icon_active_inactive
*                          butn_type = '0'
*                          text = 'BKPF'
*                          quickinfo = 'BKPF'
*                          is_checked = abap_false
*                          is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'BSEG'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSEG'
*                        quickinfo = 'BSEG'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*      IF acdoca_active = 0.
*        o_tool->add_button( fcode = 'BSIS'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSIS'
*                        quickinfo = 'BSIS'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*        o_tool->add_button( fcode = 'BSAS'
*                          icon = icon_active_inactive
*                          butn_type = '0'
*                          text = 'BSAS'
*                          quickinfo = 'BSAS'
*                          is_checked = abap_false
*                          is_disabled = abap_false ).
*
*        o_tool->add_button( fcode = 'BSIK'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSIK'
*                        quickinfo = 'BSIK'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*        o_tool->add_button( fcode = 'BSAK'
*                          icon = icon_active_inactive
*                          butn_type = '0'
*                          text = 'BSAK'
*                          quickinfo = 'BSAK'
*                          is_checked = abap_false
*                          is_disabled = abap_false ).
*
*        o_tool->add_button( fcode = 'BSID'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSID'
*                        quickinfo = 'BSID'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*        o_tool->add_button( fcode = 'BSAD'
*                          icon = icon_active_inactive
*                          butn_type = '0'
*                          text = 'BSAD'
*                          quickinfo = 'BSAD'
*                          is_checked = abap_false
*                          is_disabled = abap_false ).
*      ENDIF.
*
*      o_tool->add_button( fcode = 'BSEC'
*                      icon = icon_active_inactive
*                      butn_type = '0'
*                      text = 'BSEC'
*                      quickinfo = 'BSEC'
*                      is_checked = abap_false
*                      is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'BSED'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSED'
*                        quickinfo = 'BSED'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'BSET'
*                      icon = icon_active_inactive
*                      butn_type = '0'
*                      text = 'BSET'
*                      quickinfo = 'BSET'
*                      is_checked = abap_false
*                      is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'BSE_CLR'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'BSE_CLR'
*                        quickinfo = 'BSE_CLR'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'BSEG_ADD'
*                      icon = icon_active_inactive
*                      butn_type = '0'
*                      text = 'BSEG_ADD'
*                      quickinfo = 'BSEG_ADD'
*                      is_checked = abap_false
*                      is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'SPLINFO'
*                        icon = icon_active_inactive
*                        butn_type = '0'
*                        text = 'SPLINFO'
*                        quickinfo = 'SPLINFO'
*                        is_checked = abap_false
*                        is_disabled = abap_false ).
*
*      o_tool->add_button( fcode = 'SPLINFO_VAL'
*                      icon = icon_active_inactive
*                      butn_type = '0'
*                      text = 'SPLINFO_VAL'
*                      quickinfo = 'SPLINFO_VAL'
*                      is_checked = abap_false
*                      is_disabled = abap_false ).
*
*      IF acdoca_active = 0.
*        o_tool->add_button( fcode = 'G/L'
*                          icon = icon_active_inactive
*                          butn_type = '0'
*                          text = 'G/L'
*                          quickinfo = 'G/L'
*                          is_checked = abap_false
*                          is_disabled = abap_false ).
*      ELSE.
*        o_tool->add_button( fcode = 'G/L'
*                     icon = icon_active_inactive
*                     butn_type = '0'
*                     text = 'ACDOCA'
*                     quickinfo = 'ACDOCA'
*                     is_checked = abap_false
*                     is_disabled = abap_false ).
*      ENDIF.
      flag_alv_tool = 1.
    ENDIF.

    IF ld_suppressed NE 1.
      cl_abap_list_layout=>suppress_toolbar( ).
      ld_suppressed = 1.
    ENDIF.

    SET HANDLER lcl_eventhandler=>on_function_selected FOR o_tool.

    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_left.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r1.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r2.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r3.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r4.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r5.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r6.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r7.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r8.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r9.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r10.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r11.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r12.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r13.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r14.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r15.
    SET HANDLER: lcl_eventhandler=>handle_toolbar FOR l_alv_r16.

    SET HANDLER: lcl_eventhandler=>handle_double_click FOR l_alv_left.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r1.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r2.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r3.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r4.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r5.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r6.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r7.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r8.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r9.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r10.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r11.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r12.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r13.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r14.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r15.
    SET HANDLER: lcl_eventhandler=>handle_data_changed FOR l_alv_r16.

    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_left.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r1.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r2.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r3.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r4.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r5.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r6.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r7.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r8.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r9.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r10.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r11.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r12.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r13.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r14.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r15.
    SET HANDLER: lcl_eventhandler=>handle_ucomm FOR l_alv_r16.

    flag_store = 1.
    PERFORM update_flags.

    READ TABLE gt_doclist_store INTO ls_bkpfmod INDEX 1.
    PERFORM select_belnr USING ls_bkpfmod.

*    ld_height_r1 = 10.
*    ld_height_r2 = 10.
*    ld_height_r3 = 10.
*    ld_height_r4 = 10.
*    ld_height_r5 = 10.
*    ld_height_r6 = 10.
*    ld_height_r7 = 10.
*    ld_height_r8 = 10.
*    ld_height_r9 = 10.
*    ld_height_r10 = 10.
*    ld_height_r11 = 10.
*    ld_height_r12 = 10.
*    ld_height_r13 = 10.
*    ld_height_r14 = 10.
*    ld_height_r15 = 10.
*    ld_height_r16 = 10.
*
*    IF p_dauto IS INITIAL.
*      IF p_dbsgad IS INITIAL.
*        ld_height_r16 = 0.
*      ENDIF.
*
*      IF p_dbsclr IS INITIAL.
*        ld_height_r15 = 0.
*      ENDIF.
*
*      IF p_dbset IS INITIAL.
*        ld_height_r14 = 0.
*      ENDIF.
*
*      IF p_dbsed IS INITIAL.
*        ld_height_r13 = 0.
*      ENDIF.
*
*      IF p_dbsec IS INITIAL.
*        ld_height_r12 = 0.
*      ENDIF.
*
*      IF p_dbkpf IS INITIAL.
*        ld_height_r1 = 0.
*      ENDIF.
*
*      IF p_dbseg IS INITIAL.
*        ld_height_r2 = 0.
*      ENDIF.
*
*      IF p_dgl IS INITIAL.
*        ld_height_r4 = 0.
*      ENDIF.
*
*      IF p_dindex IS INITIAL.
*        ld_height_r5 = 0.
*        ld_height_r6 = 0.
*        ld_height_r7 = 0.
*        ld_height_r8 = 0.
*        ld_height_r9 = 0.
*        ld_height_r10 = 0.
*      ENDIF.
*
*      IF p_dsplit IS INITIAL.
*        ld_height_r3 = 0.
*        ld_height_r11 = 0.
*      ENDIF.
*    ENDIF.
*
*    IF gt_bsec_disp IS INITIAL.
*      ld_height_r12 = 0.
*    ENDIF.
*
*    IF gt_bsed_disp IS INITIAL.
*      ld_height_r13 = 0.
*    ENDIF.
*
*    IF gt_bset_disp IS INITIAL.
*      ld_height_r14 = 0.
*    ENDIF.
*
*    IF gt_bse_clr_disp IS INITIAL.
*      ld_height_r15 = 0.
*    ENDIF.
*
*    IF gt_bseg_add_disp IS INITIAL.
*      ld_height_r16 = 0.
*    ENDIF.
*
*    IF gt_splinfo_disp IS INITIAL.
*      ld_height_r3 = 0.
*    ENDIF.
*
*    IF gt_splinfo_val_disp IS INITIAL.
*      ld_height_r11 = 0.
*    ENDIF.
*
*    IF gt_bsis_disp IS INITIAL.
*      ld_height_r5 = 0.
*    ENDIF.
*
*    IF gt_bsas_disp IS INITIAL.
*      ld_height_r6 = 0.
*    ENDIF.
*
*    IF gt_bsik_disp IS INITIAL.
*      ld_height_r7 = 0.
*    ENDIF.
*
*    IF gt_bsak_disp IS INITIAL.
*      ld_height_r8 = 0.
*    ENDIF.
*
*    IF gt_bsid_disp IS INITIAL.
*      ld_height_r9 = 0.
*    ENDIF.
*
*    IF gt_bsad_disp IS INITIAL.
*      ld_height_r10 = 0.
*    ENDIF.



    l_splitter4->set_row_height( id = 1 height = 50 ).
    l_splitter4->set_row_height( id = 2 height = 50 ).

    l_splitter->set_column_width( id = 1 width = 12 ).
    l_splitter->set_column_width( id = 3 width = 0 ).

    l_splitter2->set_row_height( id = 1 height = ld_height_r1 ).
    l_splitter2->set_row_height( id = 2 height = ld_height_r2 ).
    l_splitter2->set_row_height( id = 9 height = ld_height_r3 ).
    l_splitter2->set_row_height( id = 16 height = ld_height_r4 ).
    l_splitter2->set_row_height( id = 3 height = ld_height_r5 ).
    l_splitter2->set_row_height( id = 4 height = ld_height_r6 ).
    l_splitter2->set_row_height( id = 5 height = ld_height_r7 ).
    l_splitter2->set_row_height( id = 6 height = ld_height_r8 ).
    l_splitter2->set_row_height( id = 7 height = ld_height_r9 ).
    l_splitter2->set_row_height( id = 8 height = ld_height_r10 ).
    l_splitter2->set_row_height( id = 10 height = ld_height_r11 ).
    l_splitter2->set_row_height( id = 11 height = ld_height_r12 ).
    l_splitter2->set_row_height( id = 12 height = ld_height_r13 ).
    l_splitter2->set_row_height( id = 13 height = ld_height_r14 ).
    l_splitter2->set_row_height( id = 14 height = ld_height_r15 ).
    l_splitter2->set_row_height( id = 15 height = ld_height_r16 ).

    l_splitter7->set_row_height( id = 1 height = 3 ).

  ENDIF.

  l_alv_left->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                           it_fieldcatalog = t_fieldcat_left[]
                                           it_outtab        = gt_doclist_store ).

  l_alv_left->set_gridtitle( EXPORTING i_gridtitle = 'Document List' ).
  flag_alv_left = 1.
*    l_alv_left->set_toolbar_interactive( ).

  IF ld_height_r1 IS NOT INITIAL AND gt_bkpf IS NOT INITIAL AND flag_alv_r1 IS INITIAL.
    l_alv_r1->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bkpfmod[]
                                               it_outtab        = gt_bkpf_disp ).

    l_alv_r1->set_gridtitle( EXPORTING i_gridtitle = 'BKPF' ).
    l_alv_r1->set_toolbar_interactive( ).
    flag_alv_r1 = 1.
  ENDIF.

  IF ld_height_r2 IS NOT INITIAL AND flag_alv_r2 IS INITIAL.
    l_alv_r2->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsegmod[]
                                               it_outtab        = gt_bseg_disp ).

    l_alv_r2->set_gridtitle( EXPORTING i_gridtitle = 'BSEG' ).
    l_alv_r2->set_toolbar_interactive( ).
    flag_alv_r2 = 1.
  ENDIF.

  IF ld_height_r5 IS NOT INITIAL AND flag_alv_r3 IS INITIAL.

    l_alv_r5->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsismod[]
                                             it_outtab        = gt_bsis_disp ).

    l_alv_r5->set_gridtitle( EXPORTING i_gridtitle = 'BSIS' ).
    l_alv_r5->set_toolbar_interactive( ).
    flag_alv_r5 = 1.
  ENDIF.

  IF ld_height_r6 IS NOT INITIAL AND flag_alv_r6 IS INITIAL.
    l_alv_r6->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsasmod[]
                                             it_outtab        = gt_bsas_disp ).

    l_alv_r6->set_gridtitle( EXPORTING i_gridtitle = 'BSAS' ).
    l_alv_r6->set_toolbar_interactive( ).
    flag_alv_r6 = 1.
  ENDIF.

  IF ld_height_r7 IS NOT INITIAL AND flag_alv_r7 IS INITIAL.
    l_alv_r7->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsikmod[]
                                             it_outtab        = gt_bsik_disp ).

    l_alv_r7->set_gridtitle( EXPORTING i_gridtitle = 'BSIK' ).
    l_alv_r7->set_toolbar_interactive( ).
    flag_alv_r7 = 1.
  ENDIF.

  IF ld_height_r8 IS NOT INITIAL AND flag_alv_r8 IS INITIAL.
    l_alv_r8->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsakmod[]
                                             it_outtab        = gt_bsak_disp ).

    l_alv_r8->set_gridtitle( EXPORTING i_gridtitle = 'BSAK' ).
    l_alv_r8->set_toolbar_interactive( ).
    flag_alv_r8 = 1.
  ENDIF.

  IF ld_height_r9 IS NOT INITIAL AND flag_alv_r9 IS INITIAL.
    l_alv_r9->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsidmod[]
                                             it_outtab        = gt_bsid_disp ).

    l_alv_r9->set_gridtitle( EXPORTING i_gridtitle = 'BSID' ).
    l_alv_r9->set_toolbar_interactive( ).
    flag_alv_r9 = 1.
  ENDIF.

  IF ld_height_r10 IS NOT INITIAL AND flag_alv_r10 IS INITIAL.
    l_alv_r10->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsadmod[]
                                             it_outtab        = gt_bsad_disp ).

    l_alv_r10->set_gridtitle( EXPORTING i_gridtitle = 'BSAD' ).
    l_alv_r10->set_toolbar_interactive( ).
    flag_alv_r10 = 1.
  ENDIF.

  IF ld_height_r12 IS NOT INITIAL AND flag_alv_r12 IS INITIAL.
    l_alv_r12->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsecmod[]
                                             it_outtab        = gt_bsec_disp ).

    l_alv_r12->set_gridtitle( EXPORTING i_gridtitle = 'BSEC' ).
    l_alv_r12->set_toolbar_interactive( ).
    flag_alv_r12 = 1.
  ENDIF.

  IF ld_height_r13 IS NOT INITIAL AND flag_alv_r13 IS INITIAL.
    l_alv_r13->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsedmod[]
                                             it_outtab        = gt_bsed_disp ).

    l_alv_r13->set_gridtitle( EXPORTING i_gridtitle = 'BSED' ).
    l_alv_r13->set_toolbar_interactive( ).
    flag_alv_r13 = 1.
  ENDIF.

  IF ld_height_r14 IS NOT INITIAL AND flag_alv_r14 IS INITIAL.
    l_alv_r14->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_bsetmod[]
                                           it_outtab        = gt_bset_disp ).

    l_alv_r14->set_gridtitle( EXPORTING i_gridtitle = 'BSET' ).
    l_alv_r14->set_toolbar_interactive( ).
    flag_alv_r14 = 1.
  ENDIF.

  IF ld_height_r15 IS NOT INITIAL AND flag_alv_r15 IS INITIAL.
    l_alv_r15->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_bse_clrmod[]
                                           it_outtab        = gt_bse_clr_disp ).

    l_alv_r15->set_gridtitle( EXPORTING i_gridtitle = 'BSE_CLR' ).
    l_alv_r15->set_toolbar_interactive( ).
    flag_alv_r15 = 1.
  ENDIF.

  IF ld_height_r16 IS NOT INITIAL AND flag_alv_r16 IS INITIAL.
    l_alv_r16->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_bseg_addmod[]
                                           it_outtab        = gt_bseg_add_disp ).

    l_alv_r16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
    l_alv_r16->set_toolbar_interactive( ).
    flag_alv_r16 = 1.
  ENDIF.

  IF flag_alv_l2 IS INITIAL AND flag_alv_r12 IS INITIAL.
    l_alv_l2->set_table_for_first_display( EXPORTING
                                     is_layout = color_layout
                                     is_variant = gs_variant
                                     CHANGING
                                       it_fieldcatalog = t_fieldcat_flags_disp[]
                                       it_outtab        = gt_flag_disp ).

    IF gt_flag_disp IS INITIAL.
      l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'No Inconsistency found' ).
    ELSE.
      l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'Result' ).
    ENDIF.
    l_alv_l2->set_toolbar_interactive( ).
    flag_alv_l2 = 1.
  ENDIF.

  IF ld_height_r11 IS NOT INITIAL AND flag_alv_r11 NE 1.
    l_alv_r11->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_splinfo_valmod[]
                                           it_outtab        = gt_splinfo_val_disp ).

    l_alv_r11->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO_VAL' ).
    l_alv_r11->set_toolbar_interactive( ).
    flag_alv_r11 = 1.
  ENDIF.

  IF ld_height_r3 IS NOT INITIAL AND flag_alv_r3 NE 1.
    l_alv_r3->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_splinfomod[]
                                               it_outtab        = gt_splinfo_disp ).

    l_alv_r3->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO' ).
    l_alv_r3->set_toolbar_interactive( ).
    flag_alv_r3 = 1.
  ENDIF.

  IF ld_height_r4 IS NOT INITIAL AND flag_alv_r4 NE 1.
    l_alv_r4->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_glu1modmod[]
                                               it_outtab        = gt_glu1mod_disp ).

    IF acdoca_active = 0.
      l_alv_r4->set_gridtitle( EXPORTING i_gridtitle = 'GL' ).
    ELSE.
      l_alv_r4->set_gridtitle( EXPORTING i_gridtitle = 'ACDOCA' ).
    ENDIF.
    l_alv_r4->set_toolbar_interactive( ).
    flag_alv_r4 = 1.
  ENDIF.

  IF    gt_bkpf IS INITIAL AND flag_alv_r1 IS INITIAL.
    ld_height_r1 = 10.
    l_alv_r1->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bkpfmod[]
                                             it_outtab        = gt_bkpf_disp ).

    l_alv_r1->set_gridtitle( EXPORTING i_gridtitle = 'No Documents to be Displayed' ).
    flag_alv_r1 = 1.
  ENDIF.

  WRITE: space. " wichtig: Ausgabe des Dynpros erzwingen

ENDFORM.                    "display_data



***********************************************************************
* UPDATE FORM ROUTINES
***********************************************************************

FORM update_scenario.

  DATA lt_protocol_rfdt LIKE gt_protocol_store.
  DATA lt_bkpf_rfdt LIKE gt_bkpf.
  DATA lt_bseg_rfdt LIKE gt_bseg.
  DATA lt_bsis_rfdt LIKE gt_bsis.
  DATA lt_bsas_rfdt LIKE gt_bsas.
  DATA lt_bsik_rfdt LIKE gt_bsik.
  DATA lt_bsak_rfdt LIKE gt_bsak.
  DATA lt_bsid_rfdt LIKE gt_bsid.
  DATA lt_bsad_rfdt LIKE gt_bsad.
  DATA lt_bsec_rfdt LIKE gt_bsec.
  DATA lt_bsed_rfdt LIKE gt_bsed.
  DATA lt_bset_rfdt LIKE gt_bset.
  DATA lt_bse_clr_rfdt LIKE gt_bse_clr.
  DATA lt_bseg_add_rfdt LIKE gt_bseg_add.
  DATA lt_splinfo_rfdt LIKE gt_splinfo.
  DATA lt_splinfo_val_rfdt LIKE gt_splinfo_val.
  DATA lt_glu1mod_rfdt LIKE gt_glu1mod.

  IF p_test IS INITIAL.
    IF gd_rfdt IS INITIAL AND gt_bkpf_store IS NOT INITIAL.
      PERFORM update_bkpf.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bkpf_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      gt_bkpf_store = lt_bkpf_rfdt.
      PERFORM update_bkpf.
      CLEAR gt_bkpf_store. REFRESH gt_bkpf_store.
      CLEAR lt_bkpf_rfdt. REFRESH lt_bkpf_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.

    IF gd_rfdt IS INITIAL AND gt_bseg_store IS NOT INITIAL.
      PERFORM update_bseg.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bseg_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      gt_bseg_store = lt_bseg_rfdt.
      PERFORM update_bseg.
      CLEAR gt_bseg_store. REFRESH gt_bseg_store.
      CLEAR lt_bseg_rfdt. REFRESH lt_bseg_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_bsec_store IS NOT INITIAL.
      PERFORM update_bsec.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bsec_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      gt_bsec_store = lt_bsec_rfdt.
      PERFORM update_bsec.
      CLEAR gt_bsec_store. REFRESH gt_bsec_store.
      CLEAR lt_bsec_rfdt. REFRESH lt_bsec_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_bsed_store IS NOT INITIAL.
      PERFORM update_bsed.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bsed_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      gt_bsed_store = lt_bsed_rfdt.
      PERFORM update_bsed.
      CLEAR gt_bsed_store. REFRESH gt_bsed_store.
      CLEAR lt_bsed_rfdt. REFRESH lt_bsed_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.

    IF gd_rfdt IS INITIAL AND gt_bset_store IS NOT INITIAL.
      PERFORM update_bset.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bset_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      gt_bset_store = lt_bset_rfdt.
      PERFORM update_bset.
      CLEAR gt_bset_store. REFRESH gt_bset_store.
      CLEAR lt_bset_rfdt. REFRESH lt_bset_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.

    IF gd_rfdt IS INITIAL AND gt_bse_clr_store IS NOT INITIAL.
      PERFORM update_bse_clr.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bse_clr_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      gt_bse_clr_store = lt_bse_clr_rfdt.
      PERFORM update_bse_clr.
      CLEAR gt_bse_clr_store. REFRESH gt_bse_clr_store.
      CLEAR lt_bse_clr_rfdt. REFRESH lt_bse_clr_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_bseg_add_store IS NOT INITIAL.
      PERFORM update_bseg_add.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_bseg_add_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      gt_bseg_add_store = lt_bseg_add_rfdt.
      PERFORM update_bseg_add.
      CLEAR gt_bseg_add_store. REFRESH gt_bseg_add_store.
      CLEAR lt_bseg_add_rfdt. REFRESH lt_bseg_add_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF acdoca_active = 0.
      IF gd_rfdt IS INITIAL AND gt_bsis_store IS NOT INITIAL.
        PERFORM update_bsis.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsis_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
        gt_bsis_store = lt_bsis_rfdt.
        PERFORM update_bsis.
        CLEAR gt_bsis_store. REFRESH gt_bsis_store.
        CLEAR lt_bsis_rfdt. REFRESH lt_bsis_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.


      IF gd_rfdt IS INITIAL AND gt_bsas_store IS NOT INITIAL.
        PERFORM update_bsas.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsas_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
        gt_bsas_store = lt_bsas_rfdt.
        PERFORM update_bsas.
        CLEAR gt_bsas_store. REFRESH gt_bsas_store.
        CLEAR lt_bsas_rfdt. REFRESH lt_bsas_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.


      IF gd_rfdt IS INITIAL AND gt_bsik_store IS NOT INITIAL.
        PERFORM update_bsik.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsik_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
        gt_bsik_store = lt_bsik_rfdt.
        PERFORM update_bsik.
        CLEAR gt_bsik_store. REFRESH gt_bsik_store.
        CLEAR lt_bsik_rfdt. REFRESH lt_bsik_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.


      IF gd_rfdt IS INITIAL AND gt_bsak_store IS NOT INITIAL.
        PERFORM update_bsak.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsak_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
        gt_bsak_store = lt_bsak_rfdt.
        PERFORM update_bsak.
        CLEAR gt_bsak_store. REFRESH gt_bsak_store.
        CLEAR lt_bsak_rfdt. REFRESH lt_bsak_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.


      IF gd_rfdt IS INITIAL AND gt_bsid_store IS NOT INITIAL.
        PERFORM update_bsid.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsid_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
        gt_bsid_store = lt_bsid_rfdt.
        PERFORM update_bsid.
        CLEAR gt_bsid_store. REFRESH gt_bsid_store.
        CLEAR lt_bsid_rfdt. REFRESH lt_bsid_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.


      IF gd_rfdt IS INITIAL AND gt_bsad_store IS NOT INITIAL.
        PERFORM update_bsad.
      ELSEIF gd_rfdt IS NOT INITIAL.
        IMPORT lt_bsad_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
        gt_bsad_store = lt_bsad_rfdt.
        PERFORM update_bsad.
        CLEAR gt_bsad_store. REFRESH gt_bsad_store.
        CLEAR lt_bsad_rfdt. REFRESH lt_bsad_rfdt.
        IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
        CLEAR gt_protocol_store. REFRESH gt_protocol_store.
        EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
        CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
      ENDIF.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_splinfo_store IS NOT INITIAL.
      PERFORM update_splinfo.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_splinfo_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      gt_splinfo_store = lt_splinfo_rfdt.
      PERFORM update_splinfo.
      CLEAR gt_splinfo_store. REFRESH gt_splinfo_store.
      CLEAR lt_splinfo_rfdt. REFRESH lt_splinfo_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_splinfo_val_store IS NOT INITIAL.
      PERFORM update_splinfo_val.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_splinfo_val_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      gt_splinfo_val_store = lt_splinfo_val_rfdt.
      PERFORM update_splinfo_val.
      CLEAR gt_splinfo_val_store. REFRESH gt_splinfo_val_store.
      CLEAR lt_splinfo_val_rfdt. REFRESH lt_splinfo_val_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    IF gd_rfdt IS INITIAL AND gt_glu1_store IS NOT INITIAL.
      PERFORM update_gl.
    ELSEIF gd_rfdt IS NOT INITIAL.
      IMPORT lt_glu1mod_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      gt_glu1_store = lt_glu1mod_rfdt.
      PERFORM update_gl.
      CLEAR gt_glu1_store. REFRESH gt_glu1_store.
      CLEAR lt_glu1mod_rfdt. REFRESH lt_glu1mod_rfdt.
      IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
      EXPORT lt_protocol_rfdt TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      CLEAR lt_protocol_rfdt. REFRESH lt_protocol_rfdt.
    ENDIF.


    update_flag = 'X'.
  ENDIF.
ENDFORM.                    "update_scenario

*&---------------------------------------------------------------------*
*&      Form  update_gl
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_gl.
  DATA ls_glu1modmod LIKE glu1moddisp.
*  DATA ls_glu1modstore LIKE glu1modmod.
  DATA ls_glu1mod LIKE glu1mod.
  DATA ls_glu1mod2 LIKE glu1moddisp.
  DATA ls_ins_gl TYPE REF TO data.
  DATA select_count TYPE i.
  DATA BEGIN OF gl_update_count.
  DATA: tabname LIKE ls_glu1mod-zzz_tabname,
        count   TYPE i.
  DATA END OF gl_update_count.
  DATA ls_gl_update_count LIKE gl_update_count.
  DATA lt_gl_update_count LIKE TABLE OF ls_gl_update_count.
  DATA ld_subrc TYPE i.
  DATA ls_glu12 TYPE glu1.
  FIELD-SYMBOLS: <ls_ins_gl>    TYPE any, <ld_ktopl> TYPE any, <ld_timestamp> TYPE any.
  DATA ld_ktopl TYPE t001-ktopl.

  LOOP AT gt_glu1_store INTO ls_glu1modmod.
    MOVE-CORRESPONDING ls_glu1modmod TO ls_glu1mod.
*    MOVE-CORRESPONDING ls_glu1modmod TO ls_glu1modstore.

*** Reconvert data into gl data.
    CREATE DATA ls_ins_gl TYPE (ls_glu1mod-zzz_tabname).
    ASSIGN ls_ins_gl->* TO <ls_ins_gl>.
    MOVE-CORRESPONDING ls_glu1mod TO <ls_ins_gl>.
    IF acdoca_active = 1.
      SELECT SINGLE ktopl FROM t001 INTO ld_ktopl
        WHERE bukrs = ls_glu1modmod-rbukrs.
      ASSIGN COMPONENT 'KTOPL' OF STRUCTURE <ls_ins_gl> TO <ld_ktopl>.
      <ld_ktopl> = ld_ktopl.
      ASSIGN COMPONENT 'TIMESTAMP' OF STRUCTURE <ls_ins_gl> TO <ld_timestamp>.
      GET TIME STAMP FIELD <ld_timestamp>.
    ENDIF.

*** Check if entry doesn't already exist in database.
    TRY.
        SELECT COUNT(*) FROM (ls_glu1mod-zzz_tabname)
          INTO select_count
          WHERE ryear = ls_glu1mod-ryear
          AND belnr = ls_glu1mod-belnr
          AND rldnr = ls_glu1mod-rldnr
          AND rbukrs = ls_glu1mod-rbukrs
          AND docln = ls_glu1mod-docln
          .
      CATCH cx_sy_create_data_error.
    ENDTRY.

*** Insert data to database.
    IF ls_glu1modmod-check = 'X'.
      IF ls_glu1modmod-orig = 'BUIL'
        OR ls_glu1modmod-orig = 'INSE'
        OR ls_glu1modmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (ls_glu1mod-zzz_tabname)
          FROM <ls_ins_gl>.
          IF sy-subrc = 0.
*            APPEND ls_glu1modstore TO gt_glu1_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-rbukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-ryear.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-error = ls_glu1modmod-error.
            gs_protocol-type = '@5B@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'INSERT: G/L entry inserted'.
            ELSE.
              gs_protocol-message = 'INSERT: ACDOCA entry inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-rbukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-ryear.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-error = ls_glu1modmod-error.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'INSERT: G/L entry not inserted'.
            ELSE.
              gs_protocol-message = 'INSERT: ACDOCA entry not inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-rbukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-ryear.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-error = ls_glu1modmod-error.
          gs_protocol-type = '@5C@'.
          IF acdoca_active = 0.
            gs_protocol-message = 'INSERT: G/L entry already existing'.
          ELSE.
            gs_protocol-message = 'INSERT: ACDOCA entry already existing'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_glu1modmod-check = 'E'
      OR ls_glu1modmod-orig = 'EDIT'
      OR ( ls_glu1modmod-orig = 'CORR'
      AND ls_glu1modmod-check NE ' ' ).
      IF ls_glu1modmod-orig = 'BUIL'
        OR ls_glu1modmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT (ls_glu1mod-zzz_tabname)
          FROM <ls_ins_gl>.
          IF sy-subrc = 0.
*            APPEND ls_glu1modstore TO gt_glu1_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-rbukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-ryear.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-error = ls_glu1modmod-error.
            gs_protocol-type = '@5B@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'INSERT: G/L entry inserted'.
            ELSE.
              gs_protocol-message = 'INSERT: ACDOCA entry inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-rbukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-ryear.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-error = ls_glu1modmod-error.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'INSERT: G/L entry not inserted'.
            ELSE.
              gs_protocol-message = 'INSERT: ACDOCA entry not inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-rbukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-ryear.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-error = ls_glu1modmod-error.
          gs_protocol-type = '@5C@'.
          IF acdoca_active = 0.
            gs_protocol-message = 'INSERT: G/L entry already existing'.
          ELSE.
            gs_protocol-message = 'INSERT: ACDOCA entry already existing'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE (ls_glu1mod-zzz_tabname)
            FROM <ls_ins_gl>.
            IF sy-subrc = 0.
*              APPEND ls_glu1modstore TO gt_glu1_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_glu1mod-rbukrs.
              gs_protocol-belnr = ls_glu1mod-belnr.
              gs_protocol-gjahr = ls_glu1mod-ryear.
              gs_protocol-buzei = ls_glu1mod-docln.
              gs_protocol-rldnr = ls_glu1mod-rldnr.
              gs_protocol-error = ls_glu1modmod-error.
              gs_protocol-type = '@5B@'.
              IF acdoca_active = 0.
                gs_protocol-message = 'UPDATE: G/L entry updated'.
              ELSE.
                gs_protocol-message = 'UPDATE: ACDOCA entry updated'.
              ENDIF.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_glu1mod-rbukrs.
              gs_protocol-belnr = ls_glu1mod-belnr.
              gs_protocol-gjahr = ls_glu1mod-ryear.
              gs_protocol-buzei = ls_glu1mod-docln.
              gs_protocol-rldnr = ls_glu1mod-rldnr.
              gs_protocol-error = ls_glu1modmod-error.
              gs_protocol-type = '@5C@'.
              IF acdoca_active = 0.
                gs_protocol-message = 'UPDATE: G/L entry not updated'.
              ELSE.
                gs_protocol-message = 'UPDATE: ACDOCA entry not updated'.
              ENDIF.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-rbukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-ryear.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-error = ls_glu1modmod-error.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'UPDATE: No G/L Entry found to update'.
            ELSE.
              gs_protocol-message = 'UPDATE: No ACDOCA Entry found to update'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_glu1modmod-pairing IS NOT INITIAL.
            LOOP AT gt_glu1_store INTO ls_glu1mod2
              WHERE pairing = ls_glu1modmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_glu1mod2 TO ls_glu12.
              DELETE (ls_glu1mod-zzz_tabname)
            FROM <ls_ins_gl>.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (ls_glu1mod-zzz_tabname)
            FROM <ls_ins_gl>.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_glu1modstore TO gt_glu1_store.
                gs_protocol-bukrs = ls_glu1mod-rbukrs.
                gs_protocol-belnr = ls_glu1mod-belnr.
                gs_protocol-gjahr = ls_glu1mod-ryear.
                gs_protocol-buzei = ls_glu1mod-docln.
                gs_protocol-rldnr = ls_glu1mod-rldnr.
                gs_protocol-error = ls_glu1modmod-error.
                gs_protocol-type = '@5B@'.
                IF acdoca_active = 0.
                  gs_protocol-message = 'UPDATE-KEY: G/L entry updated'.
                ELSE.
                  gs_protocol-message = 'UPDATE-KEY: ACDOCA entry updated'.
                ENDIF.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (ls_glu1mod-zzz_tabname)
            FROM <ls_ins_gl>.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_glu1mod-rbukrs.
                gs_protocol-belnr = ls_glu1mod-belnr.
                gs_protocol-gjahr = ls_glu1mod-ryear.
                gs_protocol-buzei = ls_glu1mod-docln.
                gs_protocol-rldnr = ls_glu1mod-rldnr.
                gs_protocol-error = ls_glu1modmod-error.
                gs_protocol-type = '@5C@'.
                IF acdoca_active = 0.
                  gs_protocol-message = 'UPDATE-KEY: G/L entry not updated'.
                ELSE.
                  gs_protocol-message = 'UPDATE-KEY: ACDOCA entry not updated'.
                ENDIF.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_glu1modmod-check = ' '
      AND ls_glu1modmod-orig = 'DTAB'.
      IF select_count = 1.
        DELETE (ls_glu1mod-zzz_tabname)
        FROM <ls_ins_gl>.
        IF sy-subrc = 0.
          CLEAR gs_protocol.
*          APPEND ls_glu1modstore TO gt_glu1_store.
          gs_protocol-bukrs = ls_glu1mod-rbukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-ryear.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-error = ls_glu1modmod-error.
          gs_protocol-type = 'OK'.
          IF acdoca_active = 0.
            gs_protocol-message = 'DELETE: G/L entry deleted'.
          ELSE.
            gs_protocol-message = 'DELETE: ACDOCA entry deleted'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol_store.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-rbukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-ryear.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-error = ls_glu1modmod-error.
          gs_protocol-type = 'ERROR'.
          IF acdoca_active = 0.
            gs_protocol-message = 'DELETE: G/L entry not deleted'.
          ELSE.
            gs_protocol-message = 'DELETE: ACDOCA entry not deleted'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_glu1mod-rbukrs.
        gs_protocol-belnr = ls_glu1mod-belnr.
        gs_protocol-gjahr = ls_glu1mod-ryear.
        gs_protocol-buzei = ls_glu1mod-docln.
        gs_protocol-rldnr = ls_glu1mod-rldnr.
        gs_protocol-error = ls_glu1modmod-error.
        gs_protocol-type = 'ERROR'.
        IF acdoca_active = 0.
          gs_protocol-message = 'DELETE: G/L entry not found'.
        ELSE.
          gs_protocol-message = 'DELETE: ACDOCA entry not found'.
        ENDIF.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_gl

*&---------------------------------------------------------------------*
*&      Form  update_bkpf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bkpf.
  DATA ls_bkpfmod LIKE bkpfmoddisp.
  DATA ls_bkpfmod2 LIKE ls_bkpfmod.
*  DATA ls_bkpfmodstore LIKE bkpfmod.
  DATA ls_bkpf TYPE bkpf.
  DATA ls_bkpf2 TYPE bkpf.
  DATA ld_subrc TYPE i.
  DATA select_count TYPE i.
  DATA bkpf_update_count TYPE i.

  SORT gt_bkpf_store BY bukrs ASCENDING gjahr ASCENDING belnr ASCENDING check ASCENDING.

  LOOP AT gt_bkpf_store INTO ls_bkpfmod.
    MOVE-CORRESPONDING ls_bkpfmod TO ls_bkpf.
*    MOVE-CORRESPONDING ls_bkpfmod TO ls_bkpfmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bkpf
      INTO select_count
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

*** Insert data to database.
    IF ls_bkpfmod-check = 'X'
      AND ls_bkpfmod-pairing IS INITIAL.
      IF ls_bkpfmod-orig = 'BUIL'
        OR ls_bkpfmod-orig = 'INSE'
        OR ls_bkpfmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bkpf
          FROM ls_bkpf.
          IF sy-subrc = 0.
*            APPEND ls_bkpfmodstore TO gt_bkpf_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-error = ls_bkpfmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BKPF entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-error = ls_bkpfmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BKPF entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-error = ls_bkpfmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BKPF entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bkpfmod-check = 'E'
      OR ls_bkpfmod-orig = 'EDIT'
      OR ( ls_bkpfmod-orig = 'CORR'
      AND ls_bkpfmod-check NE ' ' ).
      IF ls_bkpfmod-orig = 'INSE'
  OR ls_bkpfmod-orig = 'BUIL'.
        IF select_count = 0.
          INSERT bkpf
          FROM ls_bkpf.
          IF sy-subrc = 0.
*            APPEND ls_bkpfmodstore TO gt_bkpf_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-error = ls_bkpfmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BKPF entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-error = ls_bkpfmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BKPF entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-error = ls_bkpfmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BKPF entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bkpf
            FROM ls_bkpf.
            IF sy-subrc = 0.
*              APPEND ls_bkpfmodstore TO gt_bkpf_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bkpf-bukrs.
              gs_protocol-belnr = ls_bkpf-belnr.
              gs_protocol-gjahr = ls_bkpf-gjahr.
              gs_protocol-error = ls_bkpfmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BKPF entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bkpf-bukrs.
              gs_protocol-belnr = ls_bkpf-belnr.
              gs_protocol-gjahr = ls_bkpf-gjahr.
              gs_protocol-error = ls_bkpfmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BKPF entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-error = ls_bkpfmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BKPF Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bkpfmod-pairing IS NOT INITIAL.
            LOOP AT gt_bkpf_store INTO ls_bkpfmod2
              WHERE pairing = ls_bkpfmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bkpfmod2 TO ls_bkpf2.
              DELETE bkpf FROM ls_bkpf2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bkpf
              FROM ls_bkpf.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bkpfmodstore TO gt_bkpf_store.
                gs_protocol-bukrs = ls_bkpf-bukrs.
                gs_protocol-belnr = ls_bkpf-belnr.
                gs_protocol-gjahr = ls_bkpf-gjahr.
                gs_protocol-error = ls_bkpfmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BKPF entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bkpf FROM ls_bkpf2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bkpf-bukrs.
                gs_protocol-belnr = ls_bkpf-belnr.
                gs_protocol-gjahr = ls_bkpf-gjahr.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BKPF entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bkpfmod-check = ' '
      AND ls_bkpfmod-orig = 'DTAB'
      AND ls_bkpfmod-pairing IS INITIAL.
      IF select_count = 1.
        DELETE bkpf
        FROM ls_bkpf.
        IF sy-subrc = 0.
          CLEAR gs_protocol.
*          APPEND ls_bkpfmodstore TO gt_bkpf_store.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-error = ls_bkpfmod-error.
          gs_protocol-type = '@5B@'.
          gs_protocol-message = 'DELETE: BKPF entry deleted'.
          APPEND gs_protocol TO gt_protocol_store.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-error = ls_bkpfmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'DELETE: BKPF entry not deleted'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bkpf-bukrs.
        gs_protocol-belnr = ls_bkpf-belnr.
        gs_protocol-gjahr = ls_bkpf-gjahr.
        gs_protocol-error = ls_bkpfmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BKPF entry not found'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bkpf

*&---------------------------------------------------------------------*
*&      Form  update_bseg
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bseg.
  DATA ls_bsegmod LIKE bsegmoddisp.
  DATA ls_bsegmod2 LIKE bsegmoddisp.
*  DATA ls_bsegmodstore LIKE bsegmod.
  DATA ls_bseg TYPE bseg.
  DATA ls_bseg2 TYPE bseg.
  DATA select_count TYPE i.
  DATA bseg_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bseg_store INTO ls_bsegmod.
    MOVE-CORRESPONDING ls_bsegmod TO ls_bseg.
*    MOVE-CORRESPONDING ls_bsegmod TO ls_bsegmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bseg
      INTO select_count
      WHERE bukrs = ls_bseg-bukrs
      AND belnr = ls_bseg-belnr
      AND gjahr = ls_bseg-gjahr
      AND buzei = ls_bseg-buzei
      .

*** Insert data to database.
    IF ls_bsegmod-check = 'X'.
      IF ls_bsegmod-orig = 'BUIL'
        OR ls_bsegmod-orig = 'EDIT'
        OR ls_bsegmod-orig = 'INSE'
        OR ls_bsegmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bseg
          FROM ls_bseg.
          IF sy-subrc = 0.
*            APPEND ls_bsegmodstore TO gt_bseg_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-error = ls_bsegmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEG entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-error = ls_bsegmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEG entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg-bukrs.
          gs_protocol-belnr = ls_bseg-belnr.
          gs_protocol-gjahr = ls_bseg-gjahr.
          gs_protocol-buzei = ls_bseg-buzei.
          gs_protocol-error = ls_bsegmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEG entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsegmod-check = 'E'
      OR ls_bsegmod-orig = 'EDIT'
      OR ( ls_bsegmod-orig = 'CORR'
      AND ls_bsegmod-check NE ' ' ).
      IF ls_bsegmod-orig = 'INSE'
        OR ls_bsegmod-orig = 'BUIL'.
        IF select_count = 0.
          INSERT bseg
          FROM ls_bseg.
          IF sy-subrc = 0.
*            APPEND ls_bsegmodstore TO gt_bseg_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-error = ls_bsegmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEG entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-error = ls_bsegmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEG entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg-bukrs.
          gs_protocol-belnr = ls_bseg-belnr.
          gs_protocol-gjahr = ls_bseg-gjahr.
          gs_protocol-buzei = ls_bseg-buzei.
          gs_protocol-error = ls_bsegmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEG entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bseg
            FROM ls_bseg.
            IF sy-subrc = 0.
*              APPEND ls_bsegmodstore TO gt_bseg_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg-bukrs.
              gs_protocol-belnr = ls_bseg-belnr.
              gs_protocol-gjahr = ls_bseg-gjahr.
              gs_protocol-buzei = ls_bseg-buzei.
              gs_protocol-error = ls_bsegmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSEG entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg-bukrs.
              gs_protocol-belnr = ls_bseg-belnr.
              gs_protocol-gjahr = ls_bseg-gjahr.
              gs_protocol-buzei = ls_bseg-buzei.
              gs_protocol-error = ls_bsegmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSEG entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-error = ls_bsegmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSEG Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsegmod-pairing IS NOT INITIAL.
            LOOP AT gt_bseg_store INTO ls_bsegmod2
              WHERE pairing = ls_bsegmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsegmod2 TO ls_bseg2.
              DELETE bseg FROM ls_bseg2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bseg
              FROM ls_bseg.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsegmodstore TO gt_bseg_store.
                gs_protocol-bukrs = ls_bseg-bukrs.
                gs_protocol-belnr = ls_bseg-belnr.
                gs_protocol-gjahr = ls_bseg-gjahr.
                gs_protocol-buzei = ls_bseg-buzei.
                gs_protocol-error = ls_bsegmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSEG entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bseg FROM ls_bseg2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bseg-bukrs.
                gs_protocol-belnr = ls_bseg-belnr.
                gs_protocol-gjahr = ls_bseg-gjahr.
                gs_protocol-buzei = ls_bseg-buzei.
                gs_protocol-error = ls_bsegmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSEG entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsegmod-check = ' '
      AND ls_bsegmod-orig = 'DTAB'
      AND ls_bsegmod-pairing IS INITIAL.
      DELETE bseg
      FROM ls_bseg.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsegmodstore TO gt_bseg_store.
        gs_protocol-bukrs = ls_bseg-bukrs.
        gs_protocol-belnr = ls_bseg-belnr.
        gs_protocol-gjahr = ls_bseg-gjahr.
        gs_protocol-buzei = ls_bseg-buzei.
        gs_protocol-error = ls_bsegmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSEG entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bseg-bukrs.
        gs_protocol-belnr = ls_bseg-belnr.
        gs_protocol-gjahr = ls_bseg-gjahr.
        gs_protocol-buzei = ls_bseg-buzei.
        gs_protocol-error = ls_bsegmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSEG entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bseg


*&---------------------------------------------------------------------*
*&      Form  update_BSIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsis.
  DATA ls_bsismod LIKE bsismoddisp.
  DATA ls_bsismod2 LIKE bsismoddisp.
*  DATA ls_bsismodstore LIKE bsismod.
  DATA ls_bsis TYPE bsis.
  DATA ls_bsis2 TYPE bsis.
  DATA select_count TYPE i.
  DATA bsis_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsis_store INTO ls_bsismod.
    MOVE-CORRESPONDING ls_bsismod TO ls_bsis.
*    MOVE-CORRESPONDING ls_bsismod TO ls_bsismodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsis
      INTO select_count
      WHERE bukrs = ls_bsis-bukrs
      AND belnr = ls_bsis-belnr
      AND gjahr = ls_bsis-gjahr
      AND buzei = ls_bsis-buzei
      .

*** Insert data to database.
    IF ls_bsismod-check = 'X'.
      IF ls_bsismod-orig = 'BUIL'
        OR ls_bsismod-orig = 'EDIT'
        OR ls_bsismod-orig = 'INSE'
        OR ls_bsismod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsis)
          FROM ls_bsis.
          IF sy-subrc = 0.
*            APPEND ls_bsismodstore TO gt_bsis_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-error = ls_bsismod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSIS entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-error = ls_bsismod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSIS entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsis-bukrs.
          gs_protocol-belnr = ls_bsis-belnr.
          gs_protocol-gjahr = ls_bsis-gjahr.
          gs_protocol-buzei = ls_bsis-buzei.
          gs_protocol-error = ls_bsismod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSIS entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsismod-check = 'E'
      OR ls_bsismod-orig = 'EDIT'
      OR ( ls_bsismod-orig = 'CORR'
      AND ls_bsismod-check NE ' ' ).
      IF ls_bsismod-orig = 'INSE'
  OR ls_bsismod-orig = 'BUIL'.
        IF select_count = 0.
          INSERT (bsis)
          FROM ls_bsis.
          IF sy-subrc = 0.
*            APPEND ls_bsismodstore TO gt_bsis_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-error = ls_bsismod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSIS entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-error = ls_bsismod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSIS entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsis-bukrs.
          gs_protocol-belnr = ls_bsis-belnr.
          gs_protocol-gjahr = ls_bsis-gjahr.
          gs_protocol-buzei = ls_bsis-buzei.
          gs_protocol-error = ls_bsismod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSIS entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsismod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsis)
            FROM ls_bsis.
            IF sy-subrc = 0.
*              APPEND ls_bsismodstore TO gt_bsis_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsis-bukrs.
              gs_protocol-belnr = ls_bsis-belnr.
              gs_protocol-gjahr = ls_bsis-gjahr.
              gs_protocol-buzei = ls_bsis-buzei.
              gs_protocol-error = ls_bsismod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSIS entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsis-bukrs.
              gs_protocol-belnr = ls_bsis-belnr.
              gs_protocol-gjahr = ls_bsis-gjahr.
              gs_protocol-buzei = ls_bsis-buzei.
              gs_protocol-error = ls_bsismod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSIS entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-error = ls_bsismod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSIS Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsismod-pairing IS NOT INITIAL.
            LOOP AT gt_bsis_store INTO ls_bsismod2
              WHERE pairing = ls_bsismod-pairing
              AND check NE 'E'
              AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsismod2 TO ls_bsis2.
              DELETE (bsis) FROM ls_bsis2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsis)
              FROM ls_bsis.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsismodstore TO gt_bsis_store.
                gs_protocol-bukrs = ls_bsis-bukrs.
                gs_protocol-belnr = ls_bsis-belnr.
                gs_protocol-gjahr = ls_bsis-gjahr.
                gs_protocol-buzei = ls_bsis-buzei.
                gs_protocol-error = ls_bsismod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSIS entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsis) FROM ls_bsis2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsis-bukrs.
                gs_protocol-belnr = ls_bsis-belnr.
                gs_protocol-gjahr = ls_bsis-gjahr.
                gs_protocol-buzei = ls_bsis-buzei.
                gs_protocol-error = ls_bsismod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSIS entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsismod-check = ' '
      AND ls_bsismod-orig = 'DTAB'
      AND ls_bsismod-pairing IS INITIAL..
      DELETE (bsis)
      FROM ls_bsis.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsismodstore TO gt_bsis_store.
        gs_protocol-bukrs = ls_bsis-bukrs.
        gs_protocol-belnr = ls_bsis-belnr.
        gs_protocol-gjahr = ls_bsis-gjahr.
        gs_protocol-buzei = ls_bsis-buzei.
        gs_protocol-error = ls_bsismod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSIS entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsis-bukrs.
        gs_protocol-belnr = ls_bsis-belnr.
        gs_protocol-gjahr = ls_bsis-gjahr.
        gs_protocol-buzei = ls_bsis-buzei.
        gs_protocol-error = ls_bsismod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSIS entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_BSIS


*&---------------------------------------------------------------------*
*&      Form  update_bsas
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsas.
  DATA ls_bsasmod LIKE bsasmoddisp.
  DATA ls_bsasmod2 LIKE bsasmoddisp.
*  DATA ls_bsasmodstore LIKE bsasmod.
  DATA ls_bsas TYPE bsas.
  DATA ls_bsas2 TYPE bsas.
  DATA select_count TYPE i.
  DATA bsas_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsas_store INTO ls_bsasmod.
    MOVE-CORRESPONDING ls_bsasmod TO ls_bsas.
*    MOVE-CORRESPONDING ls_bsasmod TO ls_bsasmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsas
      INTO select_count
      WHERE bukrs = ls_bsas-bukrs
      AND belnr = ls_bsas-belnr
      AND gjahr = ls_bsas-gjahr
      AND buzei = ls_bsas-buzei
      .

*** Insert data to database.
    IF ls_bsasmod-check = 'X'.
      IF ls_bsasmod-orig = 'BUIL'
        OR ls_bsasmod-orig = 'EDIT'
        OR ls_bsasmod-orig = 'INSE'
        OR ls_bsasmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsas)
          FROM ls_bsas.
          IF sy-subrc = 0.
*            APPEND ls_bsasmodstore TO gt_bsas_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-error = ls_bsasmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAS entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-error = ls_bsasmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAS entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsas-bukrs.
          gs_protocol-belnr = ls_bsas-belnr.
          gs_protocol-gjahr = ls_bsas-gjahr.
          gs_protocol-buzei = ls_bsas-buzei.
          gs_protocol-error = ls_bsasmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAS entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsasmod-check = 'E'
      OR ls_bsasmod-orig = 'EDIT'
      OR ( ls_bsasmod-orig = 'CORR'
      AND ls_bsasmod-check NE ' ' ).
      IF ls_bsasmod-orig = 'INSE'
  OR ls_bsasmod-orig = 'BUIL'.
        IF select_count = 0.
          INSERT (bsas)
          FROM ls_bsas.
          IF sy-subrc = 0.
*            APPEND ls_bsasmodstore TO gt_bsas_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-error = ls_bsasmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAS entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-error = ls_bsasmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAS entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsas-bukrs.
          gs_protocol-belnr = ls_bsas-belnr.
          gs_protocol-gjahr = ls_bsas-gjahr.
          gs_protocol-buzei = ls_bsas-buzei.
          gs_protocol-error = ls_bsasmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAS entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsasmod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsas)
            FROM ls_bsas.
            IF sy-subrc = 0.
*              APPEND ls_bsasmodstore TO gt_bsas_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsas-bukrs.
              gs_protocol-belnr = ls_bsas-belnr.
              gs_protocol-gjahr = ls_bsas-gjahr.
              gs_protocol-buzei = ls_bsas-buzei.
              gs_protocol-error = ls_bsasmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSAS entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsas-bukrs.
              gs_protocol-belnr = ls_bsas-belnr.
              gs_protocol-gjahr = ls_bsas-gjahr.
              gs_protocol-buzei = ls_bsas-buzei.
              gs_protocol-error = ls_bsasmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSAS entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-error = ls_bsasmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSAS Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsasmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsas_store INTO ls_bsasmod2
              WHERE pairing = ls_bsasmod-pairing
              AND check NE 'E'
              AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsasmod2 TO ls_bsas2.
              DELETE (bsas) FROM ls_bsas2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsas)
              FROM ls_bsas.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsasmodstore TO gt_bsas_store.
                gs_protocol-bukrs = ls_bsas-bukrs.
                gs_protocol-belnr = ls_bsas-belnr.
                gs_protocol-gjahr = ls_bsas-gjahr.
                gs_protocol-buzei = ls_bsas-buzei.
                gs_protocol-error = ls_bsasmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSAS entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsas) FROM ls_bsas2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsas-bukrs.
                gs_protocol-belnr = ls_bsas-belnr.
                gs_protocol-gjahr = ls_bsas-gjahr.
                gs_protocol-buzei = ls_bsas-buzei.
                gs_protocol-error = ls_bsasmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSAS entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsasmod-check = ' '
      AND ls_bsasmod-orig = 'DTAB'
      AND ls_bsasmod-pairing IS INITIAL.
      DELETE (bsas)
      FROM ls_bsas.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsasmodstore TO gt_bsas_store.
        gs_protocol-bukrs = ls_bsas-bukrs.
        gs_protocol-belnr = ls_bsas-belnr.
        gs_protocol-gjahr = ls_bsas-gjahr.
        gs_protocol-buzei = ls_bsas-buzei.
        gs_protocol-error = ls_bsasmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSAS entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsas-bukrs.
        gs_protocol-belnr = ls_bsas-belnr.
        gs_protocol-gjahr = ls_bsas-gjahr.
        gs_protocol-buzei = ls_bsas-buzei.
        gs_protocol-error = ls_bsasmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSAS entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsas


*&---------------------------------------------------------------------*
*&      Form  update_bsad
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsad.
  DATA ls_bsadmod LIKE bsadmoddisp.
  DATA ls_bsadmod2 LIKE bsadmoddisp.
*  DATA ls_bsadmodstore LIKE bsadmod.
  DATA ls_bsad TYPE bsad.
  DATA ls_bsad2 TYPE bsad.
  DATA select_count TYPE i.
  DATA bsad_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsad_store INTO ls_bsadmod.
    MOVE-CORRESPONDING ls_bsadmod TO ls_bsad.
*    MOVE-CORRESPONDING ls_bsadmod TO ls_bsadmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsad
      INTO select_count
      WHERE bukrs = ls_bsad-bukrs
      AND belnr = ls_bsad-belnr
      AND gjahr = ls_bsad-gjahr
      AND buzei = ls_bsad-buzei
      .

*** Insert data to database.
    IF ls_bsadmod-check = 'X'.
      IF ls_bsadmod-orig = 'BUIL'
        OR ls_bsadmod-orig = 'EDIT'
        OR ls_bsadmod-orig = 'INSE'
        OR ls_bsadmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsad)
          FROM ls_bsad.
          IF sy-subrc = 0.
*            APPEND ls_bsadmodstore TO gt_bsad_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-error = ls_bsadmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAD entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-error = ls_bsadmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAD entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsad-bukrs.
          gs_protocol-belnr = ls_bsad-belnr.
          gs_protocol-gjahr = ls_bsad-gjahr.
          gs_protocol-buzei = ls_bsad-buzei.
          gs_protocol-error = ls_bsadmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAD entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsadmod-check = 'E'
      OR ls_bsadmod-orig = 'EDIT'
      OR ( ls_bsadmod-orig = 'CORR'
      AND ls_bsadmod-check NE ' ' ).
      IF ls_bsadmod-orig = 'BUIL'
        OR ls_bsadmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT (bsad)
          FROM ls_bsad.
          IF sy-subrc = 0.
*            APPEND ls_bsadmodstore TO gt_bsad_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-error = ls_bsadmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAD entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-error = ls_bsadmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAD entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsad-bukrs.
          gs_protocol-belnr = ls_bsad-belnr.
          gs_protocol-gjahr = ls_bsad-gjahr.
          gs_protocol-buzei = ls_bsad-buzei.
          gs_protocol-error = ls_bsadmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAD entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsadmod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsad)
            FROM ls_bsad.
            IF sy-subrc = 0.
*              APPEND ls_bsadmodstore TO gt_bsad_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsad-bukrs.
              gs_protocol-belnr = ls_bsad-belnr.
              gs_protocol-gjahr = ls_bsad-gjahr.
              gs_protocol-buzei = ls_bsad-buzei.
              gs_protocol-error = ls_bsadmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSAD entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsad-bukrs.
              gs_protocol-belnr = ls_bsad-belnr.
              gs_protocol-gjahr = ls_bsad-gjahr.
              gs_protocol-buzei = ls_bsad-buzei.
              gs_protocol-error = ls_bsadmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSAD entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-error = ls_bsadmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSAD Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsadmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsad_store INTO ls_bsadmod2
              WHERE pairing = ls_bsadmod-pairing
              AND check NE 'E'
                            AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsadmod2 TO ls_bsad2.
              DELETE (bsad) FROM ls_bsad2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsad)
              FROM ls_bsad.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsadmodstore TO gt_bsad_store.
                gs_protocol-bukrs = ls_bsad-bukrs.
                gs_protocol-belnr = ls_bsad-belnr.
                gs_protocol-gjahr = ls_bsad-gjahr.
                gs_protocol-buzei = ls_bsad-buzei.
                gs_protocol-error = ls_bsadmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSAD entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsad) FROM ls_bsad2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsad-bukrs.
                gs_protocol-belnr = ls_bsad-belnr.
                gs_protocol-gjahr = ls_bsad-gjahr.
                gs_protocol-buzei = ls_bsad-buzei.
                gs_protocol-error = ls_bsadmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSAD entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsadmod-check = ' '
      AND ls_bsadmod-orig = 'DTAB'
      AND ls_bsadmod-pairing IS INITIAL.
      DELETE (bsad)
      FROM ls_bsad.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsadmodstore TO gt_bsad_store.
        gs_protocol-bukrs = ls_bsad-bukrs.
        gs_protocol-belnr = ls_bsad-belnr.
        gs_protocol-gjahr = ls_bsad-gjahr.
        gs_protocol-buzei = ls_bsad-buzei.
        gs_protocol-error = ls_bsadmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSAD entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsad-bukrs.
        gs_protocol-belnr = ls_bsad-belnr.
        gs_protocol-gjahr = ls_bsad-gjahr.
        gs_protocol-buzei = ls_bsad-buzei.
        gs_protocol-error = ls_bsadmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSAD entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsad

*&---------------------------------------------------------------------*
*&      Form  update_bsid
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsid.
  DATA ls_bsidmod LIKE bsidmoddisp.
  DATA ls_bsidmod2 LIKE bsidmoddisp.
*  DATA ls_bsidmodstore LIKE bsidmod.
  DATA ls_bsid TYPE bsid.
  DATA ls_bsid2 TYPE bsid.
  DATA select_count TYPE i.
  DATA bsid_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsid_store INTO ls_bsidmod.
    MOVE-CORRESPONDING ls_bsidmod TO ls_bsid.
*    MOVE-CORRESPONDING ls_bsidmod TO ls_bsidmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsid
      INTO select_count
      WHERE bukrs = ls_bsid-bukrs
      AND belnr = ls_bsid-belnr
      AND gjahr = ls_bsid-gjahr
      AND buzei = ls_bsid-buzei
      .

*** Insert data to database.
    IF ls_bsidmod-check = 'X'.
      IF ls_bsidmod-orig = 'BUIL'
        OR ls_bsidmod-orig = 'EDIT'
        OR ls_bsidmod-orig = 'INSE'
        OR ls_bsidmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsid)
          FROM ls_bsid.
          IF sy-subrc = 0.
*            APPEND ls_bsidmodstore TO gt_bsid_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-error = ls_bsidmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSID entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-error = ls_bsidmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSID entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsid-bukrs.
          gs_protocol-belnr = ls_bsid-belnr.
          gs_protocol-gjahr = ls_bsid-gjahr.
          gs_protocol-buzei = ls_bsid-buzei.
          gs_protocol-error = ls_bsidmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSID entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsidmod-check = 'E'
      OR ls_bsidmod-orig = 'EDIT'
      OR ( ls_bsidmod-orig = 'CORR'
      AND ls_bsidmod-check NE ' ' ).
      IF ls_bsidmod-orig = 'BUIL'
        OR ls_bsidmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT (bsid)
          FROM ls_bsid.
          IF sy-subrc = 0.
*            APPEND ls_bsidmodstore TO gt_bsid_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-error = ls_bsidmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSID entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-error = ls_bsidmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSID entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsid-bukrs.
          gs_protocol-belnr = ls_bsid-belnr.
          gs_protocol-gjahr = ls_bsid-gjahr.
          gs_protocol-buzei = ls_bsid-buzei.
          gs_protocol-error = ls_bsidmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSID entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsidmod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsid)
            FROM ls_bsid.
            IF sy-subrc = 0.
*              APPEND ls_bsidmodstore TO gt_bsid_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsid-bukrs.
              gs_protocol-belnr = ls_bsid-belnr.
              gs_protocol-gjahr = ls_bsid-gjahr.
              gs_protocol-buzei = ls_bsid-buzei.
              gs_protocol-error = ls_bsidmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSID entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsid-bukrs.
              gs_protocol-belnr = ls_bsid-belnr.
              gs_protocol-gjahr = ls_bsid-gjahr.
              gs_protocol-buzei = ls_bsid-buzei.
              gs_protocol-error = ls_bsidmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSID entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-error = ls_bsidmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSID Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsidmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsid_store INTO ls_bsidmod2
              WHERE pairing = ls_bsidmod-pairing
              AND check NE 'E'
                            AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsidmod2 TO ls_bsid2.
              DELETE (bsid) FROM ls_bsid2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsid)
              FROM ls_bsid.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsidmodstore TO gt_bsid_store.
                gs_protocol-bukrs = ls_bsid-bukrs.
                gs_protocol-belnr = ls_bsid-belnr.
                gs_protocol-gjahr = ls_bsid-gjahr.
                gs_protocol-buzei = ls_bsid-buzei.
                gs_protocol-error = ls_bsidmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSID entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsid) FROM ls_bsid2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsid-bukrs.
                gs_protocol-belnr = ls_bsid-belnr.
                gs_protocol-gjahr = ls_bsid-gjahr.
                gs_protocol-buzei = ls_bsid-buzei.
                gs_protocol-error = ls_bsidmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSID entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsidmod-check = ' '
      AND ls_bsidmod-orig = 'DTAB'
      AND ls_bsidmod-pairing IS INITIAL.
      DELETE (bsid)
      FROM ls_bsid.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsidmodstore TO gt_bsid_store.
        gs_protocol-bukrs = ls_bsid-bukrs.
        gs_protocol-belnr = ls_bsid-belnr.
        gs_protocol-gjahr = ls_bsid-gjahr.
        gs_protocol-buzei = ls_bsid-buzei.
        gs_protocol-error = ls_bsidmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSID entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsid-bukrs.
        gs_protocol-belnr = ls_bsid-belnr.
        gs_protocol-gjahr = ls_bsid-gjahr.
        gs_protocol-buzei = ls_bsid-buzei.
        gs_protocol-error = ls_bsidmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSID entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsid

*&---------------------------------------------------------------------*
*&      Form  update_bsak
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsak.
  DATA ls_bsakmod LIKE bsakmoddisp.
  DATA ls_bsakmod2 LIKE bsakmoddisp.
*  DATA ls_bsakmodstore LIKE bsakmod.
  DATA ls_bsak TYPE bsak.
  DATA ls_bsak2 TYPE bsak.
  DATA select_count TYPE i.
  DATA bsak_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsak_store INTO ls_bsakmod.
    MOVE-CORRESPONDING ls_bsakmod TO ls_bsak.
*    MOVE-CORRESPONDING ls_bsakmod TO ls_bsakmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsak
      INTO select_count
      WHERE bukrs = ls_bsak-bukrs
      AND belnr = ls_bsak-belnr
      AND gjahr = ls_bsak-gjahr
      AND buzei = ls_bsak-buzei
      .

*** Insert data to database.
    IF ls_bsakmod-check = 'X'.
      IF ls_bsakmod-orig = 'BUIL'
        OR ls_bsakmod-orig = 'EDIT'
        OR ls_bsakmod-orig = 'INSE'
        OR ls_bsakmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsak)
          FROM ls_bsak.
          IF sy-subrc = 0.
*            APPEND ls_bsakmodstore TO gt_bsak_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-error = ls_bsakmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAK entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-error = ls_bsakmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAK entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsak-bukrs.
          gs_protocol-belnr = ls_bsak-belnr.
          gs_protocol-gjahr = ls_bsak-gjahr.
          gs_protocol-buzei = ls_bsak-buzei.
          gs_protocol-error = ls_bsakmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAK entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsakmod-check = 'E'
      OR ls_bsakmod-orig = 'EDIT'
      OR ( ls_bsakmod-orig = 'CORR'
      AND ls_bsakmod-check NE ' ' ).
      IF ls_bsakmod-orig = 'BUIL' OR ls_bsakmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT (bsak)
          FROM ls_bsak.
          IF sy-subrc = 0.
*            APPEND ls_bsakmodstore TO gt_bsak_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-error = ls_bsakmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSAK entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-error = ls_bsakmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSAK entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsak-bukrs.
          gs_protocol-belnr = ls_bsak-belnr.
          gs_protocol-gjahr = ls_bsak-gjahr.
          gs_protocol-buzei = ls_bsak-buzei.
          gs_protocol-error = ls_bsakmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSAK entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsakmod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsak)
            FROM ls_bsak.
            IF sy-subrc = 0.
*              APPEND ls_bsakmodstore TO gt_bsak_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsak-bukrs.
              gs_protocol-belnr = ls_bsak-belnr.
              gs_protocol-gjahr = ls_bsak-gjahr.
              gs_protocol-buzei = ls_bsak-buzei.
              gs_protocol-error = ls_bsakmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSAK entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsak-bukrs.
              gs_protocol-belnr = ls_bsak-belnr.
              gs_protocol-gjahr = ls_bsak-gjahr.
              gs_protocol-buzei = ls_bsak-buzei.
              gs_protocol-error = ls_bsakmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSAK entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-error = ls_bsakmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSAK Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsakmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsak_store INTO ls_bsakmod2
              WHERE pairing = ls_bsakmod-pairing
              AND check NE 'E'
                            AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsakmod2 TO ls_bsak2.
              DELETE (bsak) FROM ls_bsak2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsak)
              FROM ls_bsak.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsakmodstore TO gt_bsak_store.
                gs_protocol-bukrs = ls_bsak-bukrs.
                gs_protocol-belnr = ls_bsak-belnr.
                gs_protocol-gjahr = ls_bsak-gjahr.
                gs_protocol-buzei = ls_bsak-buzei.
                gs_protocol-error = ls_bsakmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSAK entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsak) FROM ls_bsak2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsak-bukrs.
                gs_protocol-belnr = ls_bsak-belnr.
                gs_protocol-gjahr = ls_bsak-gjahr.
                gs_protocol-buzei = ls_bsak-buzei.
                gs_protocol-error = ls_bsakmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSAK entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsakmod-check = ' '
      AND ls_bsakmod-orig = 'DTAB'
      AND ls_bsakmod-pairing IS INITIAL.
      DELETE (bsak)
      FROM ls_bsak.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsakmodstore TO gt_bsak_store.
        gs_protocol-bukrs = ls_bsak-bukrs.
        gs_protocol-belnr = ls_bsak-belnr.
        gs_protocol-gjahr = ls_bsak-gjahr.
        gs_protocol-buzei = ls_bsak-buzei.
        gs_protocol-error = ls_bsakmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSAK entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsak-bukrs.
        gs_protocol-belnr = ls_bsak-belnr.
        gs_protocol-gjahr = ls_bsak-gjahr.
        gs_protocol-buzei = ls_bsak-buzei.
        gs_protocol-error = ls_bsakmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSAK entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsak

*&---------------------------------------------------------------------*
*&      Form  update_bsik
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsik.
  DATA ls_bsikmod LIKE bsikmoddisp.
  DATA ls_bsikmod2 LIKE bsikmoddisp.
*  DATA ls_bsikmodstore LIKE bsikmod.
  DATA ls_bsik TYPE bsik.
  DATA ls_bsik2 TYPE bsik.
  DATA select_count TYPE i.
  DATA bsik_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsik_store INTO ls_bsikmod.
    MOVE-CORRESPONDING ls_bsikmod TO ls_bsik.
*    MOVE-CORRESPONDING ls_bsikmod TO ls_bsikmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsik
      INTO select_count
      WHERE bukrs = ls_bsik-bukrs
      AND belnr = ls_bsik-belnr
      AND gjahr = ls_bsik-gjahr
      AND buzei = ls_bsik-buzei
      .

*** Insert data to database.
    IF ls_bsikmod-check = 'X'.
      IF ls_bsikmod-orig = 'BUIL'
        OR ls_bsikmod-orig = 'EDIT'
        OR ls_bsikmod-orig = 'INSE'
        OR ls_bsikmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT (bsik)
          FROM ls_bsik.
          IF sy-subrc = 0.
*            APPEND ls_bsikmodstore TO gt_bsik_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-error = ls_bsikmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSIK entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-error = ls_bsikmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSIK entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsik-bukrs.
          gs_protocol-belnr = ls_bsik-belnr.
          gs_protocol-gjahr = ls_bsik-gjahr.
          gs_protocol-buzei = ls_bsik-buzei.
          gs_protocol-error = ls_bsikmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSIK entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsikmod-check = 'E'
      OR ls_bsikmod-orig = 'EDIT'
      OR ( ls_bsikmod-orig = 'CORR'
      AND ls_bsikmod-check NE ' ' ).
      IF ls_bsikmod-orig = 'BUIL'
        OR ls_bsikmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT (bsik)
          FROM ls_bsik.
          IF sy-subrc = 0.
*            APPEND ls_bsikmodstore TO gt_bsik_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-error = ls_bsikmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSIK entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-error = ls_bsikmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSIK entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsik-bukrs.
          gs_protocol-belnr = ls_bsik-belnr.
          gs_protocol-gjahr = ls_bsik-gjahr.
          gs_protocol-buzei = ls_bsik-buzei.
          gs_protocol-error = ls_bsikmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSIK entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL AND ls_bsikmod-error NE 'KEY'.
          IF select_count = 1.
            UPDATE (bsik)
            FROM ls_bsik.
            IF sy-subrc = 0.
*              APPEND ls_bsikmodstore TO gt_bsik_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsik-bukrs.
              gs_protocol-belnr = ls_bsik-belnr.
              gs_protocol-gjahr = ls_bsik-gjahr.
              gs_protocol-buzei = ls_bsik-buzei.
              gs_protocol-error = ls_bsikmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSIK entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsik-bukrs.
              gs_protocol-belnr = ls_bsik-belnr.
              gs_protocol-gjahr = ls_bsik-gjahr.
              gs_protocol-buzei = ls_bsik-buzei.
              gs_protocol-error = ls_bsikmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSIK entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-error = ls_bsikmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSIK Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsikmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsik_store INTO ls_bsikmod2
              WHERE pairing = ls_bsikmod-pairing
              AND check NE 'E'
                            AND check NE 'X'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsikmod2 TO ls_bsik2.
              DELETE (bsik) FROM ls_bsik2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT (bsik)
              FROM ls_bsik.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsikmodstore TO gt_bsik_store.
                gs_protocol-bukrs = ls_bsik-bukrs.
                gs_protocol-belnr = ls_bsik-belnr.
                gs_protocol-gjahr = ls_bsik-gjahr.
                gs_protocol-buzei = ls_bsik-buzei.
                gs_protocol-error = ls_bsikmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSIK entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT (bsik) FROM ls_bsik2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsik-bukrs.
                gs_protocol-belnr = ls_bsik-belnr.
                gs_protocol-gjahr = ls_bsik-gjahr.
                gs_protocol-buzei = ls_bsik-buzei.
                gs_protocol-error = ls_bsikmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSIK entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsikmod-check = ' '
      AND ls_bsikmod-orig = 'DTAB'
      AND ls_bsikmod-pairing IS INITIAL.
      DELETE (bsik)
      FROM ls_bsik.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsikmodstore TO gt_bsik_store.
        gs_protocol-bukrs = ls_bsik-bukrs.
        gs_protocol-belnr = ls_bsik-belnr.
        gs_protocol-gjahr = ls_bsik-gjahr.
        gs_protocol-buzei = ls_bsik-buzei.
        gs_protocol-error = ls_bsikmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSIK entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsik-bukrs.
        gs_protocol-belnr = ls_bsik-belnr.
        gs_protocol-gjahr = ls_bsik-gjahr.
        gs_protocol-buzei = ls_bsik-buzei.
        gs_protocol-error = ls_bsikmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSIK entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsik

*&---------------------------------------------------------------------*
*&      Form  update_bsec
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsec.
  DATA ls_bsecmod LIKE bsecmoddisp.
  DATA ls_bsecmod2 LIKE bsecmoddisp.
*  DATA ls_bsecmodstore LIKE bsecmod.
  DATA ls_bsec TYPE bsec.
  DATA ls_bsec2 TYPE bsec.
  DATA select_count TYPE i.
  DATA bsec_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsec_store INTO ls_bsecmod.
    MOVE-CORRESPONDING ls_bsecmod TO ls_bsec.
*    MOVE-CORRESPONDING ls_bsecmod TO ls_bsecmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsec
      INTO select_count
      WHERE bukrs = ls_bsec-bukrs
      AND belnr = ls_bsec-belnr
      AND gjahr = ls_bsec-gjahr
      AND buzei = ls_bsec-buzei
      .

*** Insert data to database.
    IF ls_bsecmod-check = 'X'.
      IF ls_bsecmod-orig = 'BUIL'
        OR ls_bsecmod-orig = 'EDIT'
        OR ls_bsecmod-orig = 'INSE'
        OR ls_bsecmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bsec
          FROM ls_bsec.
          IF sy-subrc = 0.
*            APPEND ls_bsecmodstore TO gt_bsec_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-error = ls_bsecmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEC entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-error = ls_bsecmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEC entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsec-bukrs.
          gs_protocol-belnr = ls_bsec-belnr.
          gs_protocol-gjahr = ls_bsec-gjahr.
          gs_protocol-buzei = ls_bsec-buzei.
          gs_protocol-error = ls_bsecmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEC entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsecmod-check = 'E'
      OR ls_bsecmod-orig = 'EDIT'
      OR ( ls_bsecmod-orig = 'CORR'
      AND ls_bsecmod-check NE ' ' ).
      IF ls_bsecmod-orig = 'BUIL' OR ls_bsecmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT bsec
          FROM ls_bsec.
          IF sy-subrc = 0.
*            APPEND ls_bsecmodstore TO gt_bsec_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-error = ls_bsecmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEC entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-error = ls_bsecmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEC entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsec-bukrs.
          gs_protocol-belnr = ls_bsec-belnr.
          gs_protocol-gjahr = ls_bsec-gjahr.
          gs_protocol-buzei = ls_bsec-buzei.
          gs_protocol-error = ls_bsecmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEC entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bsec
            FROM ls_bsec.
            IF sy-subrc = 0.
*              APPEND ls_bsecmodstore TO gt_bsec_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsec-bukrs.
              gs_protocol-belnr = ls_bsec-belnr.
              gs_protocol-gjahr = ls_bsec-gjahr.
              gs_protocol-buzei = ls_bsec-buzei.
              gs_protocol-error = ls_bsecmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSEC entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsec-bukrs.
              gs_protocol-belnr = ls_bsec-belnr.
              gs_protocol-gjahr = ls_bsec-gjahr.
              gs_protocol-buzei = ls_bsec-buzei.
              gs_protocol-error = ls_bsecmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSEC entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-error = ls_bsecmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSEC Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsecmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsec_store INTO ls_bsecmod2
              WHERE pairing = ls_bsecmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsecmod2 TO ls_bsec2.
              DELETE bsec FROM ls_bsec2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bsec
              FROM ls_bsec.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsecmodstore TO gt_bsec_store.
                gs_protocol-bukrs = ls_bsec-bukrs.
                gs_protocol-belnr = ls_bsec-belnr.
                gs_protocol-gjahr = ls_bsec-gjahr.
                gs_protocol-buzei = ls_bsec-buzei.
                gs_protocol-error = ls_bsecmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSEC entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bsec FROM ls_bsec2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsec-bukrs.
                gs_protocol-belnr = ls_bsec-belnr.
                gs_protocol-gjahr = ls_bsec-gjahr.
                gs_protocol-buzei = ls_bsec-buzei.
                gs_protocol-error = ls_bsecmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSEC entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsecmod-check = ' '
      AND ls_bsecmod-orig = 'DTAB'
      AND ls_bsecmod-pairing IS INITIAL.
      DELETE bsec
      FROM ls_bsec.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsecmodstore TO gt_bsec_store.
        gs_protocol-bukrs = ls_bsec-bukrs.
        gs_protocol-belnr = ls_bsec-belnr.
        gs_protocol-gjahr = ls_bsec-gjahr.
        gs_protocol-buzei = ls_bsec-buzei.
        gs_protocol-error = ls_bsecmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSEC entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsec-bukrs.
        gs_protocol-belnr = ls_bsec-belnr.
        gs_protocol-gjahr = ls_bsec-gjahr.
        gs_protocol-buzei = ls_bsec-buzei.
        gs_protocol-error = ls_bsecmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSEC entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsec

*&---------------------------------------------------------------------*
*&      Form  update_bsed
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bsed.
  DATA ls_bsedmod LIKE bsedmoddisp.
  DATA ls_bsedmod2 LIKE bsedmoddisp.
*  DATA ls_bsedmodstore LIKE bsedmod.
  DATA ls_bsed TYPE bsed.
  DATA ls_bsed2 TYPE bsed.
  DATA select_count TYPE i.
  DATA bsed_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bsed_store INTO ls_bsedmod.
    MOVE-CORRESPONDING ls_bsedmod TO ls_bsed.
*    MOVE-CORRESPONDING ls_bsedmod TO ls_bsedmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsed
      INTO select_count
      WHERE bukrs = ls_bsed-bukrs
      AND belnr = ls_bsed-belnr
      AND gjahr = ls_bsed-gjahr
      AND buzei = ls_bsed-buzei
      .

*** Insert data to database.
    IF ls_bsedmod-check = 'X'.
      IF ls_bsedmod-orig = 'BUIL'
        OR ls_bsedmod-orig = 'EDIT'
        OR ls_bsedmod-orig = 'INSE'
        OR ls_bsedmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bsed
          FROM ls_bsed.
          IF sy-subrc = 0.
*            APPEND ls_bsedmodstore TO gt_bsed_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-error = ls_bsedmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSED entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-error = ls_bsedmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSED entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsed-bukrs.
          gs_protocol-belnr = ls_bsed-belnr.
          gs_protocol-gjahr = ls_bsed-gjahr.
          gs_protocol-buzei = ls_bsed-buzei.
          gs_protocol-error = ls_bsedmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSED entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsedmod-check = 'E'
      OR ls_bsedmod-orig = 'EDIT'
      OR ( ls_bsedmod-orig = 'CORR'
      AND ls_bsedmod-check NE ' ' ).
      IF ls_bsedmod-orig = 'BUIL' OR ls_bsedmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT bsed
          FROM ls_bsed.
          IF sy-subrc = 0.
*            APPEND ls_bsedmodstore TO gt_bsed_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-error = ls_bsedmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSED entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-error = ls_bsedmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSED entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsed-bukrs.
          gs_protocol-belnr = ls_bsed-belnr.
          gs_protocol-gjahr = ls_bsed-gjahr.
          gs_protocol-buzei = ls_bsed-buzei.
          gs_protocol-error = ls_bsedmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSED entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.

        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bsed
            FROM ls_bsed.
            IF sy-subrc = 0.
*              APPEND ls_bsedmodstore TO gt_bsed_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsed-bukrs.
              gs_protocol-belnr = ls_bsed-belnr.
              gs_protocol-gjahr = ls_bsed-gjahr.
              gs_protocol-buzei = ls_bsed-buzei.
              gs_protocol-error = ls_bsedmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSED entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsed-bukrs.
              gs_protocol-belnr = ls_bsed-belnr.
              gs_protocol-gjahr = ls_bsed-gjahr.
              gs_protocol-buzei = ls_bsed-buzei.
              gs_protocol-error = ls_bsedmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSED entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-error = ls_bsedmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSED Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsedmod-pairing IS NOT INITIAL.
            LOOP AT gt_bsed_store INTO ls_bsedmod2
              WHERE pairing = ls_bsedmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsedmod2 TO ls_bsed2.
              DELETE bsed FROM ls_bsed2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bsed
              FROM ls_bsed.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsedmodstore TO gt_bsed_store.
                gs_protocol-bukrs = ls_bsed-bukrs.
                gs_protocol-belnr = ls_bsed-belnr.
                gs_protocol-gjahr = ls_bsed-gjahr.
                gs_protocol-buzei = ls_bsed-buzei.
                gs_protocol-error = ls_bsedmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSED entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bsed FROM ls_bsed2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bsed-bukrs.
                gs_protocol-belnr = ls_bsed-belnr.
                gs_protocol-gjahr = ls_bsed-gjahr.
                gs_protocol-buzei = ls_bsed-buzei.
                gs_protocol-error = ls_bsedmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSED entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsedmod-check = ' '
      AND ls_bsedmod-orig = 'DTAB'
      AND ls_bsedmod-pairing IS INITIAL.
      DELETE bsed
      FROM ls_bsed.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsedmodstore TO gt_bsed_store.
        gs_protocol-bukrs = ls_bsed-bukrs.
        gs_protocol-belnr = ls_bsed-belnr.
        gs_protocol-gjahr = ls_bsed-gjahr.
        gs_protocol-buzei = ls_bsed-buzei.
        gs_protocol-error = ls_bsedmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSED entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bsed-bukrs.
        gs_protocol-belnr = ls_bsed-belnr.
        gs_protocol-gjahr = ls_bsed-gjahr.
        gs_protocol-buzei = ls_bsed-buzei.
        gs_protocol-error = ls_bsedmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSED entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bsed

*&---------------------------------------------------------------------*
*&      Form  update_bset
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bset.
  DATA ls_bsetmod LIKE bsetmoddisp.
  DATA ls_bsetmod2 LIKE bsetmoddisp.
*  DATA ls_bsetmodstore LIKE bsetmod.
  DATA ls_bset TYPE bset.
  DATA ls_bset2 TYPE bset.
  DATA select_count TYPE i.
  DATA bset_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bset_store INTO ls_bsetmod.
    MOVE-CORRESPONDING ls_bsetmod TO ls_bset.
*    MOVE-CORRESPONDING ls_bsetmod TO ls_bsetmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bset
      INTO select_count
      WHERE bukrs = ls_bset-bukrs
      AND belnr = ls_bset-belnr
      AND gjahr = ls_bset-gjahr
      AND buzei = ls_bset-buzei
      .

*** Insert data to database.
    IF ls_bsetmod-check = 'X'.
      IF ls_bsetmod-orig = 'BUIL'
        OR ls_bsetmod-orig = 'EDIT'
        OR ls_bsetmod-orig = 'INSE'
        OR ls_bsetmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bset
          FROM ls_bset.
          IF sy-subrc = 0.
*            APPEND ls_bsetmodstore TO gt_bset_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-error = ls_bsetmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSET entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-error = ls_bsetmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSET entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bset-bukrs.
          gs_protocol-belnr = ls_bset-belnr.
          gs_protocol-gjahr = ls_bset-gjahr.
          gs_protocol-buzei = ls_bset-buzei.
          gs_protocol-error = ls_bsetmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSET entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsetmod-check = 'E'
      OR ls_bsetmod-orig = 'EDIT'
      OR ( ls_bsetmod-orig = 'CORR'
      AND ls_bsetmod-check NE ' ' ).
      IF ls_bsetmod-orig = 'BUIL'
        OR ls_bsetmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT bset
          FROM ls_bset.
          IF sy-subrc = 0.
*            APPEND ls_bsetmodstore TO gt_bset_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-error = ls_bsetmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSET entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-error = ls_bsetmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSET entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bset-bukrs.
          gs_protocol-belnr = ls_bset-belnr.
          gs_protocol-gjahr = ls_bset-gjahr.
          gs_protocol-buzei = ls_bset-buzei.
          gs_protocol-error = ls_bsetmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSET entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.

        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bset
            FROM ls_bset.
            IF sy-subrc = 0.
*              APPEND ls_bsetmodstore TO gt_bset_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bset-bukrs.
              gs_protocol-belnr = ls_bset-belnr.
              gs_protocol-gjahr = ls_bset-gjahr.
              gs_protocol-buzei = ls_bset-buzei.
              gs_protocol-error = ls_bsetmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSET entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bset-bukrs.
              gs_protocol-belnr = ls_bset-belnr.
              gs_protocol-gjahr = ls_bset-gjahr.
              gs_protocol-buzei = ls_bset-buzei.
              gs_protocol-error = ls_bsetmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSET entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-error = ls_bsetmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSET Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bsetmod-pairing IS NOT INITIAL.
            LOOP AT gt_bset_store INTO ls_bsetmod2
              WHERE pairing = ls_bsetmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bsetmod2 TO ls_bset2.
              DELETE bset FROM ls_bset2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bset
              FROM ls_bset.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bsetmodstore TO gt_bset_store.
                gs_protocol-bukrs = ls_bset-bukrs.
                gs_protocol-belnr = ls_bset-belnr.
                gs_protocol-gjahr = ls_bset-gjahr.
                gs_protocol-buzei = ls_bset-buzei.
                gs_protocol-error = ls_bsetmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSET entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bset FROM ls_bset2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bset-bukrs.
                gs_protocol-belnr = ls_bset-belnr.
                gs_protocol-gjahr = ls_bset-gjahr.
                gs_protocol-buzei = ls_bset-buzei.
                gs_protocol-error = ls_bsetmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSET entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsetmod-check = ' '
      AND ls_bsetmod-orig = 'DTAB'
      AND ls_bsetmod-pairing IS INITIAL.
      DELETE bset
      FROM ls_bset.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bsetmodstore TO gt_bset_store.
        gs_protocol-bukrs = ls_bset-bukrs.
        gs_protocol-belnr = ls_bset-belnr.
        gs_protocol-gjahr = ls_bset-gjahr.
        gs_protocol-buzei = ls_bset-buzei.
        gs_protocol-error = ls_bsetmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSET entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bset-bukrs.
        gs_protocol-belnr = ls_bset-belnr.
        gs_protocol-gjahr = ls_bset-gjahr.
        gs_protocol-buzei = ls_bset-buzei.
        gs_protocol-error = ls_bsetmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSET entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bset

*&---------------------------------------------------------------------*
*&      Form  update_bse_clr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bse_clr.
  DATA ls_bse_clrmod LIKE bse_clrmoddisp.
  DATA ls_bse_clrmod2 LIKE bse_clrmoddisp.
*  DATA ls_bse_clrmodstore LIKE bse_clrmod.
  DATA ls_bse_clr TYPE bse_clr.
  DATA ls_bse_clr2 TYPE bse_clr.
  DATA select_count TYPE i.
  DATA bse_clr_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bse_clr_store INTO ls_bse_clrmod.
    MOVE-CORRESPONDING ls_bse_clrmod TO ls_bse_clr.
*    MOVE-CORRESPONDING ls_bse_clrmod TO ls_bse_clrmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bse_clr
      INTO select_count
      WHERE bukrs_clr = ls_bse_clr-bukrs_clr
      AND belnr_clr = ls_bse_clr-belnr_clr
      AND gjahr_clr = ls_bse_clr-gjahr_clr
      AND index_clr = ls_bse_clr-index_clr
      .

*** Insert data to database.
    IF ls_bse_clrmod-check = 'X'.
      IF ls_bse_clrmod-orig = 'BUIL'
        OR ls_bse_clrmod-orig = 'EDIT'
        OR ls_bse_clrmod-orig = 'INSE'
        OR ls_bse_clrmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bse_clr
          FROM ls_bse_clr.
          IF sy-subrc = 0.
*            APPEND ls_bse_clrmodstore TO gt_bse_clr_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-error = ls_bse_clrmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSE_CLR entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-error = ls_bse_clrmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSE_CLR entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bse_clr-bukrs.
          gs_protocol-belnr = ls_bse_clr-belnr.
          gs_protocol-gjahr = ls_bse_clr-gjahr.
          gs_protocol-buzei = ls_bse_clr-buzei.
          gs_protocol-error = ls_bse_clrmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSE_CLR entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bse_clrmod-check = 'E'
      OR ls_bse_clrmod-orig = 'EDIT'
      OR ( ls_bse_clrmod-orig = 'CORR'
      AND ls_bse_clrmod-check NE ' ' ).
      IF ls_bse_clrmod-orig = 'BUIL'
        OR ls_bse_clrmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT bse_clr
          FROM ls_bse_clr.
          IF sy-subrc = 0.
*            APPEND ls_bse_clrmodstore TO gt_bse_clr_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-error = ls_bse_clrmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSE_CLR entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-error = ls_bse_clrmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSE_CLR entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bse_clr-bukrs.
          gs_protocol-belnr = ls_bse_clr-belnr.
          gs_protocol-gjahr = ls_bse_clr-gjahr.
          gs_protocol-buzei = ls_bse_clr-buzei.
          gs_protocol-error = ls_bse_clrmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSE_CLR entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bse_clr
            FROM ls_bse_clr.
            IF sy-subrc = 0.
*              APPEND ls_bse_clrmodstore TO gt_bse_clr_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bse_clr-bukrs.
              gs_protocol-belnr = ls_bse_clr-belnr.
              gs_protocol-gjahr = ls_bse_clr-gjahr.
              gs_protocol-buzei = ls_bse_clr-buzei.
              gs_protocol-error = ls_bse_clrmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSE_CLR entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bse_clr-bukrs.
              gs_protocol-belnr = ls_bse_clr-belnr.
              gs_protocol-gjahr = ls_bse_clr-gjahr.
              gs_protocol-buzei = ls_bse_clr-buzei.
              gs_protocol-error = ls_bse_clrmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSE_CLR entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-error = ls_bse_clrmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSE_CLR Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bse_clrmod-pairing IS NOT INITIAL.
            LOOP AT gt_bse_clr_store INTO ls_bse_clrmod2
              WHERE pairing = ls_bse_clrmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bse_clrmod2 TO ls_bse_clr2.
              DELETE bse_clr FROM ls_bse_clr2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bse_clr
              FROM ls_bse_clr.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bse_clrmodstore TO gt_bse_clr_store.
                gs_protocol-bukrs = ls_bse_clr-bukrs.
                gs_protocol-belnr = ls_bse_clr-belnr.
                gs_protocol-gjahr = ls_bse_clr-gjahr.
                gs_protocol-buzei = ls_bse_clr-buzei.
                gs_protocol-error = ls_bse_clrmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSE_CLR entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bse_clr FROM ls_bse_clr2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bse_clr-bukrs.
                gs_protocol-belnr = ls_bse_clr-belnr.
                gs_protocol-gjahr = ls_bse_clr-gjahr.
                gs_protocol-buzei = ls_bse_clr-buzei.
                gs_protocol-error = ls_bse_clrmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSE_CLR entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bse_clrmod-check = ' '
      AND ls_bse_clrmod-orig = 'DTAB'
      AND ls_bse_clrmod-pairing IS INITIAL.
      DELETE bse_clr
      FROM ls_bse_clr.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bse_clrmodstore TO gt_bse_clr_store.
        gs_protocol-bukrs = ls_bse_clr-bukrs.
        gs_protocol-belnr = ls_bse_clr-belnr.
        gs_protocol-gjahr = ls_bse_clr-gjahr.
        gs_protocol-buzei = ls_bse_clr-buzei.
        gs_protocol-error = ls_bse_clrmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSE_CLR entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bse_clr-bukrs.
        gs_protocol-belnr = ls_bse_clr-belnr.
        gs_protocol-gjahr = ls_bse_clr-gjahr.
        gs_protocol-buzei = ls_bse_clr-buzei.
        gs_protocol-error = ls_bse_clrmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSE_CLR entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bse_clr

*&---------------------------------------------------------------------*
*&      Form  update_bseg_add
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_bseg_add.
  DATA ls_bseg_addmod LIKE bseg_addmoddisp.
  DATA ls_bseg_addmod2 LIKE bseg_addmoddisp.
*  DATA ls_bseg_addmodstore LIKE bseg_addmod.
  DATA ls_bseg_add TYPE bseg_add.
  DATA ls_bseg_add2 TYPE bseg_add.
  DATA select_count TYPE i.
  DATA bseg_add_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_bseg_add_store INTO ls_bseg_addmod.
    MOVE-CORRESPONDING ls_bseg_addmod TO ls_bseg_add.
*    MOVE-CORRESPONDING ls_bseg_addmod TO ls_bseg_addmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bseg_add
      INTO select_count
      WHERE bukrs = ls_bseg_add-bukrs
      AND belnr = ls_bseg_add-belnr
      AND gjahr = ls_bseg_add-gjahr
      AND buzei = ls_bseg_add-buzei
      .

*** Insert data to database.
    IF ls_bseg_addmod-check = 'X'.
      IF ls_bseg_addmod-orig = 'BUIL'
        OR ls_bseg_addmod-orig = 'EDIT'
        OR ls_bseg_addmod-orig = 'INSE'
        OR ls_bseg_addmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT bseg_add
          FROM ls_bseg_add.
          IF sy-subrc = 0.
*            APPEND ls_bseg_addmodstore TO gt_bseg_add_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-error = ls_bseg_addmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEG_ADD entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-error = ls_bseg_addmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEG_ADD entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg_add-bukrs.
          gs_protocol-belnr = ls_bseg_add-belnr.
          gs_protocol-gjahr = ls_bseg_add-gjahr.
          gs_protocol-buzei = ls_bseg_add-buzei.
          gs_protocol-error = ls_bseg_addmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEG_ADD entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bseg_addmod-check = 'E'
      OR ls_bseg_addmod-orig = 'EDIT'
      OR ( ls_bseg_addmod-orig = 'CORR'
      AND ls_bseg_addmod-check NE ' ' ).
      IF ls_bseg_addmod-orig = 'INSE'
        OR ls_bseg_addmod-orig = 'BUIL'.
        IF select_count = 0.
          INSERT bseg_add
          FROM ls_bseg_add.
          IF sy-subrc = 0.
*            APPEND ls_bseg_addmodstore TO gt_bseg_add_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-error = ls_bseg_addmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: BSEG_ADD entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-error = ls_bseg_addmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: BSEG_ADD entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg_add-bukrs.
          gs_protocol-belnr = ls_bseg_add-belnr.
          gs_protocol-gjahr = ls_bseg_add-gjahr.
          gs_protocol-buzei = ls_bseg_add-buzei.
          gs_protocol-error = ls_bseg_addmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: BSEG_ADD entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE bseg_add
            FROM ls_bseg_add.
            IF sy-subrc = 0.
*              APPEND ls_bseg_addmodstore TO gt_bseg_add_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg_add-bukrs.
              gs_protocol-belnr = ls_bseg_add-belnr.
              gs_protocol-gjahr = ls_bseg_add-gjahr.
              gs_protocol-buzei = ls_bseg_add-buzei.
              gs_protocol-error = ls_bseg_addmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: BSEG_ADD entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg_add-bukrs.
              gs_protocol-belnr = ls_bseg_add-belnr.
              gs_protocol-gjahr = ls_bseg_add-gjahr.
              gs_protocol-buzei = ls_bseg_add-buzei.
              gs_protocol-error = ls_bseg_addmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: BSEG_ADD entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-error = ls_bseg_addmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No BSEG_ADD Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_bseg_addmod-pairing IS NOT INITIAL.
            LOOP AT gt_bseg_add_store INTO ls_bseg_addmod2
              WHERE pairing = ls_bseg_addmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_bseg_addmod2 TO ls_bseg_add2.
              DELETE bseg_add FROM ls_bseg_add2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT bseg_add
              FROM ls_bseg_add.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_bseg_addmodstore TO gt_bseg_add_store.
                gs_protocol-bukrs = ls_bseg_add-bukrs.
                gs_protocol-belnr = ls_bseg_add-belnr.
                gs_protocol-gjahr = ls_bseg_add-gjahr.
                gs_protocol-buzei = ls_bseg_add-buzei.
                gs_protocol-error = ls_bseg_addmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: BSEG_ADD entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT bseg_add FROM ls_bseg_add2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_bseg_add-bukrs.
                gs_protocol-belnr = ls_bseg_add-belnr.
                gs_protocol-gjahr = ls_bseg_add-gjahr.
                gs_protocol-buzei = ls_bseg_add-buzei.
                gs_protocol-error = ls_bseg_addmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: BSEG_ADD entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bseg_addmod-check = ' '
      AND ls_bseg_addmod-orig = 'DTAB'
      AND ls_bseg_addmod-pairing IS INITIAL.
      DELETE bseg_add
      FROM ls_bseg_add.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_bseg_addmodstore TO gt_bseg_add_store.
        gs_protocol-bukrs = ls_bseg_add-bukrs.
        gs_protocol-belnr = ls_bseg_add-belnr.
        gs_protocol-gjahr = ls_bseg_add-gjahr.
        gs_protocol-buzei = ls_bseg_add-buzei.
        gs_protocol-error = ls_bseg_addmod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: BSEG_ADD entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_bseg_add-bukrs.
        gs_protocol-belnr = ls_bseg_add-belnr.
        gs_protocol-gjahr = ls_bseg_add-gjahr.
        gs_protocol-buzei = ls_bseg_add-buzei.
        gs_protocol-error = ls_bseg_addmod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: BSEG_ADD entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_bseg_add


*&---------------------------------------------------------------------*
*&      Form  update_splinfo
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_splinfo.
  DATA ls_splinfomod LIKE splinfomoddisp.
  DATA ls_splinfomod2 LIKE splinfomoddisp.
*  DATA ls_splinfomodstore LIKE splinfomod.
  DATA ls_splinfo TYPE fagl_splinfo.
  DATA ls_splinfo2 TYPE fagl_splinfo.
  DATA select_count TYPE i.
  DATA splinfo_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_splinfo_store INTO ls_splinfomod.
    MOVE-CORRESPONDING ls_splinfomod TO ls_splinfo.
*    MOVE-CORRESPONDING ls_splinfomod TO ls_splinfomodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM fagl_splinfo
      INTO select_count
      WHERE bukrs = ls_splinfo-bukrs
      AND belnr = ls_splinfo-belnr
      AND gjahr = ls_splinfo-gjahr
      AND buzei = ls_splinfo-buzei
      AND spl_no = ls_splinfo-spl_no
      .

*** Insert data to database.
    IF ls_splinfomod-check = 'X'.
      IF ls_splinfomod-orig = 'BUIL'
        OR ls_splinfomod-orig = 'EDIT'
        OR ls_splinfomod-orig = 'INSE'
        OR ls_splinfomod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT fagl_splinfo
          FROM ls_splinfo.
          IF sy-subrc = 0.
*            APPEND ls_splinfomodstore TO gt_splinfo_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-error = ls_splinfomod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: SPLINFO entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-error = ls_splinfomod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: SPLINFO entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo-bukrs.
          gs_protocol-belnr = ls_splinfo-belnr.
          gs_protocol-gjahr = ls_splinfo-gjahr.
          gs_protocol-buzei = ls_splinfo-buzei.
          gs_protocol-error = ls_splinfomod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: SPLINFO entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfomod-check = 'E'
      OR ls_splinfomod-orig = 'EDIT'
      OR ( ls_splinfomod-orig = 'CORR'
      AND ls_splinfomod-check NE ' ' ).
      IF ls_splinfomod-orig = 'BUIL'
        OR ls_splinfomod-orig = 'INSE'.
        IF select_count = 0.
          INSERT fagl_splinfo
          FROM ls_splinfo.
          IF sy-subrc = 0.
*            APPEND ls_splinfomodstore TO gt_splinfo_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-error = ls_splinfomod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: SPLINFO entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-error = ls_splinfomod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: SPLINFO entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo-bukrs.
          gs_protocol-belnr = ls_splinfo-belnr.
          gs_protocol-gjahr = ls_splinfo-gjahr.
          gs_protocol-buzei = ls_splinfo-buzei.
          gs_protocol-error = ls_splinfomod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: SPLINFO entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE fagl_splinfo
            FROM ls_splinfo.
            IF sy-subrc = 0.
*              APPEND ls_splinfomodstore TO gt_splinfo_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo-bukrs.
              gs_protocol-belnr = ls_splinfo-belnr.
              gs_protocol-gjahr = ls_splinfo-gjahr.
              gs_protocol-buzei = ls_splinfo-buzei.
              gs_protocol-error = ls_splinfomod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: SPLINFO entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo-bukrs.
              gs_protocol-belnr = ls_splinfo-belnr.
              gs_protocol-gjahr = ls_splinfo-gjahr.
              gs_protocol-buzei = ls_splinfo-buzei.
              gs_protocol-error = ls_splinfomod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: SPLINFO entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-error = ls_splinfomod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No SPLINFO Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_splinfomod-pairing IS NOT INITIAL.
            LOOP AT gt_splinfo_store INTO ls_splinfomod2
              WHERE pairing = ls_splinfomod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_splinfomod2 TO ls_splinfo2.
              DELETE fagl_splinfo FROM ls_splinfo2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT fagl_splinfo
              FROM ls_splinfo.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_splinfomodstore TO gt_splinfo_store.
                gs_protocol-bukrs = ls_splinfo-bukrs.
                gs_protocol-belnr = ls_splinfo-belnr.
                gs_protocol-gjahr = ls_splinfo-gjahr.
                gs_protocol-buzei = ls_splinfo-buzei.
                gs_protocol-error = ls_splinfomod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: SPLINFO entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT fagl_splinfo FROM ls_splinfo2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_splinfo-bukrs.
                gs_protocol-belnr = ls_splinfo-belnr.
                gs_protocol-gjahr = ls_splinfo-gjahr.
                gs_protocol-buzei = ls_splinfo-buzei.
                gs_protocol-error = ls_splinfomod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: SPLINFO entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfomod-check = ' '
      AND ls_splinfomod-orig = 'DTAB'
      AND ls_splinfomod-pairing IS INITIAL.
      DELETE fagl_splinfo
      FROM ls_splinfo.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_splinfomodstore TO gt_splinfo_store.
        gs_protocol-bukrs = ls_splinfo-bukrs.
        gs_protocol-belnr = ls_splinfo-belnr.
        gs_protocol-gjahr = ls_splinfo-gjahr.
        gs_protocol-buzei = ls_splinfo-buzei.
        gs_protocol-error = ls_splinfomod-error.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: SPLINFO entry deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_splinfo-bukrs.
        gs_protocol-belnr = ls_splinfo-belnr.
        gs_protocol-gjahr = ls_splinfo-gjahr.
        gs_protocol-buzei = ls_splinfo-buzei.
        gs_protocol-error = ls_splinfomod-error.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: SPLINFO entry not deleted'.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_splinfo


*&---------------------------------------------------------------------*
*&      Form  update_splinfo_val
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_splinfo_val.
  DATA ls_splinfo_valmod LIKE splinfovalmoddisp.
  DATA ls_splinfo_valmod2 LIKE splinfovalmoddisp.
*  DATA ls_splinfo_valmodstore LIKE splinfovalmod.
  DATA ls_splinfo_val TYPE fagl_splinfo_val.
  DATA ls_splinfo_val2 TYPE fagl_splinfo_val.
  DATA select_count TYPE i.
  DATA splinfo_val_update_count TYPE i.
  DATA ld_subrc TYPE i.

  LOOP AT gt_splinfo_val_store INTO ls_splinfo_valmod.
    MOVE-CORRESPONDING ls_splinfo_valmod TO ls_splinfo_val.
*    MOVE-CORRESPONDING ls_splinfo_valmod TO ls_splinfo_valmodstore.

*** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM fagl_splinfo_val
        INTO select_count
      WHERE bukrs = ls_splinfo_val-bukrs
      AND belnr = ls_splinfo_val-belnr
      AND gjahr = ls_splinfo_val-gjahr
      AND buzei = ls_splinfo_val-buzei
      AND spl_no = ls_splinfo_val-spl_no
      AND curtp = ls_splinfo_val-curtp
    .

*** Insert data to database.
    IF ls_splinfo_valmod-check = 'X'.
      IF ls_splinfo_valmod-orig = 'BUIL'
        OR ls_splinfo_valmod-orig = 'EDIT'
        OR ls_splinfo_valmod-orig = 'INSE'
        OR ls_splinfo_valmod-orig = 'EXTR'.
        IF select_count = 0.
          INSERT fagl_splinfo_val
          FROM ls_splinfo_val.
          IF sy-subrc = 0.
*            APPEND ls_splinfo_valmodstore TO gt_splinfo_val_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-error = ls_splinfo_valmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: SPLINFO_VAL entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-error = ls_splinfo_valmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: SPLINFO_VAL entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo_val-bukrs.
          gs_protocol-belnr = ls_splinfo_val-belnr.
          gs_protocol-gjahr = ls_splinfo_val-gjahr.
          gs_protocol-buzei = ls_splinfo_val-buzei.
          gs_protocol-error = ls_splinfo_valmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: SPLINFO_VAL entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfo_valmod-check = 'E'
      OR ls_splinfo_valmod-orig = 'EDIT'
      OR ( ls_splinfo_valmod-orig = 'CORR'
      AND ls_splinfo_valmod-check NE ' ' ).
      IF ls_splinfo_valmod-orig = 'BUIL'
        OR ls_splinfo_valmod-orig = 'INSE'.
        IF select_count = 0.
          INSERT fagl_splinfo_val
          FROM ls_splinfo_val.
          IF sy-subrc = 0.
*            APPEND ls_splinfo_valmodstore TO gt_splinfo_val_store.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-error = ls_splinfo_valmod-error.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'INSERT: SPLINFO_VAL entry inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-error = ls_splinfo_valmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'INSERT: SPLINFO_VAL entry not inserted'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo_val-bukrs.
          gs_protocol-belnr = ls_splinfo_val-belnr.
          gs_protocol-gjahr = ls_splinfo_val-gjahr.
          gs_protocol-buzei = ls_splinfo_val-buzei.
          gs_protocol-error = ls_splinfo_valmod-error.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'INSERT: SPLINFO_VAL entry already existing'.
          APPEND gs_protocol TO gt_protocol_store.
        ENDIF.
      ELSE.
        IF p_edkey IS INITIAL.
          IF select_count = 1.
            UPDATE fagl_splinfo_val
            FROM ls_splinfo_val.
            IF sy-subrc = 0.
*              APPEND ls_splinfo_valmodstore TO gt_splinfo_val_store.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo_val-bukrs.
              gs_protocol-belnr = ls_splinfo_val-belnr.
              gs_protocol-gjahr = ls_splinfo_val-gjahr.
              gs_protocol-buzei = ls_splinfo_val-buzei.
              gs_protocol-error = ls_splinfo_valmod-error.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'UPDATE: SPLINFO_VAL entry updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ELSE.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo_val-bukrs.
              gs_protocol-belnr = ls_splinfo_val-belnr.
              gs_protocol-gjahr = ls_splinfo_val-gjahr.
              gs_protocol-buzei = ls_splinfo_val-buzei.
              gs_protocol-error = ls_splinfo_valmod-error.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'UPDATE: SPLINFO_VAL entry not updated'.
              APPEND gs_protocol TO gt_protocol_store.
            ENDIF.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-error = ls_splinfo_valmod-error.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'UPDATE: No SPLINFO_VAL Entry found to update'.
            APPEND gs_protocol TO gt_protocol_store.
          ENDIF.
        ELSE.
          IF ls_splinfo_valmod-pairing IS NOT INITIAL.
            LOOP AT gt_splinfo_val_store INTO ls_splinfo_valmod2
              WHERE pairing = ls_splinfo_valmod-pairing
              AND check NE 'E'
              AND orig NE 'EDIT'.
              MOVE-CORRESPONDING ls_splinfo_valmod2 TO ls_splinfo_val2.
              DELETE fagl_splinfo_val FROM ls_splinfo_val2.
              ADD sy-subrc TO ld_subrc.
            ENDLOOP.
            IF ld_subrc = 0.
              INSERT fagl_splinfo_val
              FROM ls_splinfo_val.
              IF sy-subrc = 0.
                CLEAR gs_protocol.
*                APPEND ls_splinfo_valmodstore TO gt_splinfo_val_store.
                gs_protocol-bukrs = ls_splinfo_val-bukrs.
                gs_protocol-belnr = ls_splinfo_val-belnr.
                gs_protocol-gjahr = ls_splinfo_val-gjahr.
                gs_protocol-buzei = ls_splinfo_val-buzei.
                gs_protocol-error = ls_splinfo_valmod-error.
                gs_protocol-type = '@5B@'.
                gs_protocol-message = 'UPDATE-KEY: SPLINFO_VAL entry updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ELSE.
                INSERT fagl_splinfo_val FROM ls_splinfo_val2.
                CLEAR gs_protocol.
                gs_protocol-bukrs = ls_splinfo_val-bukrs.
                gs_protocol-belnr = ls_splinfo_val-belnr.
                gs_protocol-gjahr = ls_splinfo_val-gjahr.
                gs_protocol-buzei = ls_splinfo_val-buzei.
                gs_protocol-error = ls_splinfo_valmod-error.
                gs_protocol-type = '@5C@'.
                gs_protocol-message = 'UPDATE-KEY: SPLINFO_VAL entry not updated'.
                APPEND gs_protocol TO gt_protocol_store.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfo_valmod-check = ' '
      AND ls_splinfo_valmod-orig = 'DTAB'
      AND ls_splinfo_valmod-pairing IS INITIAL.
      DELETE fagl_splinfo_val
      FROM ls_splinfo_val.
      IF sy-subrc = 0.
        CLEAR gs_protocol.
*        APPEND ls_splinfo_valmodstore TO gt_splinfo_val_store.
        gs_protocol-bukrs = ls_splinfo_val-bukrs.
        gs_protocol-belnr = ls_splinfo_val-belnr.
        gs_protocol-gjahr = ls_splinfo_val-gjahr.
        gs_protocol-buzei = ls_splinfo_val-buzei.
        gs_protocol-type = '@5B@'.
        gs_protocol-message = 'DELETE: SPLINFO_VAL entry deleted'.
        gs_protocol-error = ls_splinfo_valmod-error.
        APPEND gs_protocol TO gt_protocol_store.
      ELSE.
        CLEAR gs_protocol.
        gs_protocol-bukrs = ls_splinfo_val-bukrs.
        gs_protocol-belnr = ls_splinfo_val-belnr.
        gs_protocol-gjahr = ls_splinfo_val-gjahr.
        gs_protocol-buzei = ls_splinfo_val-buzei.
        gs_protocol-type = '@5C@'.
        gs_protocol-message = 'DELETE: SPLINFO_VAL entry not deleted'.
        gs_protocol-error = ls_splinfo_valmod-error.
        APPEND gs_protocol TO gt_protocol_store.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "update_splinfo_val

*&---------------------------------------------------------------------*
*&      Form  SELECT_BELNR
*&---------------------------------------------------------------------*
FORM select_belnr USING ls_bkpfmod LIKE bkpfmoddisp.

  DATA:
    ld_row            TYPE i,
    ls_bkpfmod2       LIKE bkpfmoddisp,
    ls_bsegmod        LIKE bsegmoddisp,
    ls_bsismod        LIKE bsismoddisp,
    ls_bsasmod        LIKE bsasmoddisp,
    ls_bsikmod        LIKE bsikmoddisp,
    ls_bsakmod        LIKE bsakmoddisp,
    ls_bsidmod        LIKE bsidmoddisp,
    ls_bsadmod        LIKE bsadmoddisp,
    ls_bseg_addmod    LIKE bseg_addmoddisp,
    ls_bse_clrmod     LIKE bse_clrmoddisp,
    ls_bsecmod        LIKE bsecmoddisp,
    ls_bsetmod        LIKE bsetmoddisp,
    ls_bsedmod        LIKE bsedmoddisp,
    ls_glu1modisp     LIKE glu1moddisp,
    ls_splinfomod     LIKE splinfomoddisp,
    ls_splinfo_valmod LIKE splinfovalmoddisp,
    ls_flagmod        LIKE LINE OF gt_flag.

  CLEAR gt_flag_disp.
  LOOP AT gt_flag_store INTO ls_flagmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    APPEND ls_flagmod TO gt_flag_disp.
  ENDLOOP.
  DELETE ADJACENT DUPLICATES FROM gt_flag_disp.

  CLEAR gt_bkpf_disp.
  LOOP AT gt_bkpf_store INTO ls_bkpfmod2
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bkpfmod2-check.
      WHEN 'X'.
        ls_bkpfmod2-rowcolor = ' '.
      WHEN ' '.
        ls_bkpfmod2-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bkpfmod2-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bkpfmod2-rowcolor = ' '.
    ENDIF.
    APPEND ls_bkpfmod2 TO gt_bkpf_disp.
  ENDLOOP.

  CLEAR gt_bseg_disp.
  LOOP AT gt_bseg_store INTO ls_bsegmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bsegmod-check.
      WHEN 'X'.
        ls_bsegmod-rowcolor = ' '.
      WHEN ' '.
        ls_bsegmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bsegmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bsegmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bsegmod TO gt_bseg_disp.
  ENDLOOP.

  IF acdoca_active = 0.
    CLEAR gt_bsis_disp.
    LOOP AT gt_bsis_store INTO ls_bsismod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsismod-check.
        WHEN 'X'.
          ls_bsismod-rowcolor = ' '.
        WHEN ' '.
          ls_bsismod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsismod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsismod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsismod TO gt_bsis_disp.
    ENDLOOP.

    CLEAR gt_bsas_disp.
    LOOP AT gt_bsas_store INTO ls_bsasmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsasmod-check.
        WHEN 'X'.
          ls_bsasmod-rowcolor = ' '.
        WHEN ' '.
          ls_bsasmod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsasmod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsasmod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsasmod TO gt_bsas_disp.
    ENDLOOP.

    CLEAR gt_bsik_disp.
    LOOP AT gt_bsik_store INTO ls_bsikmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsikmod-check.
        WHEN 'X'.
          ls_bsikmod-rowcolor = ' '.
        WHEN ' '.
          ls_bsikmod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsikmod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsismod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsikmod TO gt_bsik_disp.
    ENDLOOP.

    CLEAR gt_bsak_disp.
    LOOP AT gt_bsak_store INTO ls_bsakmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsakmod-check.
        WHEN 'X'.
          ls_bsakmod-rowcolor = ' '.
        WHEN ' '.
          ls_bsakmod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsakmod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsakmod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsakmod TO gt_bsak_disp.
    ENDLOOP.

    CLEAR gt_bsid_disp.
    LOOP AT gt_bsid_store INTO ls_bsidmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsidmod-check.
        WHEN 'X'.
          ls_bsidmod-rowcolor = ' '.
        WHEN ' '.
          ls_bsidmod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsidmod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsidmod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsidmod TO gt_bsid_disp.
    ENDLOOP.

    CLEAR gt_bsad_disp.
    LOOP AT gt_bsad_store INTO ls_bsadmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
      CASE ls_bsadmod-check.
        WHEN 'X'.
          ls_bsadmod-rowcolor = ' '.
        WHEN ' '.
          ls_bsadmod-rowcolor = 'C600'.
        WHEN 'M' OR 'B'.
          ls_bsadmod-rowcolor = 'C300'.
      ENDCASE.
      IF save_flag IS NOT INITIAL.
        ls_bsadmod-rowcolor = ' '.
      ENDIF.
      APPEND ls_bsadmod TO gt_bsad_disp.
    ENDLOOP.
  ENDIF.

  CLEAR gt_bseg_add_disp.
  LOOP AT gt_bseg_add_store INTO ls_bseg_addmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bseg_addmod-check.
      WHEN 'X'.
        ls_bseg_addmod-rowcolor = ' '.
      WHEN ' '.
        ls_bseg_addmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bseg_addmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bseg_addmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bseg_addmod TO gt_bseg_add_disp.
  ENDLOOP.

  CLEAR gt_bse_clr_disp.
  LOOP AT gt_bse_clr_store INTO ls_bse_clrmod
    WHERE bukrs_clr = ls_bkpfmod-bukrs
    AND belnr_clr = ls_bkpfmod-belnr
    AND gjahr_clr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bse_clrmod-check.
      WHEN 'X'.
        ls_bse_clrmod-rowcolor = ' '.
      WHEN ' '.
        ls_bse_clrmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bse_clrmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bse_clrmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bse_clrmod TO gt_bse_clr_disp.
  ENDLOOP.

  CLEAR gt_bsec_disp.
  LOOP AT gt_bsec_store INTO ls_bsecmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bsecmod-check.
      WHEN 'X'.
        ls_bsecmod-rowcolor = ' '.
      WHEN ' '.
        ls_bsecmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bsecmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bsecmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bsecmod TO gt_bsec_disp.
  ENDLOOP.

  CLEAR gt_bsed_disp.
  LOOP AT gt_bsed_store INTO ls_bsedmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bsedmod-check.
      WHEN 'X'.
        ls_bsedmod-rowcolor = ' '.
      WHEN ' '.
        ls_bsedmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bsedmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bsedmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bsedmod TO gt_bsed_disp.
  ENDLOOP.

  CLEAR gt_bset_disp.
  LOOP AT gt_bset_store INTO ls_bsetmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_bsetmod-check.
      WHEN 'X'.
        ls_bsetmod-rowcolor = ' '.
      WHEN ' '.
        ls_bsetmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_bsetmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_bsetmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_bsetmod TO gt_bset_disp.
  ENDLOOP.

  CLEAR gt_glu1mod_disp.
  LOOP AT gt_glu1_store INTO ls_glu1modisp
    WHERE rbukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_glu1modisp-check.
      WHEN 'X'.
        ls_glu1modisp-rowcolor = ' '.
      WHEN ' '.
        ls_glu1modisp-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_glu1modisp-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_glu1modisp-rowcolor = ' '.
    ENDIF.
    APPEND ls_glu1modisp TO gt_glu1mod_disp.
  ENDLOOP.

  CLEAR gt_splinfo_disp.
  LOOP AT gt_splinfo_store INTO ls_splinfomod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_splinfomod-check.
      WHEN 'X'.
        ls_splinfomod-rowcolor = ' '.
      WHEN ' '.
        ls_splinfomod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_splinfomod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_splinfomod-rowcolor = ' '.
    ENDIF.
    APPEND ls_splinfomod TO gt_splinfo_disp.
  ENDLOOP.

  CLEAR gt_splinfo_val_disp.
  LOOP AT gt_splinfo_val_store INTO ls_splinfo_valmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr
    AND NOT ( check = 'O' AND orig NE 'DTAB').
    CASE ls_splinfo_valmod-check.
      WHEN 'X'.
        ls_splinfo_valmod-rowcolor = ' '.
      WHEN ' '.
        ls_splinfo_valmod-rowcolor = 'C600'.
      WHEN 'M' OR 'B'.
        ls_splinfo_valmod-rowcolor = 'C300'.
    ENDCASE.
    IF save_flag IS NOT INITIAL.
      ls_splinfo_valmod-rowcolor = ' '.
    ENDIF.
    APPEND ls_splinfo_valmod TO gt_splinfo_val_disp.
  ENDLOOP.


  ld_height_r1 = 10.
  ld_height_r2 = 10.
  ld_height_r3 = 10.
  ld_height_r4 = 10.
  IF acdoca_active = 0.
    ld_height_r5 = 10.
    ld_height_r6 = 10.
    ld_height_r7 = 10.
    ld_height_r8 = 10.
    ld_height_r9 = 10.
    ld_height_r10 = 10.
  ELSE.
    ld_height_r5 = 0.
    ld_height_r6 = 0.
    ld_height_r7 = 0.
    ld_height_r8 = 0.
    ld_height_r9 = 0.
    ld_height_r10 = 0.
  ENDIF.
  ld_height_r11 = 10.
  ld_height_r12 = 10.
  ld_height_r13 = 10.
  ld_height_r14 = 10.
  ld_height_r15 = 10.
  ld_height_r16 = 10.

  IF p_dauto IS INITIAL.
    IF p_dbsgad IS INITIAL.
      ld_height_r16 = 0.
    ENDIF.

    IF p_dbsclr IS INITIAL.
      ld_height_r15 = 0.
    ENDIF.

    IF p_dbset IS INITIAL.
      ld_height_r14 = 0.
    ENDIF.

    IF p_dbsed IS INITIAL.
      ld_height_r13 = 0.
    ENDIF.

    IF p_dbsec IS INITIAL.
      ld_height_r12 = 0.
    ENDIF.

    IF p_dbkpf IS INITIAL.
      ld_height_r1 = 0.
    ENDIF.

    IF p_dbseg IS INITIAL.
      ld_height_r2 = 0.
    ENDIF.

    IF p_dgl IS INITIAL.
      ld_height_r4 = 0.
    ENDIF.

    IF p_dindex IS INITIAL.
      ld_height_r5 = 0.
      ld_height_r6 = 0.
      ld_height_r7 = 0.
      ld_height_r8 = 0.
      ld_height_r9 = 0.
      ld_height_r10 = 0.
    ENDIF.

    IF p_dsplit IS INITIAL.
      ld_height_r3 = 0.
      ld_height_r11 = 0.
    ENDIF.
  ENDIF.

  IF gt_bsec_disp IS INITIAL.
    ld_height_r12 = 0.
  ENDIF.

  IF gt_bsed_disp IS INITIAL.
    ld_height_r13 = 0.
  ENDIF.

  IF gt_bset_disp IS INITIAL.
    ld_height_r14 = 0.
  ENDIF.

  IF gt_bse_clr_disp IS INITIAL.
    ld_height_r15 = 0.
  ENDIF.

  IF gt_bseg_add_disp IS INITIAL.
    ld_height_r16 = 0.
  ENDIF.

  IF gt_splinfo_disp IS INITIAL.
    ld_height_r3 = 0.
  ENDIF.

  IF gt_splinfo_val_disp IS INITIAL.
    ld_height_r11 = 0.
  ENDIF.

  IF gt_bsis_disp IS INITIAL.
    ld_height_r5 = 0.
  ENDIF.

  IF gt_bsas_disp IS INITIAL.
    ld_height_r6 = 0.
  ENDIF.

  IF gt_bsik_disp IS INITIAL.
    ld_height_r7 = 0.
  ENDIF.

  IF gt_bsak_disp IS INITIAL.
    ld_height_r8 = 0.
  ENDIF.

  IF gt_bsid_disp IS INITIAL.
    ld_height_r9 = 0.
  ENDIF.

  IF gt_bsad_disp IS INITIAL.
    ld_height_r10 = 0.
  ENDIF.

  IF gt_bkpf_disp IS INITIAL.
    ld_height_r1 = 0.
  ENDIF.

  IF gt_bseg_disp IS INITIAL.
    ld_height_r2 = 0.
  ENDIF.

  IF gt_glu1mod_disp IS INITIAL.
    ld_height_r4 = 0.
  ENDIF.

  l_splitter2->set_row_height( id = 1 height = ld_height_r1 ).
  l_splitter2->set_row_height( id = 2 height = ld_height_r2 ).
  l_splitter2->set_row_height( id = 9 height = ld_height_r3 ).
  l_splitter2->set_row_height( id = 16 height = ld_height_r4 ).
  l_splitter2->set_row_height( id = 3 height = ld_height_r5 ).
  l_splitter2->set_row_height( id = 4 height = ld_height_r6 ).
  l_splitter2->set_row_height( id = 5 height = ld_height_r7 ).
  l_splitter2->set_row_height( id = 6 height = ld_height_r8 ).
  l_splitter2->set_row_height( id = 7 height = ld_height_r9 ).
  l_splitter2->set_row_height( id = 8 height = ld_height_r10 ).
  l_splitter2->set_row_height( id = 10 height = ld_height_r11 ).
  l_splitter2->set_row_height( id = 11 height = ld_height_r12 ).
  l_splitter2->set_row_height( id = 12 height = ld_height_r13 ).
  l_splitter2->set_row_height( id = 13 height = ld_height_r14 ).
  l_splitter2->set_row_height( id = 14 height = ld_height_r15 ).
  l_splitter2->set_row_height( id = 15 height = ld_height_r16 ).

  IF button_bkpf = 1.
    o_tool->delete_button( fcode = 'BKPF' ).
    button_bkpf = 0.
  ENDIF.

  IF button_bseg = 1.
    o_tool->delete_button( fcode = 'BSEG' ).
    button_bseg = 0.
  ENDIF.

  IF button_bsis = 1.
    o_tool->delete_button( fcode = 'BSIS' ).
    button_bsis = 0.
  ENDIF.

  IF button_bsas = 1.
    o_tool->delete_button( fcode = 'BSAS' ).
    button_bsas = 0.
  ENDIF.

  IF button_bsik = 1.
    o_tool->delete_button( fcode = 'BSIK' ).
    button_bsik = 0.
  ENDIF.

  IF button_bsid = 1.
    o_tool->delete_button( fcode = 'BSID' ).
    button_bsid = 0.
  ENDIF.

  IF button_bsad = 1.
    o_tool->delete_button( fcode = 'BSAD' ).
    button_bsad = 0.
  ENDIF.

  IF button_bsec = 1.
    o_tool->delete_button( fcode = 'BSEC' ).
    button_bsec = 0.
  ENDIF.

  IF button_bsed = 1.
    o_tool->delete_button( fcode = 'BSED' ).
    button_bsed = 0.
  ENDIF.

  IF button_bset = 1.
    o_tool->delete_button( fcode = 'BSET' ).
    button_bset = 0.
  ENDIF.

  IF button_bse_clr = 1.
    o_tool->delete_button( fcode = 'BSE_CLR' ).
    button_bse_clr = 0.
  ENDIF.

  IF button_bseg_add = 1.
    o_tool->delete_button( fcode = 'BSEG_ADD' ).
    button_bseg_add = 0.
  ENDIF.

  IF button_splinfo = 1.
    o_tool->delete_button( fcode = 'SPLINFO' ).
    button_splinfo = 0.
  ENDIF.

  IF button_splinfo_val = 1.
    o_tool->delete_button( fcode = 'SPLINFO_VAL' ).
    button_splinfo_val = 0.
  ENDIF.

  IF button_gl = 1.
    o_tool->delete_button( fcode = 'G/L' ).
    button_gl = 0.
  ENDIF.


  IF gt_bkpf_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BKPF'
                             icon = icon_active_inactive
                             butn_type = '0'
                             text = 'BKPF'
                             quickinfo = 'BKPF'
                             is_checked = abap_false
                             is_disabled = abap_false ).
    button_bkpf = 1.
  ENDIF.



  IF gt_bseg_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSEG'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSEG'
                      quickinfo = 'BSEG'
                      is_checked = abap_false
                      is_disabled = abap_false ).
    button_bseg = 1.
  ENDIF.

  IF acdoca_active = 0.
    IF gt_bsis_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSIS'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSIS'
                      quickinfo = 'BSIS'
                      is_checked = abap_false
                      is_disabled = abap_false ).
      button_bsis = 1.
    ENDIF.

    IF gt_bsas_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSAS'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAS'
                        quickinfo = 'BSAS'
                        is_checked = abap_false
                        is_disabled = abap_false ).
      button_bsas = 1.
    ENDIF.

    IF gt_bsik_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSIK'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSIK'
                      quickinfo = 'BSIK'
                      is_checked = abap_false
                      is_disabled = abap_false ).
      button_bsik = 1.
    ENDIF.

    IF gt_bsak_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSAK'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAK'
                        quickinfo = 'BSAK'
                        is_checked = abap_false
                        is_disabled = abap_false ).
      button_bsak = 1.
    ENDIF.

    IF gt_bsid_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSID'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSID'
                      quickinfo = 'BSID'
                      is_checked = abap_false
                      is_disabled = abap_false ).
      button_bsid = 1.
    ENDIF.

    IF gt_bsad_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'BSAD'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAD'
                        quickinfo = 'BSAD'
                        is_checked = abap_false
                        is_disabled = abap_false ).
      button_bsad = 1.
    ENDIF.
  ENDIF.

  IF gt_bsec_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSEC'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSEC'
                    quickinfo = 'BSEC'
                    is_checked = abap_false
                    is_disabled = abap_false ).
    button_bsec = 1.
  ENDIF.

  IF gt_bsed_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSED'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSED'
                      quickinfo = 'BSED'
                      is_checked = abap_false
                      is_disabled = abap_false ).
    button_bsed = 1.
  ENDIF.

  IF gt_bset_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSET'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSET'
                    quickinfo = 'BSET'
                    is_checked = abap_false
                    is_disabled = abap_false ).
    button_bset = 1.
  ENDIF.

  IF gt_bse_clr_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSE_CLR'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSE_CLR'
                      quickinfo = 'BSE_CLR'
                      is_checked = abap_false
                      is_disabled = abap_false ).
    button_bse_clr = 1.
  ENDIF.

  IF gt_bseg_add_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'BSEG_ADD'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSEG_ADD'
                    quickinfo = 'BSEG_ADD'
                    is_checked = abap_false
                    is_disabled = abap_false ).
    button_bseg_add = 1.
  ENDIF.

  IF gt_splinfo_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'SPLINFO'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'SPLINFO'
                      quickinfo = 'SPLINFO'
                      is_checked = abap_false
                      is_disabled = abap_false ).
    button_splinfo = 1.
  ENDIF.

  IF gt_splinfo_val_disp IS NOT INITIAL.
    o_tool->add_button( fcode = 'SPLINFO_VAL'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'SPLINFO_VAL'
                    quickinfo = 'SPLINFO_VAL'
                    is_checked = abap_false
                    is_disabled = abap_false ).
    button_splinfo_val = 1.
  ENDIF.

  IF acdoca_active = 0.
    IF gt_glu1mod_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'G/L'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'G/L'
                        quickinfo = 'G/L'
                        is_checked = abap_false
                        is_disabled = abap_false ).
      button_gl = 1.
    ENDIF.
  ELSE.
    IF gt_glu1mod_disp IS NOT INITIAL.
      o_tool->add_button( fcode = 'G/L'
                   icon = icon_active_inactive
                   butn_type = '0'
                   text = 'ACDOCA'
                   quickinfo = 'ACDOCA'
                   is_checked = abap_false
                   is_disabled = abap_false ).
      button_gl = 1.
    ENDIF.
  ENDIF.


  IF flag_alv_left = 1.
    CALL METHOD l_alv_left->refresh_table_display.
  ELSE.
    l_alv_left->set_table_for_first_display( EXPORTING
                                       is_layout = color_layout
                                       is_variant = gs_variant
                                       CHANGING
                                       it_fieldcatalog = t_fieldcat_left[]
                                       it_outtab        = gt_doclist_store ).

    l_alv_left->set_gridtitle( EXPORTING i_gridtitle = 'Document List' ).
    flag_alv_left = 1.
*    l_alv_left->set_toolbar_interactive( ).
  ENDIF.
  IF flag_alv_r1 = 1.
    CALL METHOD l_alv_r1->refresh_table_display.
  ELSE.
    IF ld_height_r1 IS NOT INITIAL.
      l_alv_r1->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bkpfmod[]
                                                 it_outtab        = gt_bkpf_disp ).

      l_alv_r1->set_gridtitle( EXPORTING i_gridtitle = 'BKPF' ).
      l_alv_r1->set_toolbar_interactive( ).
      flag_alv_r1 = 1.
    ELSE.
      ld_height_r1 = 10.
      l_alv_r1->set_table_for_first_display( EXPORTING
                                       is_layout = color_layout
                                       is_variant = gs_variant
                                       CHANGING
                                         it_fieldcatalog = t_fieldcat_bkpfmod[]
                                         it_outtab        = gt_bkpf_disp ).

      l_alv_r1->set_gridtitle( EXPORTING i_gridtitle = 'No Documents to be Displayed.' ).
      flag_alv_r1 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r2 = 1.
    CALL METHOD l_alv_r2->refresh_table_display.
  ELSE.
    IF ld_height_r2 IS NOT INITIAL.
      l_alv_r2->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bsegmod[]
                                                 it_outtab        = gt_bseg_disp ).

      l_alv_r2->set_gridtitle( EXPORTING i_gridtitle = 'BSEG' ).
      l_alv_r2->set_toolbar_interactive( ).
      flag_alv_r2 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r3 = 1.
    CALL METHOD l_alv_r3->refresh_table_display.
  ELSE.
    IF ld_height_r3 IS NOT INITIAL AND flag_alv_r3 NE 1.
      l_alv_r3->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_splinfomod[]
                                                 it_outtab        = gt_splinfo_disp ).

      l_alv_r3->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO' ).
      l_alv_r3->set_toolbar_interactive( ).
      flag_alv_r3 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r4 = 1.
    CALL METHOD l_alv_r4->refresh_table_display.
  ELSE.
    IF ld_height_r4 IS NOT INITIAL AND flag_alv_r4 NE 1.
      l_alv_r4->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_glu1modmod[]
                                                 it_outtab        = gt_glu1mod_disp ).

      IF acdoca_active = 0.
        l_alv_r4->set_gridtitle( EXPORTING i_gridtitle = 'GL' ).
      ELSE.
        l_alv_r4->set_gridtitle( EXPORTING i_gridtitle = 'ACDOCA' ).
      ENDIF.
      l_alv_r4->set_toolbar_interactive( ).
      flag_alv_r4 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r5 = 1.
    CALL METHOD l_alv_r5->refresh_table_display.
  ELSE.
    IF ld_height_r5 IS NOT INITIAL.

      l_alv_r5->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsismod[]
                                               it_outtab        = gt_bsis_disp ).

      l_alv_r5->set_gridtitle( EXPORTING i_gridtitle = 'BSIS' ).
      l_alv_r5->set_toolbar_interactive( ).
      flag_alv_r5 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r6 = 1.
    CALL METHOD l_alv_r6->refresh_table_display.
  ELSE.

    IF ld_height_r6 IS NOT INITIAL.
      l_alv_r6->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsasmod[]
                                               it_outtab        = gt_bsas_disp ).

      l_alv_r6->set_gridtitle( EXPORTING i_gridtitle = 'BSAS' ).
      l_alv_r6->set_toolbar_interactive( ).
      flag_alv_r6 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r7 = 1.
    CALL METHOD l_alv_r7->refresh_table_display.
  ELSE.
    IF ld_height_r7 IS NOT INITIAL.
      l_alv_r7->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsikmod[]
                                               it_outtab        = gt_bsik_disp ).

      l_alv_r7->set_gridtitle( EXPORTING i_gridtitle = 'BSIK' ).
      l_alv_r7->set_toolbar_interactive( ).
      flag_alv_r7 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r8 = 1.
    CALL METHOD l_alv_r8->refresh_table_display.
  ELSE.
    IF ld_height_r8 IS NOT INITIAL.
      l_alv_r8->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsakmod[]
                                               it_outtab        = gt_bsak_disp ).

      l_alv_r8->set_gridtitle( EXPORTING i_gridtitle = 'BSAK' ).
      l_alv_r8->set_toolbar_interactive( ).
      flag_alv_r8 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r9 = 1.
    CALL METHOD l_alv_r9->refresh_table_display.
  ELSE.
    IF ld_height_r9 IS NOT INITIAL.
      l_alv_r9->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsidmod[]
                                               it_outtab        = gt_bsid_disp ).

      l_alv_r9->set_gridtitle( EXPORTING i_gridtitle = 'BSID' ).
      l_alv_r9->set_toolbar_interactive( ).
      flag_alv_r9 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r10 = 1.
    CALL METHOD l_alv_r10->refresh_table_display.
  ELSE.

    IF ld_height_r10 IS NOT INITIAL.
      l_alv_r10->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsadmod[]
                                               it_outtab        = gt_bsad_disp ).

      l_alv_r10->set_gridtitle( EXPORTING i_gridtitle = 'BSAD' ).
      l_alv_r10->set_toolbar_interactive( ).
      flag_alv_r10 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r11 = 1.
    CALL METHOD l_alv_r11->refresh_table_display.
  ELSE.
    IF ld_height_r11 IS NOT INITIAL AND flag_alv_r11 NE 1.
      l_alv_r11->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_splinfo_valmod[]
                                             it_outtab        = gt_splinfo_val_disp ).

      l_alv_r11->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO_VAL' ).
      l_alv_r11->set_toolbar_interactive( ).
      flag_alv_r11 = 1.
    ENDIF.

  ENDIF.
  IF flag_alv_r12 = 1.
    CALL METHOD l_alv_r12->refresh_table_display.
  ELSE.
    IF ld_height_r12 IS NOT INITIAL.
      l_alv_r12->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsecmod[]
                                               it_outtab        = gt_bsec_disp ).

      l_alv_r12->set_gridtitle( EXPORTING i_gridtitle = 'BSEC' ).
      l_alv_r12->set_toolbar_interactive( ).
      flag_alv_r12 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r13 = 1.
    CALL METHOD l_alv_r13->refresh_table_display.
  ELSE.
    IF ld_height_r13 IS NOT INITIAL.
      l_alv_r13->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsedmod[]
                                               it_outtab        = gt_bsed_disp ).

      l_alv_r13->set_gridtitle( EXPORTING i_gridtitle = 'BSED' ).
      l_alv_r13->set_toolbar_interactive( ).
      flag_alv_r13 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r14 = 1.
    CALL METHOD l_alv_r14->refresh_table_display.
  ELSE.

    IF ld_height_r14 IS NOT INITIAL.
      l_alv_r14->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsetmod[]
                                             it_outtab        = gt_bset_disp ).

      l_alv_r14->set_gridtitle( EXPORTING i_gridtitle = 'BSET' ).
      l_alv_r14->set_toolbar_interactive( ).
      flag_alv_r14 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r15 = 1.
    CALL METHOD l_alv_r15->refresh_table_display.
  ELSE.
    IF ld_height_r15 IS NOT INITIAL.
      l_alv_r15->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bse_clrmod[]
                                             it_outtab        = gt_bse_clr_disp ).

      l_alv_r15->set_gridtitle( EXPORTING i_gridtitle = 'BSE_CLR' ).
      l_alv_r15->set_toolbar_interactive( ).
      flag_alv_r15 = 1.
    ENDIF.
  ENDIF.
  IF flag_alv_r16 = 1.
    CALL METHOD l_alv_r16->refresh_table_display.
  ELSE.
    IF ld_height_r16 IS NOT INITIAL.
      l_alv_r16->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bseg_addmod[]
                                             it_outtab        = gt_bseg_add_disp ).

      l_alv_r16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
      l_alv_r16->set_toolbar_interactive( ).
      flag_alv_r16 = 1.
    ENDIF.

  ENDIF.
  IF flag_alv_l2 = 1.
    CALL METHOD l_alv_l2->refresh_table_display.
    IF gt_flag_disp IS INITIAL.
      l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'No Inconsistency found' ).
    ELSE.
      l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'Result' ).
    ENDIF.
  ELSE.
    IF ld_height_r16 IS NOT INITIAL.
      l_alv_r16->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bseg_addmod[]
                                             it_outtab        = gt_bseg_add_disp ).

      l_alv_r16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
      l_alv_r16->set_toolbar_interactive( ).
      flag_alv_r16 = 1.
    ENDIF.
  ENDIF.

  IF save_flag IS NOT INITIAL.

    ld_height_o1 = 10.
    ld_height_o2 = 10.
    ld_height_o3 = 10.
    ld_height_o4 = 10.
    IF acdoca_active = 0.
      ld_height_o5 = 10.
      ld_height_o6 = 10.
      ld_height_o7 = 10.
      ld_height_o8 = 10.
      ld_height_o9 = 10.
      ld_height_o10 = 10.
    ELSE.
      ld_height_o5 = 0.
      ld_height_o6 = 0.
      ld_height_o7 = 0.
      ld_height_o8 = 0.
      ld_height_o9 = 0.
      ld_height_o10 = 0.
    ENDIF.
    ld_height_o11 = 10.
    ld_height_o12 = 10.
    ld_height_o13 = 10.
    ld_height_o14 = 10.
    ld_height_o15 = 10.
    ld_height_o16 = 10.

    IF p_dauto IS INITIAL.
      IF p_dbsgad IS INITIAL.
        ld_height_o16 = 0.
      ENDIF.

      IF p_dbsclr IS INITIAL.
        ld_height_o15 = 0.
      ENDIF.

      IF p_dbset IS INITIAL.
        ld_height_o14 = 0.
      ENDIF.

      IF p_dbsed IS INITIAL.
        ld_height_o13 = 0.
      ENDIF.

      IF p_dbsec IS INITIAL.
        ld_height_o12 = 0.
      ENDIF.

      IF p_dbkpf IS INITIAL.
        ld_height_o1 = 0.
      ENDIF.

      IF p_dbseg IS INITIAL.
        ld_height_o2 = 0.
      ENDIF.

      IF p_dgl IS INITIAL.
        ld_height_o4 = 0.
      ENDIF.

      IF p_dindex IS INITIAL.
        ld_height_o5 = 0.
        ld_height_o6 = 0.
        ld_height_o7 = 0.
        ld_height_o8 = 0.
        ld_height_o9 = 0.
        ld_height_o10 = 0.
      ENDIF.

      IF p_dsplit IS INITIAL.
        ld_height_o3 = 0.
        ld_height_o11 = 0.
      ENDIF.

    ENDIF.
    IF gt_bsec_disp IS INITIAL.
      ld_height_o12 = 0.
    ENDIF.

    IF gt_bsed_disp IS INITIAL.
      ld_height_o13 = 0.
    ENDIF.

    IF gt_bset_disp IS INITIAL.
      ld_height_o14 = 0.
    ENDIF.

    IF gt_bse_clr_disp IS INITIAL.
      ld_height_o15 = 0.
    ENDIF.

    IF gt_bseg_add_disp IS INITIAL.
      ld_height_o16 = 0.
    ENDIF.

    IF gt_splinfo_disp IS INITIAL.
      ld_height_o3 = 0.
    ENDIF.

    IF gt_splinfo_val_disp IS INITIAL.
      ld_height_o11 = 0.
    ENDIF.

    IF gt_bsis_disp IS INITIAL.
      ld_height_o5 = 0.
    ENDIF.

    IF gt_bsas_disp IS INITIAL.
      ld_height_o6 = 0.
    ENDIF.

    IF gt_bsik_disp IS INITIAL.
      ld_height_o7 = 0.
    ENDIF.

    IF gt_bsak_disp IS INITIAL.
      ld_height_o8 = 0.
    ENDIF.

    IF gt_bsid_disp IS INITIAL.
      ld_height_o9 = 0.
    ENDIF.

    IF gt_bsad_disp IS INITIAL.
      ld_height_o10 = 0.
    ENDIF.

    IF p_test IS INITIAL.
      l_splitter5->set_row_height( id = 1 height = 20 ).
    ELSE.
      l_splitter5->set_row_height( id = 1 height = 0 ).
    ENDIF.

    l_splitter3->set_row_height( id = 1 height = ld_height_o1 ).
    l_splitter3->set_row_height( id = 2 height = ld_height_o2 ).
    l_splitter3->set_row_height( id = 9 height = ld_height_o3 ).
    l_splitter3->set_row_height( id = 16 height = ld_height_o4 ).
    l_splitter3->set_row_height( id = 3 height = ld_height_o5 ).
    l_splitter3->set_row_height( id = 4 height = ld_height_o6 ).
    l_splitter3->set_row_height( id = 5 height = ld_height_o7 ).
    l_splitter3->set_row_height( id = 6 height = ld_height_o8 ).
    l_splitter3->set_row_height( id = 7 height = ld_height_o9 ).
    l_splitter3->set_row_height( id = 8 height = ld_height_o10 ).
    l_splitter3->set_row_height( id = 10 height = ld_height_o11 ).
    l_splitter3->set_row_height( id = 11 height = ld_height_o12 ).
    l_splitter3->set_row_height( id = 12 height = ld_height_o13 ).
    l_splitter3->set_row_height( id = 13 height = ld_height_o14 ).
    l_splitter3->set_row_height( id = 14 height = ld_height_o15 ).
    l_splitter3->set_row_height( id = 15 height = ld_height_o16 ).
    l_splitter5->set_row_height( id = 2 height = 80 ).

    IF flag_alv_end = 1.

      IF flag_alv_left = 1.
        CALL METHOD l_alv_left->refresh_table_display.
      ELSE.
        l_alv_left->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                           it_fieldcatalog = t_fieldcat_left[]
                                           it_outtab        = gt_doclist_store ).

        l_alv_left->set_gridtitle( EXPORTING i_gridtitle = 'Document List' ).
        flag_alv_left = 1.
*    l_alv_left->set_toolbar_interactive( ).
      ENDIF.
      IF flag_alv_o1 = 1.
        CALL METHOD l_alv_o1->refresh_table_display.
      ELSE.
        IF ld_height_r1 IS NOT INITIAL.
          l_alv_o1->set_table_for_first_display( EXPORTING
                                                   is_layout = color_layout
                                                   is_variant = gs_variant
                                                   CHANGING
                                                     it_fieldcatalog = t_fieldcat_bkpfmod[]
                                                     it_outtab        = gt_bkpf_disp ).

          l_alv_o1->set_gridtitle( EXPORTING i_gridtitle = 'BKPF' ).
          l_alv_o1->set_toolbar_interactive( ).
          flag_alv_o1 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o2 = 1.
        CALL METHOD l_alv_o2->refresh_table_display.
      ELSE.
        IF ld_height_r2 IS NOT INITIAL.
          l_alv_o2->set_table_for_first_display( EXPORTING
                                                   is_layout = color_layout
                                                   is_variant = gs_variant
                                                   CHANGING
                                                     it_fieldcatalog = t_fieldcat_bsegmod[]
                                                     it_outtab        = gt_bseg_disp ).

          l_alv_o2->set_gridtitle( EXPORTING i_gridtitle = 'BSEG' ).
          l_alv_o2->set_toolbar_interactive( ).
          flag_alv_o2 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o3 = 1.
        CALL METHOD l_alv_o3->refresh_table_display.
      ELSE.
        IF ld_height_r3 IS NOT INITIAL AND flag_alv_o3 NE 1.
          l_alv_o3->set_table_for_first_display( EXPORTING
                                                   is_layout = color_layout
                                                   is_variant = gs_variant
                                                   CHANGING
                                                     it_fieldcatalog = t_fieldcat_splinfomod[]
                                                     it_outtab        = gt_splinfo_disp ).

          l_alv_o3->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO' ).
          l_alv_o3->set_toolbar_interactive( ).
          flag_alv_o3 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o4 = 1.
        CALL METHOD l_alv_o4->refresh_table_display.
      ELSE.
        IF ld_height_r4 IS NOT INITIAL AND flag_alv_o4 NE 1.
          l_alv_o4->set_table_for_first_display( EXPORTING
                                                   is_layout = color_layout
                                                   is_variant = gs_variant
                                                   CHANGING
                                                     it_fieldcatalog = t_fieldcat_glu1modmod[]
                                                     it_outtab        = gt_glu1mod_disp ).

          IF acdoca_active = 0.
            l_alv_o4->set_gridtitle( EXPORTING i_gridtitle = 'GL' ).
          ELSE.
            l_alv_o4->set_gridtitle( EXPORTING i_gridtitle = 'ACDOCA' ).
          ENDIF.
          l_alv_o4->set_toolbar_interactive( ).
          flag_alv_o4 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o5 = 1.
        CALL METHOD l_alv_o5->refresh_table_display.
      ELSE.
        IF ld_height_r5 IS NOT INITIAL.

          l_alv_o5->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsismod[]
                                                   it_outtab        = gt_bsis_disp ).

          l_alv_o5->set_gridtitle( EXPORTING i_gridtitle = 'BSIS' ).
          l_alv_o5->set_toolbar_interactive( ).
          flag_alv_o5 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o6 = 1.
        CALL METHOD l_alv_o6->refresh_table_display.
      ELSE.

        IF ld_height_r6 IS NOT INITIAL.
          l_alv_o6->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsasmod[]
                                                   it_outtab        = gt_bsas_disp ).

          l_alv_o6->set_gridtitle( EXPORTING i_gridtitle = 'BSAS' ).
          l_alv_o6->set_toolbar_interactive( ).
          flag_alv_o6 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o7 = 1.
        CALL METHOD l_alv_o7->refresh_table_display.
      ELSE.
        IF ld_height_r7 IS NOT INITIAL.
          l_alv_o7->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsikmod[]
                                                   it_outtab        = gt_bsik_disp ).

          l_alv_o7->set_gridtitle( EXPORTING i_gridtitle = 'BSIK' ).
          l_alv_o7->set_toolbar_interactive( ).
          flag_alv_o7 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o8 = 1.
        CALL METHOD l_alv_o8->refresh_table_display.
      ELSE.
        IF ld_height_r8 IS NOT INITIAL.
          l_alv_o8->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsakmod[]
                                                   it_outtab        = gt_bsak_disp ).

          l_alv_o8->set_gridtitle( EXPORTING i_gridtitle = 'BSAK' ).
          l_alv_o8->set_toolbar_interactive( ).
          flag_alv_o8 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o9 = 1.
        CALL METHOD l_alv_o9->refresh_table_display.
      ELSE.
        IF ld_height_r9 IS NOT INITIAL.
          l_alv_o9->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsidmod[]
                                                   it_outtab        = gt_bsid_disp ).

          l_alv_o9->set_gridtitle( EXPORTING i_gridtitle = 'BSID' ).
          l_alv_o9->set_toolbar_interactive( ).
          flag_alv_o9 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o10 = 1.
        CALL METHOD l_alv_o10->refresh_table_display.
      ELSE.

        IF ld_height_r10 IS NOT INITIAL.
          l_alv_o10->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsadmod[]
                                                   it_outtab        = gt_bsad_disp ).

          l_alv_o10->set_gridtitle( EXPORTING i_gridtitle = 'BSAD' ).
          l_alv_o10->set_toolbar_interactive( ).
          flag_alv_o10 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o11 = 1.
        CALL METHOD l_alv_o11->refresh_table_display.
      ELSE.
        IF ld_height_r11 IS NOT INITIAL AND flag_alv_o11 NE 1.
          l_alv_o11->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_splinfo_valmod[]
                                                 it_outtab        = gt_splinfo_val_disp ).

          l_alv_o11->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO_VAL' ).
          l_alv_o11->set_toolbar_interactive( ).
          flag_alv_o11 = 1.
        ENDIF.

      ENDIF.
      IF flag_alv_o12 = 1.
        CALL METHOD l_alv_o12->refresh_table_display.
      ELSE.
        IF ld_height_r12 IS NOT INITIAL.
          l_alv_o12->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsecmod[]
                                                   it_outtab        = gt_bsec_disp ).

          l_alv_o12->set_gridtitle( EXPORTING i_gridtitle = 'BSEC' ).
          l_alv_o12->set_toolbar_interactive( ).
          flag_alv_o12 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o13 = 1.
        CALL METHOD l_alv_o13->refresh_table_display.
      ELSE.
        IF ld_height_r13 IS NOT INITIAL.
          l_alv_o13->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bsedmod[]
                                                   it_outtab        = gt_bsed_disp ).

          l_alv_o13->set_gridtitle( EXPORTING i_gridtitle = 'BSED' ).
          l_alv_o13->set_toolbar_interactive( ).
          flag_alv_o13 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o14 = 1.
        CALL METHOD l_alv_o14->refresh_table_display.
      ELSE.

        IF ld_height_r14 IS NOT INITIAL.
          l_alv_o14->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bsetmod[]
                                                 it_outtab        = gt_bset_disp ).

          l_alv_o14->set_gridtitle( EXPORTING i_gridtitle = 'BSET' ).
          l_alv_o14->set_toolbar_interactive( ).
          flag_alv_o14 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o15 = 1.
        CALL METHOD l_alv_o15->refresh_table_display.
      ELSE.
        IF ld_height_r15 IS NOT INITIAL.
          l_alv_o15->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bse_clrmod[]
                                                 it_outtab        = gt_bse_clr_disp ).

          l_alv_o15->set_gridtitle( EXPORTING i_gridtitle = 'BSE_CLR' ).
          l_alv_o15->set_toolbar_interactive( ).
          flag_alv_o15 = 1.
        ENDIF.
      ENDIF.
      IF flag_alv_o16 = 1.
        CALL METHOD l_alv_o16->refresh_table_display.
      ELSE.
        IF ld_height_r16 IS NOT INITIAL.
          l_alv_o16->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bseg_addmod[]
                                                 it_outtab        = gt_bseg_add_disp ).

          l_alv_o16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
          l_alv_o16->set_toolbar_interactive( ).
          flag_alv_o16 = 1.
        ENDIF.

      ENDIF.
      IF flag_alv_l2 = 1.
        CALL METHOD l_alv_l2->refresh_table_display.
        IF gt_flag_disp IS INITIAL.
          l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'No Inconsistency found' ).
        ELSE.
          l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'Result' ).
        ENDIF.
      ELSE.
        IF ld_height_r16 IS NOT INITIAL.
          l_alv_o16->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bseg_addmod[]
                                                 it_outtab        = gt_bseg_add_disp ).

          l_alv_o16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
          l_alv_o16->set_toolbar_interactive( ).
          flag_alv_o16 = 1.
        ENDIF.
      ENDIF.

      IF flag_alv_o17 = 1.
        CALL METHOD l_alv_o17->refresh_table_display.
      ELSE.
        l_alv_o17->set_table_for_first_display( EXPORTING
                                   is_layout = color_layout
                                   is_variant = gs_variant
                                   CHANGING
                                     it_fieldcatalog = t_fieldcat_protocol[]
                                     it_outtab        = gt_protocol_store ).

        l_alv_o17->set_gridtitle( EXPORTING i_gridtitle = 'LOG' ).
        l_alv_o17->set_toolbar_interactive( ).

      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    "select_belnr

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA_END
*&---------------------------------------------------------------------*
FORM display_data_end USING ls_bkpfmod LIKE bkpfmoddisp.

  DATA:
    ld_row            TYPE i,
    ls_bkpfmod2       LIKE bkpfmoddisp,
    ls_bsegmod        LIKE bsegmoddisp,
    ls_bsismod        LIKE bsismoddisp,
    ls_bsasmod        LIKE bsasmoddisp,
    ls_bsikmod        LIKE bsikmoddisp,
    ls_bsakmod        LIKE bsakmoddisp,
    ls_bsidmod        LIKE bsidmoddisp,
    ls_bsadmod        LIKE bsadmoddisp,
    ls_bseg_addmod    LIKE bseg_addmoddisp,
    ls_bse_clrmod     LIKE bse_clrmoddisp,
    ls_bsecmod        LIKE bsecmoddisp,
    ls_bsetmod        LIKE bsetmoddisp,
    ls_bsedmod        LIKE bsedmoddisp,
    ls_glu1modisp     LIKE glu1moddisp,
    ls_splinfomod     LIKE splinfomoddisp,
    ls_splinfo_valmod LIKE splinfovalmoddisp,
    ls_protocol       LIKE LINE OF gt_protocol,
    ld_ok             TYPE c LENGTH 1.

  flag_alv_end = 1.
  ld_ok = 'X'.

  LOOP AT gt_protocol_store INTO ls_protocol.
    IF ls_protocol-type = '@5C@'.
      ld_ok = ' '.
    ENDIF.
  ENDLOOP.

  IF update_flag = 'X'.
    IF ld_ok = ' '.
      ROLLBACK WORK.
    ELSE.
      COMMIT WORK.
    ENDIF.
  ENDIF.

  IF log_read IS INITIAL.
    PERFORM save_protocol.
  ENDIF.

  CLEAR gt_bkpf_disp.
  LOOP AT gt_bkpf_store INTO ls_bkpfmod2
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bkpfmod2-rowcolor = ' '.
    IF ls_bkpfmod2-check = 'X'
      OR ls_bkpfmod2-check = 'E'.
      IF ld_ok = 'X'.
        ls_bkpfmod2-control = '@5B@'.
      ENDIF.
      APPEND ls_bkpfmod2 TO gt_bkpf_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_bseg_disp.
  LOOP AT gt_bseg_store INTO ls_bsegmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bsegmod-rowcolor = ' '.
    IF ls_bsegmod-check = 'X'
      OR ls_bsegmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bsegmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bsegmod TO gt_bseg_disp.
    ENDIF.
  ENDLOOP.

  IF acdoca_active = 0.

    CLEAR gt_bsis_disp.
    LOOP AT gt_bsis_store INTO ls_bsismod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsismod-rowcolor = ' '.
      IF ls_bsismod-check = 'X'
        OR ls_bsismod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsismod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsismod TO gt_bsis_disp.
      ENDIF.
    ENDLOOP.

    CLEAR gt_bsas_disp.
    LOOP AT gt_bsas_store INTO ls_bsasmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsasmod-rowcolor = ' '.
      IF ls_bsasmod-check = 'X'
        OR ls_bsasmod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsasmod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsasmod TO gt_bsas_disp.
      ENDIF.
    ENDLOOP.

    CLEAR gt_bsik_disp.
    LOOP AT gt_bsik_store INTO ls_bsikmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsikmod-rowcolor = ' '.
      IF ls_bsikmod-check = 'X'
        OR ls_bsikmod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsikmod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsikmod TO gt_bsik_disp.
      ENDIF.
    ENDLOOP.

    CLEAR gt_bsak_disp.
    LOOP AT gt_bsak_store INTO ls_bsakmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsakmod-rowcolor = ' '.
      IF ls_bsakmod-check = 'X'
        OR ls_bsakmod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsakmod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsakmod TO gt_bsak_disp.
      ENDIF.
    ENDLOOP.

    CLEAR gt_bsid_disp.
    LOOP AT gt_bsid_store INTO ls_bsidmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsidmod-rowcolor = ' '.
      IF ls_bsidmod-check = 'X'
        OR ls_bsidmod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsidmod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsidmod TO gt_bsid_disp.
      ENDIF.
    ENDLOOP.

    CLEAR gt_bsad_disp.
    LOOP AT gt_bsad_store INTO ls_bsadmod
      WHERE bukrs = ls_bkpfmod-bukrs
      AND belnr = ls_bkpfmod-belnr
      AND gjahr = ls_bkpfmod-gjahr.
      ls_bsadmod-rowcolor = ' '.
      IF ls_bsadmod-check = 'X'
        OR ls_bsadmod-check = 'E'.
        IF ld_ok = 'X'.
          ls_bsadmod-control = '@5B@'.
        ENDIF.
        APPEND ls_bsadmod TO gt_bsad_disp.
      ENDIF.
    ENDLOOP.

  ENDIF.

  CLEAR gt_bseg_add_disp.
  LOOP AT gt_bseg_add_store INTO ls_bseg_addmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bseg_addmod-rowcolor = ' '.
    IF ls_bseg_addmod-check = 'X'
      OR ls_bseg_addmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bseg_addmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bseg_addmod TO gt_bseg_add_disp.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bse_clr_store INTO ls_bse_clrmod
    WHERE bukrs_clr = ls_bkpfmod-bukrs
    AND belnr_clr = ls_bkpfmod-belnr
    AND gjahr_clr = ls_bkpfmod-gjahr.
    ls_bse_clrmod-rowcolor = ' '.
    IF ls_bse_clrmod-check = 'X'
      OR ls_bse_clrmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bse_clrmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bse_clrmod TO gt_bse_clr_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_bsec_disp.
  LOOP AT gt_bsec_store INTO ls_bsecmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bsecmod-rowcolor = ' '.
    IF ls_bsecmod-check = 'X'
      OR ls_bsecmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bsecmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bsecmod TO gt_bsec_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_bsed_disp.
  LOOP AT gt_bsed_store INTO ls_bsedmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bsedmod-rowcolor = ' '.
    IF ls_bsedmod-check = 'X'
      OR ls_bsedmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bsedmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bsedmod TO gt_bsed_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_bset_disp.
  LOOP AT gt_bset_store INTO ls_bsetmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_bsetmod-rowcolor = ' '.
    IF ls_bsetmod-check = 'X'
      OR ls_bsetmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_bsetmod-control = '@5B@'.
      ENDIF.
      APPEND ls_bsetmod TO gt_bset_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_glu1mod_disp.
  LOOP AT gt_glu1_store INTO ls_glu1modisp
    WHERE rbukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND ryear = ls_bkpfmod-gjahr.
    ls_glu1modisp-rowcolor = ' '.
    IF ls_glu1modisp-check = 'X'
      OR ls_glu1modisp-check = 'E'.
      IF ld_ok = 'X'.
        ls_glu1modisp-control = '@5B@'.
      ENDIF.
      APPEND ls_glu1modisp TO gt_glu1mod_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_splinfo_disp.
  LOOP AT gt_splinfo_store INTO ls_splinfomod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_splinfomod-rowcolor = ' '.
    IF ls_splinfomod-check = 'X'
      OR ls_splinfomod-check = 'E'.
      IF ld_ok = 'X'.
        ls_splinfomod-control = '@5B@'.
      ENDIF.
      APPEND ls_splinfomod TO gt_splinfo_disp.
    ENDIF.
  ENDLOOP.

  CLEAR gt_splinfo_val_disp.
  LOOP AT gt_splinfo_val_store INTO ls_splinfo_valmod
    WHERE bukrs = ls_bkpfmod-bukrs
    AND belnr = ls_bkpfmod-belnr
    AND gjahr = ls_bkpfmod-gjahr.
    ls_splinfo_valmod-rowcolor = ' '.
    IF ls_splinfo_valmod-check = 'X'
      OR ls_splinfo_valmod-check = 'E'.
      IF ld_ok = 'X'.
        ls_splinfo_valmod-control = '@5B@'.
      ENDIF.
      APPEND ls_splinfo_valmod TO gt_splinfo_val_disp.
    ENDIF.
  ENDLOOP.

  IF flag_alv_tool NE 1.
    gs_variant-report = sy-repid.
    gs_variant-username = sy-uname.

*  color_layout-info_fname = 'ROWCOLOR'.
*  color_layout-stylefname = 'STYLE'.

    PERFORM build_fieldcat.

    o_tool->set_registered_events( events = it_events ).

    o_tool->add_button( fcode = 'BKPF'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BKPF'
                        quickinfo = 'BKPF'
                        is_checked = abap_false
                        is_disabled = abap_false ).

    o_tool->add_button( fcode = 'BSEG'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSEG'
                      quickinfo = 'BSEG'
                      is_checked = abap_false
                      is_disabled = abap_false ).

    IF acdoca_active = 0.
      o_tool->add_button( fcode = 'BSIS'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSIS'
                      quickinfo = 'BSIS'
                      is_checked = abap_false
                      is_disabled = abap_false ).

      o_tool->add_button( fcode = 'BSAS'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAS'
                        quickinfo = 'BSAS'
                        is_checked = abap_false
                        is_disabled = abap_false ).

      o_tool->add_button( fcode = 'BSIK'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSIK'
                      quickinfo = 'BSIK'
                      is_checked = abap_false
                      is_disabled = abap_false ).

      o_tool->add_button( fcode = 'BSAK'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAK'
                        quickinfo = 'BSAK'
                        is_checked = abap_false
                        is_disabled = abap_false ).

      o_tool->add_button( fcode = 'BSID'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSID'
                      quickinfo = 'BSID'
                      is_checked = abap_false
                      is_disabled = abap_false ).

      o_tool->add_button( fcode = 'BSAD'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'BSAD'
                        quickinfo = 'BSAD'
                        is_checked = abap_false
                        is_disabled = abap_false ).
    ENDIF.

    o_tool->add_button( fcode = 'BSEC'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSEC'
                    quickinfo = 'BSEC'
                    is_checked = abap_false
                    is_disabled = abap_false ).

    o_tool->add_button( fcode = 'BSED'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSED'
                      quickinfo = 'BSED'
                      is_checked = abap_false
                      is_disabled = abap_false ).

    o_tool->add_button( fcode = 'BSET'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSET'
                    quickinfo = 'BSET'
                    is_checked = abap_false
                    is_disabled = abap_false ).

    o_tool->add_button( fcode = 'BSE_CLR'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'BSE_CLR'
                      quickinfo = 'BSE_CLR'
                      is_checked = abap_false
                      is_disabled = abap_false ).

    o_tool->add_button( fcode = 'BSEG_ADD'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'BSEG_ADD'
                    quickinfo = 'BSEG_ADD'
                    is_checked = abap_false
                    is_disabled = abap_false ).

    o_tool->add_button( fcode = 'SPLINFO'
                      icon = icon_active_inactive
                      butn_type = '0'
                      text = 'SPLINFO'
                      quickinfo = 'SPLINFO'
                      is_checked = abap_false
                      is_disabled = abap_false ).

    o_tool->add_button( fcode = 'SPLINFO_VAL'
                    icon = icon_active_inactive
                    butn_type = '0'
                    text = 'SPLINFO_VAL'
                    quickinfo = 'SPLINFO_VAL'
                    is_checked = abap_false
                    is_disabled = abap_false ).

    IF acdoca_active = 0.
      o_tool->add_button( fcode = 'G/L'
                        icon = icon_active_inactive
                        butn_type = '0'
                        text = 'G/L'
                        quickinfo = 'G/L'
                        is_checked = abap_false
                        is_disabled = abap_false ).
    ELSE.
      o_tool->add_button( fcode = 'G/L'
                   icon = icon_active_inactive
                   butn_type = '0'
                   text = 'ACDOCA'
                   quickinfo = 'ACDOCA'
                   is_checked = abap_false
                   is_disabled = abap_false ).
    ENDIF.
    flag_alv_tool = 1.
  ENDIF.

*  cl_abap_list_layout=>suppress_toolbar( ).

  SET HANDLER lcl_eventhandler=>on_function_selected FOR o_tool.

  flag_store = 1.

  IF flag_alv_tool = 1.

    ld_height_o1 = 10.
    ld_height_o2 = 10.
    ld_height_o3 = 10.
    ld_height_o4 = 10.
    IF acdoca_active = 0.
      ld_height_o5 = 10.
      ld_height_o6 = 10.
      ld_height_o7 = 10.
      ld_height_o8 = 10.
      ld_height_o9 = 10.
      ld_height_o10 = 10.
    ELSE.
      ld_height_o5 = 0.
      ld_height_o6 = 0.
      ld_height_o7 = 0.
      ld_height_o8 = 0.
      ld_height_o9 = 0.
      ld_height_o10 = 0.
    ENDIF.
    ld_height_o11 = 10.
    ld_height_o12 = 10.
    ld_height_o13 = 10.
    ld_height_o14 = 10.
    ld_height_o15 = 10.
    ld_height_o16 = 10.

    IF p_dauto IS INITIAL.
      IF p_dbsgad IS INITIAL.
        ld_height_o16 = 0.
      ENDIF.

      IF p_dbsclr IS INITIAL.
        ld_height_o15 = 0.
      ENDIF.

      IF p_dbset IS INITIAL.
        ld_height_o14 = 0.
      ENDIF.

      IF p_dbsed IS INITIAL.
        ld_height_o13 = 0.
      ENDIF.

      IF p_dbsec IS INITIAL.
        ld_height_o12 = 0.
      ENDIF.

      IF p_dbkpf IS INITIAL.
        ld_height_o1 = 0.
      ENDIF.

      IF p_dbseg IS INITIAL.
        ld_height_o2 = 0.
      ENDIF.

      IF p_dgl IS INITIAL.
        ld_height_o4 = 0.
      ENDIF.

      IF p_dindex IS INITIAL.
        ld_height_o5 = 0.
        ld_height_o6 = 0.
        ld_height_o7 = 0.
        ld_height_o8 = 0.
        ld_height_o9 = 0.
        ld_height_o10 = 0.
      ENDIF.

      IF p_dsplit IS INITIAL.
        ld_height_o3 = 0.
        ld_height_o11 = 0.
      ENDIF.
    ENDIF.

    IF gt_splinfo_disp IS INITIAL.
      ld_height_o3 = 0.
    ENDIF.

    IF gt_bsis_disp IS INITIAL.
      ld_height_o5 = 0.
    ENDIF.

    IF gt_bsas_disp IS INITIAL.
      ld_height_o6 = 0.
    ENDIF.

    IF gt_bsik_disp IS INITIAL.
      ld_height_o7 = 0.
    ENDIF.

    IF gt_bsak_disp IS INITIAL.
      ld_height_o8 = 0.
    ENDIF.

    IF gt_bsid_disp IS INITIAL.
      ld_height_o9 = 0.
    ENDIF.

    IF gt_bsad_disp IS INITIAL.
      ld_height_o10 = 0.
    ENDIF.

    IF gt_splinfo_val_disp IS INITIAL.
      ld_height_o11 = 0.
    ENDIF.

    IF gt_bsec_disp IS INITIAL.
      ld_height_o12 = 0.
    ENDIF.

    IF gt_bsed_disp IS INITIAL.
      ld_height_o13 = 0.
    ENDIF.

    IF gt_bset_disp IS INITIAL.
      ld_height_o14 = 0.
    ENDIF.

    IF gt_bse_clr_disp IS INITIAL.
      ld_height_o15 = 0.
    ENDIF.

    IF gt_bseg_add_disp IS INITIAL.
      ld_height_o16 = 0.
    ENDIF.


    l_splitter->set_column_width( id = 1 width = 12 ).
    l_splitter->set_column_width( id = 2 width = 0 ).
    l_splitter->set_column_width( id = 3 width = 90 ).

    l_splitter3->set_row_height( id = 1 height = ld_height_o1 ).
    l_splitter3->set_row_height( id = 2 height = ld_height_o2 ).
    l_splitter3->set_row_height( id = 9 height = ld_height_o3 ).
    l_splitter3->set_row_height( id = 16 height = ld_height_o4 ).
    l_splitter3->set_row_height( id = 3 height = ld_height_o5 ).
    l_splitter3->set_row_height( id = 4 height = ld_height_o6 ).
    l_splitter3->set_row_height( id = 5 height = ld_height_o7 ).
    l_splitter3->set_row_height( id = 6 height = ld_height_o8 ).
    l_splitter3->set_row_height( id = 7 height = ld_height_o9 ).
    l_splitter3->set_row_height( id = 8 height = ld_height_o10 ).
    l_splitter3->set_row_height( id = 10 height = ld_height_o11 ).
    l_splitter3->set_row_height( id = 11 height = ld_height_o12 ).
    l_splitter3->set_row_height( id = 12 height = ld_height_o13 ).
    l_splitter3->set_row_height( id = 13 height = ld_height_o14 ).
    l_splitter3->set_row_height( id = 14 height = ld_height_o15 ).
    l_splitter3->set_row_height( id = 15 height = ld_height_o16 ).
    l_splitter5->set_row_height( id = 2 height = 80 ).

    l_splitter5->set_row_height( id = 1 height = 20 ).

    PERFORM select_belnr USING ls_bkpfmod.

    IF flag_alv_left IS NOT INITIAL.
      l_alv_left->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               is_variant = gs_variant
                                               CHANGING
                                               it_fieldcatalog = t_fieldcat_left[]
                                               it_outtab        = gt_doclist_store ).

      l_alv_left->set_gridtitle( EXPORTING i_gridtitle = 'Document List' ).
    ENDIF.

    IF flag_alv_l2 IS INITIAL AND flag_alv_r12 IS INITIAL.
      l_alv_l2->set_table_for_first_display( EXPORTING
                                       is_layout = color_layout
                                       is_variant = gs_variant
                                       CHANGING
                                         it_fieldcatalog = t_fieldcat_flags_disp[]
                                         it_outtab        = gt_flag_disp ).

      IF gt_flag_disp IS INITIAL.
        l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'No Inconsistency found' ).
      ELSE.
        l_alv_l2->set_gridtitle( EXPORTING i_gridtitle = 'Result' ).
      ENDIF.
      l_alv_l2->set_toolbar_interactive( ).
      flag_alv_l2 = 1.
    ENDIF.


    IF ld_height_o1 IS NOT INITIAL.
      l_alv_o1->set_table_for_first_display( EXPORTING
                                                 is_layout = color_layout
                                                 i_save = 'A'
                                                 is_variant = gs_variant
                                                 CHANGING
                                                   it_fieldcatalog = t_fieldcat_bkpfmod_out[]
                                                   it_outtab        = gt_bkpf_disp ).

      l_alv_o1->set_gridtitle( EXPORTING i_gridtitle = 'BKPF' ).
      l_alv_o1->set_toolbar_interactive( ).
      flag_alv_o1 = 1.
    ENDIF.

    IF ld_height_o2 IS NOT INITIAL.
      l_alv_o2->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               i_save = 'A'
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_bsegmod_out[]
                                                 it_outtab        = gt_bseg_disp ).

      l_alv_o2->set_gridtitle( EXPORTING i_gridtitle = 'BSEG' ).
      l_alv_o2->set_toolbar_interactive( ).
      flag_alv_o2 = 1.
    ENDIF.

    IF ld_height_o3 IS NOT INITIAL.
      l_alv_o3->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               i_save = 'A'
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_splinfomod_out[]
                                                 it_outtab        = gt_splinfo_disp ).

      l_alv_o3->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO' ).
      l_alv_o3->set_toolbar_interactive( ).
      flag_alv_o3 = 1.
    ENDIF.

    IF ld_height_o4 IS NOT INITIAL.
      l_alv_o4->set_table_for_first_display( EXPORTING
                                               is_layout = color_layout
                                               i_save = 'A'
                                               is_variant = gs_variant
                                               CHANGING
                                                 it_fieldcatalog = t_fieldcat_glu1modmod_out[]
                                                 it_outtab        = gt_glu1mod_disp ).

      IF acdoca_active = 0.
        l_alv_o4->set_gridtitle( EXPORTING i_gridtitle = 'GL' ).
      ELSE.
        l_alv_o4->set_gridtitle( EXPORTING i_gridtitle = 'ACDOCA' ).
      ENDIF.
      l_alv_o4->set_toolbar_interactive( ).
      flag_alv_o4 = 1.
    ENDIF.

    IF ld_height_o5 IS NOT INITIAL.
      l_alv_o5->set_table_for_first_display( EXPORTING
                                           is_layout = color_layout
                                           is_variant = gs_variant
                                           CHANGING
                                             it_fieldcatalog = t_fieldcat_bsismod_out[]
                                             it_outtab        = gt_bsis_disp ).

      l_alv_o5->set_gridtitle( EXPORTING i_gridtitle = 'BSIS' ).
      l_alv_o5->set_toolbar_interactive( ).
      flag_alv_o5 = 1.
    ENDIF.

    IF ld_height_o6 IS NOT INITIAL.
      l_alv_o6->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsasmod_out[]
                                               it_outtab        = gt_bsas_disp ).

      l_alv_o6->set_gridtitle( EXPORTING i_gridtitle = 'BSAS' ).
      l_alv_o6->set_toolbar_interactive( ).
      flag_alv_o6 = 1.
    ENDIF.

    IF ld_height_o7 IS NOT INITIAL.
      l_alv_o7->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsikmod_out[]
                                               it_outtab        = gt_bsik_disp ).

      l_alv_o7->set_gridtitle( EXPORTING i_gridtitle = 'BSIK' ).
      l_alv_o7->set_toolbar_interactive( ).
      flag_alv_o7 = 1.
    ENDIF.

    IF ld_height_o8 IS NOT INITIAL.
      l_alv_o8->set_table_for_first_display( EXPORTING
                                            is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsakmod_out[]
                                               it_outtab        = gt_bsak_disp ).

      l_alv_o8->set_gridtitle( EXPORTING i_gridtitle = 'BSAK' ).
      l_alv_o8->set_toolbar_interactive( ).
      flag_alv_o8 = 1.
    ENDIF.

    IF ld_height_o9 IS NOT INITIAL.
      l_alv_o9->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsidmod_out[]
                                               it_outtab        = gt_bsid_disp ).

      l_alv_o9->set_gridtitle( EXPORTING i_gridtitle = 'BSID' ).
      l_alv_o9->set_toolbar_interactive( ).
      flag_alv_o9 = 1.
    ENDIF.

    IF ld_height_o10 IS NOT INITIAL.
      l_alv_o10->set_table_for_first_display( EXPORTING
                                             is_layout = color_layout
                                             is_variant = gs_variant
                                             CHANGING
                                               it_fieldcatalog = t_fieldcat_bsadmod_out[]
                                               it_outtab        = gt_bsad_disp ).

      l_alv_o10->set_gridtitle( EXPORTING i_gridtitle = 'BSAD' ).
      l_alv_o10->set_toolbar_interactive( ).
      flag_alv_o10 = 1.
    ENDIF.

    IF ld_height_o11 IS NOT INITIAL.
      l_alv_o11->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_splinfo_valmod_out[]
                                           it_outtab        = gt_splinfo_val_disp ).

      l_alv_o11->set_gridtitle( EXPORTING i_gridtitle = 'SPLINFO_VAL' ).
      l_alv_o11->set_toolbar_interactive( ).
      flag_alv_o11 = 1.
    ENDIF.

    IF ld_height_o12 IS NOT INITIAL.
      l_alv_o12->set_table_for_first_display( EXPORTING
                                         is_layout = color_layout
                                         is_variant = gs_variant
                                         CHANGING
                                           it_fieldcatalog = t_fieldcat_bsecmod_out[]
                                           it_outtab        = gt_bsec_disp ).

      l_alv_o12->set_gridtitle( EXPORTING i_gridtitle = 'BSEC' ).
      l_alv_o12->set_toolbar_interactive( ).
      flag_alv_o12 = 1.
    ENDIF.

    IF ld_height_o13 IS NOT INITIAL.
      l_alv_o13->set_table_for_first_display( EXPORTING
                                     is_layout = color_layout
                                     is_variant = gs_variant
                                     CHANGING
                                       it_fieldcatalog = t_fieldcat_bsedmod_out[]
                                       it_outtab        = gt_bsed_disp ).

      l_alv_o13->set_gridtitle( EXPORTING i_gridtitle = 'BSED' ).
      l_alv_o13->set_toolbar_interactive( ).
      flag_alv_o13 = 1.
    ENDIF.

    IF ld_height_o14 IS NOT INITIAL.
      l_alv_o14->set_table_for_first_display( EXPORTING
                                     is_layout = color_layout
                                     is_variant = gs_variant
                                     CHANGING
                                       it_fieldcatalog = t_fieldcat_bsetmod_out[]
                                       it_outtab        = gt_bset_disp ).

      l_alv_o14->set_gridtitle( EXPORTING i_gridtitle = 'BSET' ).
      l_alv_o14->set_toolbar_interactive( ).
      flag_alv_o14 = 1.
    ENDIF.

    IF ld_height_o15 IS NOT INITIAL.
      l_alv_o15->set_table_for_first_display( EXPORTING
                                     is_layout = color_layout
                                     is_variant = gs_variant
                                     CHANGING
                                       it_fieldcatalog = t_fieldcat_bse_clrmod_out[]
                                       it_outtab        = gt_bse_clr_disp ).

      l_alv_o15->set_gridtitle( EXPORTING i_gridtitle = 'BSE_CLR' ).
      l_alv_o15->set_toolbar_interactive( ).
      flag_alv_o15 = 1.
    ENDIF.

    IF ld_height_o16 IS NOT INITIAL.
      l_alv_o16->set_table_for_first_display( EXPORTING
                                     is_layout = color_layout
                                     is_variant = gs_variant
                                     CHANGING
                                       it_fieldcatalog = t_fieldcat_bseg_addmod_out[]
                                       it_outtab        = gt_bseg_add_disp ).

      l_alv_o16->set_gridtitle( EXPORTING i_gridtitle = 'BSEG_ADD' ).
      l_alv_o16->set_toolbar_interactive( ).
      flag_alv_o16 = 1.
    ENDIF.

    l_alv_o17->set_table_for_first_display( EXPORTING
                               is_layout = color_layout
                               is_variant = gs_variant
                               CHANGING
                                 it_fieldcatalog = t_fieldcat_protocol[]
                                 it_outtab        = gt_protocol_store ).

    l_alv_o17->set_gridtitle( EXPORTING i_gridtitle = 'LOG' ).
    l_alv_o17->set_toolbar_interactive( ).
    flag_alv_o17 = 1.

    WRITE space.
  ENDIF.
ENDFORM.                    "display_data_end

*&---------------------------------------------------------------------*
*&      Form  save_protocol
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM save_protocol.
  DATA ld_char32 TYPE guid_32.
  DATA ls_doclist LIKE LINE OF gt_doclist_store.
  DATA ls_doclist_store LIKE LINE OF gt_doclist_store.
  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA ls_bkpf_store LIKE LINE OF gt_bkpf_store.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_glu1_store LIKE LINE OF gt_glu1_store.
  DATA save_test TYPE c LENGTH 1.

  IF log_read IS INITIAL.

    IF update_flag = 'X'.
      save_test = ' '.
    ELSE.
      save_test = 'X'.
    ENDIF.

    CALL FUNCTION 'GUID_CREATE'
      IMPORTING
        ev_guid_16 = log_guid.

    CLEAR ltx_prot_data.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BKPF'
          et_data       = gt_bkpf_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bkpf_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BKPF'
          et_data       = gt_bkpf_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bkpf_store. REFRESH gt_bkpf_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEG'
          et_data       = gt_bseg_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bseg_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEG'
          et_data       = gt_bseg_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bseg_store. REFRESH gt_bseg_store.
    ENDIF.

    IF acdoca_active = 0.
      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSIS'
            et_data       = gt_bsis_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsis_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSIS'
            et_data       = gt_bsis_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsis_store. REFRESH gt_bsis_store.
      ENDIF.

      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAS'
            et_data       = gt_bsas_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsas_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAS'
            et_data       = gt_bsas_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsas_store. REFRESH gt_bsas_store.
      ENDIF.

      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSID'
            et_data       = gt_bsid_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsas_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSID'
            et_data       = gt_bsid_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsid_store. REFRESH gt_bsid_store.
      ENDIF.

      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAD'
            et_data       = gt_bsad_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsad_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAD'
            et_data       = gt_bsad_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsad_store. REFRESH gt_bsad_store.
      ENDIF.

      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSIK'
            et_data       = gt_bsik_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsik_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSIK'
            et_data       = gt_bsik_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsik_store. REFRESH gt_bsik_store.
      ENDIF.

      IF gd_rfdt IS INITIAL.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAK'
            et_data       = gt_bsak_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
      ELSE.
        IMPORT gt_bsik_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
        CALL METHOD cl_fagl_prot_services=>add_table_data
          EXPORTING
            ed_name       = 'BSAK'
            et_data       = gt_bsik_store[]
          CHANGING
            ctx_prot_data = ltx_prot_data.
        CLEAR gt_bsik_store. REFRESH gt_bsik_store.
      ENDIF.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEC'
          et_data       = gt_bsec_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bsec_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEC'
          et_data       = gt_bsec_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bsec_store. REFRESH gt_bsec_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSED'
          et_data       = gt_bsed_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bsed_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSED'
          et_data       = gt_bsed_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bsed_store. REFRESH gt_bsed_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSET'
          et_data       = gt_bset_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bset_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSET'
          et_data       = gt_bset_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bset_store. REFRESH gt_bset_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEG_ADD'
          et_data       = gt_bseg_add_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bseg_add_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSEG_ADD'
          et_data       = gt_bseg_add_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bseg_add_store. REFRESH gt_bseg_add_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSE_CLR'
          et_data       = gt_bse_clr_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_bse_clr_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'BSE_CLR'
          et_data       = gt_bse_clr_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_bse_clr_store. REFRESH gt_bse_clr_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'GLU1'
          et_data       = gt_glu1_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_glu1_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'GLU1'
          et_data       = gt_glu1_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_glu1_store. REFRESH gt_glu1_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'SPLINFO'
          et_data       = gt_splinfo_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_splinfo_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'SPLINFO'
          et_data       = gt_splinfo_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_splinfo_store. REFRESH gt_splinfo_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'SPLINFO_VAL'
          et_data       = gt_splinfo_val_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_splinfo_val_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'SPLINFO_VAL'
          et_data       = gt_splinfo_val_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_splinfo_val_store. REFRESH gt_splinfo_val_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'DOCLIST'
          et_data       = gt_doclist_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_doclist_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'DOCLIST'
          et_data       = gt_doclist_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_doclist_store. REFRESH gt_doclist_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'PROTOCOL'
          et_data       = gt_protocol_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_protocol_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_protocol.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'PROTOCOL'
          et_data       = gt_protocol_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_protocol_store. REFRESH gt_protocol_store.
    ENDIF.

    IF gd_rfdt IS INITIAL.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'FLAGS'
          et_data       = gt_flag_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
    ELSE.
      IMPORT gt_flag_store FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_flags.
      CALL METHOD cl_fagl_prot_services=>add_table_data
        EXPORTING
          ed_name       = 'FLAGS'
          et_data       = gt_flag_store[]
        CHANGING
          ctx_prot_data = ltx_prot_data.
      CLEAR gt_flag_store. REFRESH gt_flag_store.
    ENDIF.

    CALL METHOD cl_fagl_prot_services=>add_data
      EXPORTING
        ed_name       = 'P_EDKEY'
        ed_data       = p_edkey
      CHANGING
        ctx_prot_data = ltx_prot_data.


    CALL METHOD cl_fagl_prot_services=>store_data
      EXPORTING
        ed_program_name = sy-repid
        ed_store_descr  = p_logas
        ed_store_guid   = log_guid
        etx_prot_data   = ltx_prot_data
        ed_testrun      = save_test.

    p_log = ' '.

    ld_char32 = log_guid.
    SET PARAMETER ID 'ZF_REBUILD_FIDOC' FIELD ld_char32.
  ENDIF.
ENDFORM.                    "save_protocol

*&---------------------------------------------------------------------*
*&      Form  load_protocol
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM load_protocol.

  DATA ls_bkpf_store LIKE LINE OF gt_bkpf_store.
  DATA ls_bseg_store LIKE LINE OF gt_bseg_store.
  DATA ls_bsis_store LIKE LINE OF gt_bsis_store.
  DATA ls_bsas_store LIKE LINE OF gt_bsas_store.
  DATA ls_bsik_store LIKE LINE OF gt_bsik_store.
  DATA ls_bsak_store LIKE LINE OF gt_bsak_store.
  DATA ls_bsid_store LIKE LINE OF gt_bsid_store.
  DATA ls_bsad_store LIKE LINE OF gt_bsad_store.
  DATA ls_bsec_store LIKE LINE OF gt_bsec_store.
  DATA ls_bsed_store LIKE LINE OF gt_bsed_store.
  DATA ls_bset_store LIKE LINE OF gt_bset_store.
  DATA ls_bse_clr_store LIKE LINE OF gt_bse_clr_store.
  DATA ls_bseg_add_store LIKE LINE OF gt_bseg_add_store.
  DATA ls_splinfo_store LIKE LINE OF gt_splinfo_store.
  DATA ls_splinfo_val_store LIKE LINE OF gt_splinfo_val_store.
  DATA ls_glu1_store LIKE LINE OF gt_glu1_store.

  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsad LIKE LINE OF gt_bsad.
  DATA ls_bse_clr LIKE LINE OF gt_bse_clr.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_splinfo LIKE LINE OF gt_splinfo.
  DATA ls_splinfo_val LIKE LINE OF gt_splinfo_val.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_bsec LIKE LINE OF gt_bsec.
  DATA ls_bsed LIKE LINE OF gt_bsed.
  DATA ls_bset LIKE LINE OF gt_bset.

  save_flag = 1.
  CALL METHOD cl_fagl_prot_services=>load_data
    EXPORTING
      ed_guid       = p_protg
    IMPORTING
      itx_prot_data = ltx_prot_data.

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BKPF'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bkpf_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSEG'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bseg_store[].

  IF acdoca_active = 0.
    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSIS'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsis_store[].

    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSAS'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsas_store[].

    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSID'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsid_store[].

    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSAD'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsad_store[].

    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSIK'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsik_store[].

    CALL METHOD cl_fagl_prot_services=>retrieve_table_data
      EXPORTING
        ed_name       = 'BSAK'
        etx_prot_data = ltx_prot_data
      IMPORTING
        it_data       = gt_bsak_store[].
  ENDIF.

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSEC'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bsed_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSED'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bsed_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSET'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bset_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSE_CLR'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bse_clr_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'BSEG_ADD'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_bseg_add_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'GLU1'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_glu1_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'SPLINFO'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_splinfo_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'SPLINFO_VAL'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_splinfo_val_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'DOCLIST'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_doclist_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'PROTOCOL'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_protocol_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_table_data
    EXPORTING
      ed_name       = 'FLAGS'
      etx_prot_data = ltx_prot_data
    IMPORTING
      it_data       = gt_flag_store[].

  CALL METHOD cl_fagl_prot_services=>retrieve_data
    EXPORTING
      ed_name       = 'TEST'
      etx_prot_data = ltx_prot_data
    IMPORTING
      id_data       = p_test.

  SORT gt_flag_store.
  DELETE ADJACENT DUPLICATES FROM gt_flag_store.

  IF reverse_flag = 1.
    IF p_test IS INITIAL.
      PERFORM reverse_protocol.
    ELSE.
      MESSAGE 'Test run, no reverse possible!' TYPE 'E'.
    ENDIF.
  ENDIF.

  log_read = 'X'.
  IF sy-batch IS INITIAL AND lines( gt_doclist_store ) < p_docmax.
    PERFORM prepare_display.

    READ TABLE gt_bkpf_store INDEX 1 INTO ls_bkpf.
    PERFORM display_data_end USING ls_bkpf.

  ELSE.

    PERFORM display_batch_data.

  ENDIF.

ENDFORM.                    "load_protocol

*&---------------------------------------------------------------------*
*&      Form  build_fieldcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_fieldcat.

  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsad LIKE LINE OF gt_bsad.
  DATA ls_splinfo LIKE LINE OF gt_splinfo.
  DATA ls_splinfo_val LIKE LINE OF gt_splinfo_val.
  DATA ls_bsec LIKE LINE OF gt_bsec.
  DATA ls_bsed LIKE LINE OF gt_bsed.
  DATA ls_bset LIKE LINE OF gt_bset.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_bse_clr LIKE LINE OF gt_bse_clr.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.

  PERFORM check_currency_overall.

  LOOP AT gt_bkpf_store INTO ls_bkpf.
    IF ls_bkpf-orig NE 'DTAB'.
      upflag_bkpf = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bseg_store INTO ls_bseg.
    IF ls_bseg-orig NE 'DTAB'.
      upflag_bseg = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsis_store INTO ls_bsis.
    IF ls_bsis-orig NE 'DTAB'.
      upflag_bsis = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsas_store INTO ls_bsas.
    IF ls_bsas-orig NE 'DTAB'.
      upflag_bsas = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsik_store INTO ls_bsik.
    IF ls_bsik-orig NE 'DTAB'.
      upflag_bsik = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsak_store INTO ls_bsak.
    IF ls_bsak-orig NE 'DTAB'.
      upflag_bsak = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsid_store INTO ls_bsid.
    IF ls_bsid-orig NE 'DTAB'.
      upflag_bsid = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsad_store INTO ls_bsad.
    IF ls_bsad-orig NE 'DTAB'.
      upflag_bsad = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsec_store INTO ls_bsec.
    IF ls_bsec-orig NE 'DTAB'.
      upflag_bsec = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsed_store INTO ls_bsed.
    IF ls_bsed-orig NE 'DTAB'.
      upflag_bsed = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bset_store INTO ls_bset.
    IF ls_bset-orig NE 'DTAB'.
      upflag_bset = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bseg_add_store INTO ls_bseg_add.
    IF ls_bseg_add-orig NE 'DTAB'.
      upflag_bseg_add = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bse_clr_store INTO ls_bse_clr.
    IF ls_bse_clr-orig NE 'DTAB'.
      upflag_bse_clr = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_glu1_store INTO ls_glu1mod.
    IF ls_glu1mod-orig NE 'DTAB'.
      upflag_glu1mod = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo_store INTO ls_splinfo.
    IF ls_splinfo-orig NE 'DTAB'.
      upflag_splinfo = 1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo_val_store INTO ls_splinfo_val.
    IF ls_splinfo_val-orig NE 'DTAB'.
      upflag_splinfo_val = 1.
    ENDIF.
  ENDLOOP.


***FIELDCAT LEFT

  s_fieldcat_left-col_pos = '1'.
  s_fieldcat_left-fieldname = 'CONTROL'.
  s_fieldcat_left-datatype = 'CHAR'.
  s_fieldcat_left-inttype = 'C'.
  s_fieldcat_left-intlen = '000001'.
  s_fieldcat_left-reptext = ' '.
  s_fieldcat_left-domname = 'CHAR1'.
*s_fieldcat_left-emphasize = '?'.
  APPEND s_fieldcat_left TO t_fieldcat_left[].
  CLEAR s_fieldcat_left.

  s_fieldcat_left-col_pos = '2'.
  s_fieldcat_left-fieldname = 'BUKRS'.
  s_fieldcat_left-datatype = 'CHAR'.
  s_fieldcat_left-inttype = 'C'.
  s_fieldcat_left-intlen = '000004'.
  s_fieldcat_left-reptext = 'BUKRS'.
  s_fieldcat_left-domname = 'CHAR4'.
*s_fieldcat_left-emphasize = '?'.
  APPEND s_fieldcat_left TO t_fieldcat_left[].
  APPEND s_fieldcat_left TO t_fieldcat_left_out[].
  CLEAR s_fieldcat_left.

  s_fieldcat_left-col_pos = '3'.
  s_fieldcat_left-fieldname = 'BELNR'.
  s_fieldcat_left-datatype = 'CHAR'.
  s_fieldcat_left-inttype = 'C'.
  s_fieldcat_left-intlen = '000010'.
  s_fieldcat_left-reptext = 'BELNR'.
  s_fieldcat_left-domname = 'CHAR10'.
*s_fieldcat_left-emphasize = '?'.
  APPEND s_fieldcat_left TO t_fieldcat_left[].
  APPEND s_fieldcat_left TO t_fieldcat_left_out[].
  CLEAR s_fieldcat_left.

  s_fieldcat_left-col_pos = '4'.
  s_fieldcat_left-fieldname = 'GJAHR'.
  s_fieldcat_left-datatype = 'CHAR'.
  s_fieldcat_left-inttype = 'C'.
  s_fieldcat_left-intlen = '000004'.
  s_fieldcat_left-reptext = 'GJAHR'.
  s_fieldcat_left-domname = 'CHAR4'.
*s_fieldcat_left-emphasize = '?'.
  APPEND s_fieldcat_left TO t_fieldcat_left[].
  APPEND s_fieldcat_left TO t_fieldcat_left_out[].
  CLEAR s_fieldcat_left.

***FIELDCAT protocol
  s_fieldcat_protocol-col_pos = '1'.
  s_fieldcat_protocol-fieldname = 'BUKRS'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000004'.
  s_fieldcat_protocol-reptext = 'BUKRS'.
  s_fieldcat_protocol-domname = 'CHAR4'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '2'.
  s_fieldcat_protocol-fieldname = 'BELNR'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000010'.
  s_fieldcat_protocol-reptext = 'BELNR'.
  s_fieldcat_protocol-domname = 'CHAR10'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '4'.
  s_fieldcat_protocol-fieldname = 'BUZEI'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000003'.
  s_fieldcat_protocol-reptext = 'BUZEI'.
  s_fieldcat_protocol-domname = 'CHAR3'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '3'.
  s_fieldcat_protocol-fieldname = 'GJAHR'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000004'.
  s_fieldcat_protocol-reptext = 'GJAHR'.
  s_fieldcat_protocol-domname = 'CHAR4'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '5'.
  s_fieldcat_protocol-fieldname = 'RLDNR'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000002'.
  s_fieldcat_protocol-reptext = 'RLDNR'.
  s_fieldcat_protocol-domname = 'CHAR2'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '6'.
  s_fieldcat_protocol-fieldname = 'TYPE'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000005'.
  s_fieldcat_protocol-reptext = 'TYPE'.
  s_fieldcat_protocol-domname = 'CHAR5'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

  s_fieldcat_protocol-col_pos = '7'.
  s_fieldcat_protocol-fieldname = 'MESSAGE'.
  s_fieldcat_protocol-datatype = 'CHAR'.
  s_fieldcat_protocol-inttype = 'C'.
  s_fieldcat_protocol-intlen = '000100'.
  s_fieldcat_protocol-reptext = 'MESSAGE'.
  s_fieldcat_protocol-domname = 'CHAR100'.
*s_fieldcat_protocol-emphasize = '?'.
  APPEND s_fieldcat_protocol TO t_fieldcat_protocol[].
  CLEAR s_fieldcat_protocol.

***FIELDCAT flags
  s_fieldcat_flags-col_pos = '1'.
  s_fieldcat_flags-fieldname = 'CONTROL'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000001'.
  s_fieldcat_flags-reptext = ' '.
  s_fieldcat_flags-domname = 'CHAR1'.
*s_fieldcat_left-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  APPEND s_fieldcat_flags TO t_fieldcat_flags_disp[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '2'.
  s_fieldcat_flags-fieldname = 'BUKRS'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000004'.
  s_fieldcat_flags-reptext = 'BUKRS'.
  s_fieldcat_flags-domname = 'CHAR4'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '3'.
  s_fieldcat_flags-fieldname = 'BELNR'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000010'.
  s_fieldcat_flags-reptext = 'BELNR'.
  s_fieldcat_flags-domname = 'CHAR10'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '5'.
  s_fieldcat_flags-fieldname = 'BUZEI'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000003'.
  s_fieldcat_flags-reptext = 'BUZEI'.
  s_fieldcat_flags-domname = 'CHAR3'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  APPEND s_fieldcat_flags TO t_fieldcat_flags_disp[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '4'.
  s_fieldcat_flags-fieldname = 'GJAHR'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000004'.
  s_fieldcat_flags-reptext = 'GJAHR'.
  s_fieldcat_flags-domname = 'CHAR4'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '6'.
  s_fieldcat_flags-fieldname = 'RLDNR'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000002'.
  s_fieldcat_flags-reptext = 'RLDNR'.
  s_fieldcat_flags-domname = 'CHAR2'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  APPEND s_fieldcat_flags TO t_fieldcat_flags_disp[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '7'.
  s_fieldcat_flags-fieldname = 'ORIG'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000004'.
  s_fieldcat_flags-reptext = 'TYPE'.
  s_fieldcat_flags-domname = 'CHAR4'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  CLEAR s_fieldcat_flags.

  s_fieldcat_flags-col_pos = '8'.
  s_fieldcat_flags-fieldname = 'ERROR'.
  s_fieldcat_flags-datatype = 'CHAR'.
  s_fieldcat_flags-inttype = 'C'.
  s_fieldcat_flags-intlen = '000030'.
  s_fieldcat_flags-reptext = 'MESSAGE'.
  s_fieldcat_flags-domname = 'CHAR30'.
*s_fieldcat_flags-emphasize = '?'.
  APPEND s_fieldcat_flags TO t_fieldcat_flags[].
  APPEND s_fieldcat_flags TO t_fieldcat_flags_disp[].
  CLEAR s_fieldcat_flags.

***FIELDCAT BKPF
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BKPF'
    CHANGING
      ct_fieldcat      = t_fieldcat_bkpf[].

  s_fieldcat_bkpfmod-col_pos = '1'.
  s_fieldcat_bkpfmod-tabname = '1'.
  s_fieldcat_bkpfmod-fieldname = 'CONTROL'.
  s_fieldcat_bkpfmod-datatype = 'CHAR'.
  s_fieldcat_bkpfmod-inttype = 'C'.
  s_fieldcat_bkpfmod-intlen = '000001'.
  s_fieldcat_bkpfmod-reptext = ' '.
  s_fieldcat_bkpfmod-domname = 'CHAR1'.
*s_fieldcat_bkpfmod-emphasize = '?'.
  APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod[].
  CLEAR s_fieldcat_bkpfmod.

  s_fieldcat_bkpfmod-col_pos = '3'.
  s_fieldcat_bkpfmod-tabname = '1'.
  s_fieldcat_bkpfmod-fieldname = 'ORIG'.
  s_fieldcat_bkpfmod-datatype = 'CHAR'.
  s_fieldcat_bkpfmod-inttype = 'C'.
  s_fieldcat_bkpfmod-intlen = '000004'.
  s_fieldcat_bkpfmod-reptext = 'Origin'.
  s_fieldcat_bkpfmod-domname = 'CHAR4'.
*s_fieldcat_bkpfmod-emphasize = '?'.
  APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod[].
  APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod_out[].
  CLEAR s_fieldcat_bkpfmod.

  s_fieldcat_bkpfmod-col_pos = '2'.
  s_fieldcat_bkpfmod-tabname = '1'.
  s_fieldcat_bkpfmod-fieldname = 'CHECK'.
  s_fieldcat_bkpfmod-datatype = 'CHAR'.
  s_fieldcat_bkpfmod-inttype = 'C'.
  s_fieldcat_bkpfmod-intlen = '000004'.
  s_fieldcat_bkpfmod-reptext = 'KEEP'.
  s_fieldcat_bkpfmod-domname = 'CHAR4'.
  s_fieldcat_bkpfmod-checkbox = 'X'.
  IF p_test IS INITIAL
    AND NOT ( upflag_bkpf IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bkpfmod-edit = 'X'.
  ENDIF.
*  s_fieldcat_bkpfmod-emphasize = '?'.
  APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod[].
  CLEAR s_fieldcat_bkpfmod.

  LOOP AT t_fieldcat_bkpf[] INTO s_fieldcat_bkpfmod.
    CLEAR s_fieldcat_bkpfmod-no_out.
    IF NOT ( s_fieldcat_bkpfmod-fieldname = 'BUKRS'
    OR s_fieldcat_bkpfmod-fieldname = 'BELNR'
    OR s_fieldcat_bkpfmod-fieldname = 'GJAHR'
    OR s_fieldcat_bkpfmod-fieldname = 'BLART'
    OR s_fieldcat_bkpfmod-fieldname = 'BLDAT'
    OR s_fieldcat_bkpfmod-fieldname = 'BUDAT'
    OR s_fieldcat_bkpfmod-fieldname = 'MONAT'
    OR s_fieldcat_bkpfmod-fieldname = 'CPUDT'
    OR s_fieldcat_bkpfmod-fieldname = 'CPUTM'
    OR s_fieldcat_bkpfmod-fieldname = 'USNAM'
    OR s_fieldcat_bkpfmod-fieldname = 'TCODE'
    OR s_fieldcat_bkpfmod-fieldname = 'STBLG'
    OR s_fieldcat_bkpfmod-fieldname = 'STJAH'
    OR s_fieldcat_bkpfmod-fieldname = 'WAERS'
    OR s_fieldcat_bkpfmod-fieldname = 'HWAER'
    OR s_fieldcat_bkpfmod-fieldname = 'HWAE2'
    OR s_fieldcat_bkpfmod-fieldname = 'HWAE3'
    OR s_fieldcat_bkpfmod-fieldname = 'BSTAT'
    OR s_fieldcat_bkpfmod-fieldname = 'AWKEY'
    OR s_fieldcat_bkpfmod-fieldname = 'AWTYP'
      OR s_fieldcat_bkpfmod-fieldname = 'LDGRP' ).
      s_fieldcat_bkpfmod-no_out = 'X'.
    ENDIF.

    IF p_tech IS NOT INITIAL.
      s_fieldcat_bkpfmod-reptext = s_fieldcat_bkpfmod-fieldname.
      s_fieldcat_bkpfmod-scrtext_s = s_fieldcat_bkpfmod-fieldname.
      s_fieldcat_bkpfmod-scrtext_m = s_fieldcat_bkpfmod-fieldname.
      s_fieldcat_bkpfmod-scrtext_l = s_fieldcat_bkpfmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bkpfmod-col_pos.
    APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bkpfmod-fieldname = 'BUKRS'
        OR s_fieldcat_bkpfmod-fieldname = 'BELNR'
        OR s_fieldcat_bkpfmod-fieldname = 'GJAHR' ).
      ELSE.
        s_fieldcat_bkpfmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bkpfmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bkpfmod TO t_fieldcat_bkpfmod[].
  ENDLOOP.

***FIELDCAT BSEG
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSEG'
    CHANGING
      ct_fieldcat      = t_fieldcat_bseg[].

  s_fieldcat_bsegmod-col_pos = '1'.
  s_fieldcat_bsegmod-tabname = '1'.
  s_fieldcat_bsegmod-fieldname = 'CONTROL'.
  s_fieldcat_bsegmod-datatype = 'CHAR'.
  s_fieldcat_bsegmod-inttype = 'C'.
  s_fieldcat_bsegmod-intlen = '000001'.
  s_fieldcat_bsegmod-reptext = ' '.
  s_fieldcat_bsegmod-domname = 'CHAR1'.
*s_fieldcat_bsegmod-emphasize = '?'.
  APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod[].
  CLEAR s_fieldcat_bsegmod.


  s_fieldcat_bsegmod-col_pos = '3'.
  s_fieldcat_bsegmod-tabname = '1'.
  s_fieldcat_bsegmod-fieldname = 'ORIG'.
  s_fieldcat_bsegmod-datatype = 'CHAR'.
  s_fieldcat_bsegmod-inttype = 'C'.
  s_fieldcat_bsegmod-intlen = '000004'.
  s_fieldcat_bsegmod-reptext = 'Origin'.
  s_fieldcat_bsegmod-domname = 'CHAR4'.
*s_fieldcat_bsegmod-emphasize = '?'.
  APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod[].
  APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod_out[].
  CLEAR s_fieldcat_bsegmod.

  s_fieldcat_bsegmod-col_pos = '2'.
  s_fieldcat_bsegmod-tabname = '1'.
  s_fieldcat_bsegmod-fieldname = 'CHECK'.
  s_fieldcat_bsegmod-datatype = 'CHAR'.
  s_fieldcat_bsegmod-inttype = 'C'.
  s_fieldcat_bsegmod-intlen = '000004'.
  s_fieldcat_bsegmod-reptext = 'KEEP'.
  s_fieldcat_bsegmod-domname = 'CHAR4'.
  s_fieldcat_bsegmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bseg IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsegmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsegmod-emphasize = '?'.
  APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod[].
  CLEAR s_fieldcat_bsegmod.

  LOOP AT t_fieldcat_bseg[] INTO s_fieldcat_bsegmod.
    CLEAR s_fieldcat_bsegmod-no_out.
    IF NOT ( s_fieldcat_bsegmod-fieldname = 'BUKRS'
OR s_fieldcat_bsegmod-fieldname = 'BELNR'
OR s_fieldcat_bsegmod-fieldname = 'GJAHR'
         OR s_fieldcat_bsegmod-fieldname = 'BUZEI'
         OR s_fieldcat_bsegmod-fieldname = 'AUGDT'
         OR s_fieldcat_bsegmod-fieldname = 'AUGCP'
         OR s_fieldcat_bsegmod-fieldname = 'AUGBL'
         OR s_fieldcat_bsegmod-fieldname = 'BSCHL'
      OR s_fieldcat_bsegmod-fieldname = 'SHKZG'
         OR s_fieldcat_bsegmod-fieldname = 'KOART'
         OR s_fieldcat_bsegmod-fieldname = 'WRBTR'
         OR s_fieldcat_bsegmod-fieldname = 'DMBTR'
         OR s_fieldcat_bsegmod-fieldname = 'DMBE2'
         OR s_fieldcat_bsegmod-fieldname = 'DMBE3'
         OR s_fieldcat_bsegmod-fieldname = 'PSWBT'
         OR s_fieldcat_bsegmod-fieldname = 'PSWSL'
         OR s_fieldcat_bsegmod-fieldname = 'XKRES'
         OR s_fieldcat_bsegmod-fieldname = 'XHRES'
         OR s_fieldcat_bsegmod-fieldname = 'XOPVW'
         OR s_fieldcat_bsegmod-fieldname = 'XLGCLR'
         OR s_fieldcat_bsegmod-fieldname = 'HKONT'
         OR s_fieldcat_bsegmod-fieldname = 'LIFNR'
         OR s_fieldcat_bsegmod-fieldname = 'KUNNR'
OR s_fieldcat_bsegmod-fieldname = 'H_BLART'
OR s_fieldcat_bsegmod-fieldname = 'H_BLDAT'
OR s_fieldcat_bsegmod-fieldname = 'H_BUDAT'
OR s_fieldcat_bsegmod-fieldname = 'H_MONAT'
OR s_fieldcat_bsegmod-fieldname = 'USNAM'
OR s_fieldcat_bsegmod-fieldname = 'H_WAERS'
OR s_fieldcat_bsegmod-fieldname = 'H_HWAER'
OR s_fieldcat_bsegmod-fieldname = 'H_HWAE2'
OR s_fieldcat_bsegmod-fieldname = 'H_HWAE3'
OR s_fieldcat_bsegmod-fieldname = 'H_BSTAT'
OR s_fieldcat_bsegmod-fieldname = 'AWKEY'
OR s_fieldcat_bsegmod-fieldname = 'AWTYP' ).
      s_fieldcat_bsegmod-no_out = 'X'.
    ENDIF.

    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsegmod-reptext = s_fieldcat_bsegmod-fieldname.
      s_fieldcat_bsegmod-scrtext_s = s_fieldcat_bsegmod-fieldname.
      s_fieldcat_bsegmod-scrtext_m = s_fieldcat_bsegmod-fieldname.
      s_fieldcat_bsegmod-scrtext_l = s_fieldcat_bsegmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsegmod-col_pos.
    APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsegmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsegmod-fieldname = 'BELNR'
        OR s_fieldcat_bsegmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsegmod-fieldname = 'BUZEI' ).
      ELSE.
        s_fieldcat_bsegmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsegmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsegmod TO t_fieldcat_bsegmod[].
  ENDLOOP.

***FIELDCAT SPLINFO
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'FAGL_SPLINFO'
    CHANGING
      ct_fieldcat      = t_fieldcat_splinfo[].

  s_fieldcat_splinfomod-col_pos = '1'.
  s_fieldcat_splinfomod-tabname = '1'.
  s_fieldcat_splinfomod-fieldname = 'CONTROL'.
  s_fieldcat_splinfomod-datatype = 'CHAR'.
  s_fieldcat_splinfomod-inttype = 'C'.
  s_fieldcat_splinfomod-intlen = '000001'.
  s_fieldcat_splinfomod-reptext = ' '.
  s_fieldcat_splinfomod-domname = 'CHAR1'.
*s_fieldcat_splinfomod-emphasize = '?'.
  APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod[].
  CLEAR s_fieldcat_splinfomod.


  s_fieldcat_splinfomod-col_pos = '3'.
  s_fieldcat_splinfomod-tabname = '1'.
  s_fieldcat_splinfomod-fieldname = 'ORIG'.
  s_fieldcat_splinfomod-datatype = 'CHAR'.
  s_fieldcat_splinfomod-inttype = 'C'.
  s_fieldcat_splinfomod-intlen = '000004'.
  s_fieldcat_splinfomod-reptext = 'Origin'.
  s_fieldcat_splinfomod-domname = 'CHAR4'.
*s_fieldcat_splinfomod-emphasize = '?'.
  APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod[].
  APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod_out[].
  CLEAR s_fieldcat_splinfomod.

  s_fieldcat_splinfomod-col_pos = '2'.
  s_fieldcat_splinfomod-tabname = '1'.
  s_fieldcat_splinfomod-fieldname = 'CHECK'.
  s_fieldcat_splinfomod-datatype = 'CHAR'.
  s_fieldcat_splinfomod-inttype = 'C'.
  s_fieldcat_splinfomod-intlen = '000004'.
  s_fieldcat_splinfomod-reptext = 'KEEP'.
  s_fieldcat_splinfomod-domname = 'CHAR4'.
  s_fieldcat_splinfomod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_splinfo IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_splinfomod-edit = 'X'.
  ENDIF.
*s_fieldcat_splinfomod-emphasize = '?'.
  APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod[].
  CLEAR s_fieldcat_splinfomod.

  LOOP AT t_fieldcat_splinfo[] INTO s_fieldcat_splinfomod.
    CLEAR s_fieldcat_splinfomod-no_out.
    IF NOT ( s_fieldcat_splinfomod-fieldname = 'BUKRS'
     OR s_fieldcat_splinfomod-fieldname = 'BELNR'
     OR s_fieldcat_splinfomod-fieldname = 'GJAHR'
     OR s_fieldcat_splinfomod-fieldname = 'BUZEI'
           OR s_fieldcat_splinfomod-fieldname = 'SPL_NO'
       OR s_fieldcat_splinfomod-fieldname = 'AWTYP'
       OR s_fieldcat_splinfomod-fieldname = 'AWREF'
       OR s_fieldcat_splinfomod-fieldname = 'AWORG'
       OR s_fieldcat_splinfomod-fieldname = 'SHKZG'
       OR s_fieldcat_splinfomod-fieldname = 'BSCHL'
       OR s_fieldcat_splinfomod-fieldname = 'HKONT'
       OR s_fieldcat_splinfomod-fieldname = 'PSWSL'
       OR s_fieldcat_splinfomod-fieldname = 'PSWBT'
    ).
      s_fieldcat_splinfomod-no_out = 'X'.
    ENDIF.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_splinfomod-reptext = s_fieldcat_splinfomod-fieldname.
      s_fieldcat_splinfomod-scrtext_s = s_fieldcat_splinfomod-fieldname.
      s_fieldcat_splinfomod-scrtext_m = s_fieldcat_splinfomod-fieldname.
      s_fieldcat_splinfomod-scrtext_l = s_fieldcat_splinfomod-fieldname.
    ENDIF.
    IF s_fieldcat_splinfomod-fieldname = 'BUKRS'.
      s_fieldcat_splinfomod-col_pos = '4'.
    ELSE.
      ADD 4 TO s_fieldcat_splinfomod-col_pos.
    ENDIF.
    APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_splinfomod-fieldname = 'BUKRS'
        OR s_fieldcat_splinfomod-fieldname = 'BELNR'
        OR s_fieldcat_splinfomod-fieldname = 'GJAHR'
        OR s_fieldcat_splinfomod-fieldname = 'BUZEI'
        OR s_fieldcat_splinfomod-fieldname = 'SPL_NO' ).
      ELSE.
        s_fieldcat_splinfomod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_splinfomod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_splinfomod TO t_fieldcat_splinfomod[].
  ENDLOOP.

***FIELDCAT SPLINFO_VAL
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'FAGL_SPLINFO_VAL'
    CHANGING
      ct_fieldcat      = t_fieldcat_splinfo_val[].


  s_fieldcat_splinfo_valmod-col_pos = '1'.
  s_fieldcat_splinfo_valmod-tabname = '1'.
  s_fieldcat_splinfo_valmod-fieldname = 'CONTROL'.
  s_fieldcat_splinfo_valmod-datatype = 'CHAR'.
  s_fieldcat_splinfo_valmod-inttype = 'C'.
  s_fieldcat_splinfo_valmod-intlen = '000001'.
  s_fieldcat_splinfo_valmod-reptext = ' '.
  s_fieldcat_splinfo_valmod-domname = 'CHAR1'.
*s_fieldcat_splinfo_valmod-emphasize = '?'.
  APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod[].
  CLEAR s_fieldcat_splinfo_valmod.


  s_fieldcat_splinfo_valmod-col_pos = '3'.
  s_fieldcat_splinfo_valmod-tabname = '1'.
  s_fieldcat_splinfo_valmod-fieldname = 'ORIG'.
  s_fieldcat_splinfo_valmod-datatype = 'CHAR'.
  s_fieldcat_splinfo_valmod-inttype = 'C'.
  s_fieldcat_splinfo_valmod-intlen = '000004'.
  s_fieldcat_splinfo_valmod-reptext = 'Origin'.
  s_fieldcat_splinfo_valmod-domname = 'CHAR4'.
*s_fieldcat_splinfo_valmod-emphasize = '?'.
  APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod[].
  APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod_out[].
  CLEAR s_fieldcat_splinfo_valmod.

  s_fieldcat_splinfo_valmod-col_pos = '2'.
  s_fieldcat_splinfo_valmod-tabname = '1'.
  s_fieldcat_splinfo_valmod-fieldname = 'CHECK'.
  s_fieldcat_splinfo_valmod-datatype = 'CHAR'.
  s_fieldcat_splinfo_valmod-inttype = 'C'.
  s_fieldcat_splinfo_valmod-intlen = '000004'.
  s_fieldcat_splinfo_valmod-reptext = 'KEEP'.
  s_fieldcat_splinfo_valmod-domname = 'CHAR4'.
  s_fieldcat_splinfo_valmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_splinfo_val IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_splinfo_valmod-edit = 'X'.
  ENDIF.
*s_fieldcat_splinfo_valmod-emphasize = '?'.
  APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod[].
  CLEAR s_fieldcat_splinfo_valmod.

  LOOP AT t_fieldcat_splinfo_val[] INTO s_fieldcat_splinfo_valmod.
    CLEAR s_fieldcat_splinfo_valmod-no_out.
    IF s_fieldcat_splinfo_valmod-fieldname = 'CURRTYP'
 OR s_fieldcat_splinfo_valmod-fieldname = '_DATAAGING'.
      s_fieldcat_splinfo_valmod-no_out = 'X'.
    ENDIF.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_splinfo_valmod-reptext = s_fieldcat_splinfo_valmod-fieldname.
      s_fieldcat_splinfo_valmod-scrtext_s = s_fieldcat_splinfo_valmod-fieldname.
      s_fieldcat_splinfo_valmod-scrtext_m = s_fieldcat_splinfo_valmod-fieldname.
      s_fieldcat_splinfo_valmod-scrtext_l = s_fieldcat_splinfo_valmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_splinfo_valmod-col_pos.
    APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_splinfo_valmod-fieldname = 'BUKRS'
        OR s_fieldcat_splinfo_valmod-fieldname = 'BELNR'
        OR s_fieldcat_splinfo_valmod-fieldname = 'GJAHR'
        OR s_fieldcat_splinfo_valmod-fieldname = 'BUZEI'
        OR s_fieldcat_splinfo_valmod-fieldname = 'SPL_NO'
        OR s_fieldcat_splinfo_valmod-fieldname = 'CURTP' ).
      ELSE.
        s_fieldcat_splinfo_valmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_splinfo_valmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_splinfo_valmod TO t_fieldcat_splinfo_valmod[].
  ENDLOOP.

***FIELDCAT BSAS
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSAS'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsas[].

  s_fieldcat_bsasmod-col_pos = '1'.
  s_fieldcat_bsasmod-tabname = '1'.
  s_fieldcat_bsasmod-fieldname = 'CONTROL'.
  s_fieldcat_bsasmod-datatype = 'CHAR'.
  s_fieldcat_bsasmod-inttype = 'C'.
  s_fieldcat_bsasmod-intlen = '000001'.
  s_fieldcat_bsasmod-reptext = ' '.
  s_fieldcat_bsasmod-domname = 'CHAR1'.
*s_fieldcat_bsasmod-emphasize = '?'.
  APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod[].
  CLEAR s_fieldcat_bsasmod.


  s_fieldcat_bsasmod-col_pos = '3'.
  s_fieldcat_bsasmod-tabname = '1'.
  s_fieldcat_bsasmod-fieldname = 'ORIG'.
  s_fieldcat_bsasmod-datatype = 'CHAR'.
  s_fieldcat_bsasmod-inttype = 'C'.
  s_fieldcat_bsasmod-intlen = '000004'.
  s_fieldcat_bsasmod-reptext = 'Origin'.
  s_fieldcat_bsasmod-domname = 'CHAR4'.
*s_fieldcat_bsasmod-emphasize = '?'.
  APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod[].
  APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod_out[].
  CLEAR s_fieldcat_bsasmod.

  s_fieldcat_bsasmod-col_pos = '2'.
  s_fieldcat_bsasmod-tabname = '1'.
  s_fieldcat_bsasmod-fieldname = 'CHECK'.
  s_fieldcat_bsasmod-datatype = 'CHAR'.
  s_fieldcat_bsasmod-inttype = 'C'.
  s_fieldcat_bsasmod-intlen = '000004'.
  s_fieldcat_bsasmod-reptext = 'KEEP'.
  s_fieldcat_bsasmod-domname = 'CHAR4'.
  s_fieldcat_bsasmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsas IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsasmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsasmod-emphasize = '?'.
  APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod[].
  CLEAR s_fieldcat_bsasmod.

  LOOP AT t_fieldcat_bsas[] INTO s_fieldcat_bsasmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsasmod-reptext = s_fieldcat_bsasmod-fieldname.
      s_fieldcat_bsasmod-scrtext_s = s_fieldcat_bsasmod-fieldname.
      s_fieldcat_bsasmod-scrtext_m = s_fieldcat_bsasmod-fieldname.
      s_fieldcat_bsasmod-scrtext_l = s_fieldcat_bsasmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsasmod-col_pos.
    APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsasmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsasmod-fieldname = 'BELNR'
        OR s_fieldcat_bsasmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsasmod-fieldname = 'BUZEI'
        OR s_fieldcat_bsasmod-fieldname = 'HKONT'
        OR s_fieldcat_bsasmod-fieldname = 'ZUONR'
        OR s_fieldcat_bsadmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsasmod-fieldname = 'AUGDT' ).
      ELSE.
        s_fieldcat_bsasmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsasmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsasmod TO t_fieldcat_bsasmod[].
  ENDLOOP.

***FIELDCAT BSIS
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'bsis'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsis[].


  s_fieldcat_bsismod-col_pos = '1'.
  s_fieldcat_bsismod-tabname = '1'.
  s_fieldcat_bsismod-fieldname = 'CONTROL'.
  s_fieldcat_bsismod-datatype = 'CHAR'.
  s_fieldcat_bsismod-inttype = 'C'.
  s_fieldcat_bsismod-intlen = '000001'.
  s_fieldcat_bsismod-reptext = ' '.
  s_fieldcat_bsismod-domname = 'CHAR1'.
*s_fieldcat_bsismod-emphasize = '?'.
  APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod[].
  CLEAR s_fieldcat_bsismod.


  s_fieldcat_bsismod-col_pos = '3'.
  s_fieldcat_bsismod-tabname = '1'.
  s_fieldcat_bsismod-fieldname = 'ORIG'.
  s_fieldcat_bsismod-datatype = 'CHAR'.
  s_fieldcat_bsismod-inttype = 'C'.
  s_fieldcat_bsismod-intlen = '000004'.
  s_fieldcat_bsismod-reptext = 'Origin'.
  s_fieldcat_bsismod-domname = 'CHAR4'.
*s_fieldcat_bsismod-emphasize = '?'.
  APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod[].
  APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod_out[].
  CLEAR s_fieldcat_bsismod.

  s_fieldcat_bsismod-col_pos = '2'.
  s_fieldcat_bsismod-tabname = '1'.
  s_fieldcat_bsismod-fieldname = 'CHECK'.
  s_fieldcat_bsismod-datatype = 'CHAR'.
  s_fieldcat_bsismod-inttype = 'C'.
  s_fieldcat_bsismod-intlen = '000004'.
  s_fieldcat_bsismod-reptext = 'KEEP'.
  s_fieldcat_bsismod-domname = 'CHAR4'.
  s_fieldcat_bsismod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsis IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsismod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsismod-emphasize = '?'.
  APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod[].
  CLEAR s_fieldcat_bsismod.

  LOOP AT t_fieldcat_bsis[] INTO s_fieldcat_bsismod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsismod-reptext = s_fieldcat_bsismod-fieldname.
      s_fieldcat_bsismod-scrtext_s = s_fieldcat_bsismod-fieldname.
      s_fieldcat_bsismod-scrtext_m = s_fieldcat_bsismod-fieldname.
      s_fieldcat_bsismod-scrtext_l = s_fieldcat_bsismod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsismod-col_pos.
    APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsismod-fieldname = 'BUKRS'
        OR s_fieldcat_bsismod-fieldname = 'BELNR'
        OR s_fieldcat_bsismod-fieldname = 'GJAHR'
        OR s_fieldcat_bsismod-fieldname = 'BUZEI'
        OR s_fieldcat_bsismod-fieldname = 'HKONT'
        OR s_fieldcat_bsismod-fieldname = 'ZUONR'
        OR s_fieldcat_bsidmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsismod-fieldname = 'AUGDT' ).
      ELSE.
        s_fieldcat_bsismod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsismod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsismod TO t_fieldcat_bsismod[].
  ENDLOOP.

***FIELDCAT BSIK
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'bsik'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsik[].


  s_fieldcat_bsikmod-col_pos = '1'.
  s_fieldcat_bsikmod-tabname = '1'.
  s_fieldcat_bsikmod-fieldname = 'CONTROL'.
  s_fieldcat_bsikmod-datatype = 'CHAR'.
  s_fieldcat_bsikmod-inttype = 'C'.
  s_fieldcat_bsikmod-intlen = '000001'.
  s_fieldcat_bsikmod-reptext = ' '.
  s_fieldcat_bsikmod-domname = 'CHAR1'.
*s_fieldcat_bsikmod-emphasize = '?'.
  APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod[].
  CLEAR s_fieldcat_bsikmod.


  s_fieldcat_bsikmod-col_pos = '3'.
  s_fieldcat_bsikmod-tabname = '1'.
  s_fieldcat_bsikmod-fieldname = 'ORIG'.
  s_fieldcat_bsikmod-datatype = 'CHAR'.
  s_fieldcat_bsikmod-inttype = 'C'.
  s_fieldcat_bsikmod-intlen = '000004'.
  s_fieldcat_bsikmod-reptext = 'Origin'.
  s_fieldcat_bsikmod-domname = 'CHAR4'.
*s_fieldcat_bsikmod-emphasize = '?'.
  APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod[].
  APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod_out[].
  CLEAR s_fieldcat_bsikmod.

  s_fieldcat_bsikmod-col_pos = '2'.
  s_fieldcat_bsikmod-tabname = '1'.
  s_fieldcat_bsikmod-fieldname = 'CHECK'.
  s_fieldcat_bsikmod-datatype = 'CHAR'.
  s_fieldcat_bsikmod-inttype = 'C'.
  s_fieldcat_bsikmod-intlen = '000004'.
  s_fieldcat_bsikmod-reptext = 'KEEP'.
  s_fieldcat_bsikmod-domname = 'CHAR4'.
  s_fieldcat_bsikmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsik IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsikmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsikmod-emphasize = '?'.
  APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod[].
  CLEAR s_fieldcat_bsikmod.

  LOOP AT t_fieldcat_bsik[] INTO s_fieldcat_bsikmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsikmod-reptext = s_fieldcat_bsikmod-fieldname.
      s_fieldcat_bsikmod-scrtext_s = s_fieldcat_bsikmod-fieldname.
      s_fieldcat_bsikmod-scrtext_m = s_fieldcat_bsikmod-fieldname.
      s_fieldcat_bsikmod-scrtext_l = s_fieldcat_bsikmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsikmod-col_pos.
    APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsikmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsikmod-fieldname = 'BELNR'
        OR s_fieldcat_bsikmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsikmod-fieldname = 'BUZEI'
        OR s_fieldcat_bsikmod-fieldname = 'LIFNR'
        OR s_fieldcat_bsikmod-fieldname = 'ZUONR'
        OR s_fieldcat_bsikmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsikmod-fieldname = 'AUGDT'
        OR s_fieldcat_bsikmod-fieldname = 'UMSKS'
        OR s_fieldcat_bsikmod-fieldname = 'UMSKZ' ).
      ELSE.
        s_fieldcat_bsikmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsikmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsikmod TO t_fieldcat_bsikmod[].
  ENDLOOP.

***FIELDCAT BSAK
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'bsak'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsak[].


  s_fieldcat_bsakmod-col_pos = '1'.
  s_fieldcat_bsakmod-tabname = '1'.
  s_fieldcat_bsakmod-fieldname = 'CONTROL'.
  s_fieldcat_bsakmod-datatype = 'CHAR'.
  s_fieldcat_bsakmod-inttype = 'C'.
  s_fieldcat_bsakmod-intlen = '000001'.
  s_fieldcat_bsakmod-reptext = ' '.
  s_fieldcat_bsakmod-domname = 'CHAR1'.
*s_fieldcat_bsakmod-emphasize = '?'.
  APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod[].
  CLEAR s_fieldcat_bsakmod.


  s_fieldcat_bsakmod-col_pos = '3'.
  s_fieldcat_bsakmod-tabname = '1'.
  s_fieldcat_bsakmod-fieldname = 'ORIG'.
  s_fieldcat_bsakmod-datatype = 'CHAR'.
  s_fieldcat_bsakmod-inttype = 'C'.
  s_fieldcat_bsakmod-intlen = '000004'.
  s_fieldcat_bsakmod-reptext = 'Origin'.
  s_fieldcat_bsakmod-domname = 'CHAR4'.
*s_fieldcat_bsakmod-emphasize = '?'.
  APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod[].
  APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod_out[].
  CLEAR s_fieldcat_bsakmod.

  s_fieldcat_bsakmod-col_pos = '2'.
  s_fieldcat_bsakmod-tabname = '1'.
  s_fieldcat_bsakmod-fieldname = 'CHECK'.
  s_fieldcat_bsakmod-datatype = 'CHAR'.
  s_fieldcat_bsakmod-inttype = 'C'.
  s_fieldcat_bsakmod-intlen = '000004'.
  s_fieldcat_bsakmod-reptext = 'KEEP'.
  s_fieldcat_bsakmod-domname = 'CHAR4'.
  s_fieldcat_bsakmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsak IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsakmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsakmod-emphasize = '?'.
  APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod[].
  CLEAR s_fieldcat_bsakmod.

  LOOP AT t_fieldcat_bsak[] INTO s_fieldcat_bsakmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsakmod-reptext = s_fieldcat_bsakmod-fieldname.
      s_fieldcat_bsakmod-scrtext_s = s_fieldcat_bsakmod-fieldname.
      s_fieldcat_bsakmod-scrtext_m = s_fieldcat_bsakmod-fieldname.
      s_fieldcat_bsakmod-scrtext_l = s_fieldcat_bsakmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsakmod-col_pos.
    APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsakmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsakmod-fieldname = 'BELNR'
        OR s_fieldcat_bsakmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsakmod-fieldname = 'BUZEI'
        OR s_fieldcat_bsakmod-fieldname = 'LIFNR'
        OR s_fieldcat_bsakmod-fieldname = 'ZUONR'
        OR s_fieldcat_bsakmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsakmod-fieldname = 'AUGDT'
        OR s_fieldcat_bsakmod-fieldname = 'UMSKS'
        OR s_fieldcat_bsakmod-fieldname = 'UMSKZ' ).
      ELSE.
        s_fieldcat_bsakmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsakmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsakmod TO t_fieldcat_bsakmod[].
  ENDLOOP.

***FIELDCAT BSID
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'bsid'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsid[].

  s_fieldcat_bsidmod-col_pos = '1'.
  s_fieldcat_bsidmod-tabname = '1'.
  s_fieldcat_bsidmod-fieldname = 'CONTROL'.
  s_fieldcat_bsidmod-datatype = 'CHAR'.
  s_fieldcat_bsidmod-inttype = 'C'.
  s_fieldcat_bsidmod-intlen = '000001'.
  s_fieldcat_bsidmod-reptext = ' '.
  s_fieldcat_bsidmod-domname = 'CHAR1'.
*s_fieldcat_bsidmod-emphasize = '?'.
  APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod[].
  CLEAR s_fieldcat_bsidmod.


  s_fieldcat_bsidmod-col_pos = '3'.
  s_fieldcat_bsidmod-tabname = '1'.
  s_fieldcat_bsidmod-fieldname = 'ORIG'.
  s_fieldcat_bsidmod-datatype = 'CHAR'.
  s_fieldcat_bsidmod-inttype = 'C'.
  s_fieldcat_bsidmod-intlen = '000004'.
  s_fieldcat_bsidmod-reptext = 'Origin'.
  s_fieldcat_bsidmod-domname = 'CHAR4'.
*s_fieldcat_bsidmod-emphasize = '?'.
  APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod[].
  APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod_out[].
  CLEAR s_fieldcat_bsidmod.

  s_fieldcat_bsidmod-col_pos = '2'.
  s_fieldcat_bsidmod-tabname = '1'.
  s_fieldcat_bsidmod-fieldname = 'CHECK'.
  s_fieldcat_bsidmod-datatype = 'CHAR'.
  s_fieldcat_bsidmod-inttype = 'C'.
  s_fieldcat_bsidmod-intlen = '000004'.
  s_fieldcat_bsidmod-reptext = 'KEEP'.
  s_fieldcat_bsidmod-domname = 'CHAR4'.
  s_fieldcat_bsidmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsid IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsidmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsidmod-emphasize = '?'.
  APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod[].
  CLEAR s_fieldcat_bsidmod.

  LOOP AT t_fieldcat_bsid[] INTO s_fieldcat_bsidmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsidmod-reptext = s_fieldcat_bsidmod-fieldname.
      s_fieldcat_bsidmod-scrtext_s = s_fieldcat_bsidmod-fieldname.
      s_fieldcat_bsidmod-scrtext_m = s_fieldcat_bsidmod-fieldname.
      s_fieldcat_bsidmod-scrtext_l = s_fieldcat_bsidmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsidmod-col_pos.
    APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsidmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsidmod-fieldname = 'BELNR'
        OR s_fieldcat_bsidmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsidmod-fieldname = 'BUZEI'
        OR s_fieldcat_bsidmod-fieldname = 'KUNNR'
        OR s_fieldcat_bsidmod-fieldname = 'ZUONR'
        OR s_fieldcat_bsidmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsidmod-fieldname = 'AUGDT'
        OR s_fieldcat_bsidmod-fieldname = 'UMSKS'
        OR s_fieldcat_bsidmod-fieldname = 'UMSKZ' ).
      ELSE.
        s_fieldcat_bsidmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsidmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsidmod TO t_fieldcat_bsidmod[].
  ENDLOOP.

***FIELDCAT BSAD
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'bsad'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsad[].


  s_fieldcat_bsadmod-col_pos = '1'.
  s_fieldcat_bsadmod-tabname = '1'.
  s_fieldcat_bsadmod-fieldname = 'CONTROL'.
  s_fieldcat_bsadmod-datatype = 'CHAR'.
  s_fieldcat_bsadmod-inttype = 'C'.
  s_fieldcat_bsadmod-intlen = '000001'.
  s_fieldcat_bsadmod-reptext = ' '.
  s_fieldcat_bsadmod-domname = 'CHAR1'.
*s_fieldcat_bsadmod-emphasize = '?'.
  APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod[].
  CLEAR s_fieldcat_bsadmod.


  s_fieldcat_bsadmod-col_pos = '3'.
  s_fieldcat_bsadmod-tabname = '1'.
  s_fieldcat_bsadmod-fieldname = 'ORIG'.
  s_fieldcat_bsadmod-datatype = 'CHAR'.
  s_fieldcat_bsadmod-inttype = 'C'.
  s_fieldcat_bsadmod-intlen = '000004'.
  s_fieldcat_bsadmod-reptext = 'Origin'.
  s_fieldcat_bsadmod-domname = 'CHAR4'.
*s_fieldcat_bsadmod-emphasize = '?'.
  APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod[].
  APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod_out[].
  CLEAR s_fieldcat_bsadmod.

  s_fieldcat_bsadmod-col_pos = '2'.
  s_fieldcat_bsadmod-tabname = '1'.
  s_fieldcat_bsadmod-fieldname = 'CHECK'.
  s_fieldcat_bsadmod-datatype = 'CHAR'.
  s_fieldcat_bsadmod-inttype = 'C'.
  s_fieldcat_bsadmod-intlen = '000004'.
  s_fieldcat_bsadmod-reptext = 'KEEP'.
  s_fieldcat_bsadmod-domname = 'CHAR4'.
  s_fieldcat_bsadmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsad IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsadmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsadmod-emphasize = '?'.
  APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod[].
  CLEAR s_fieldcat_bsadmod.

  LOOP AT t_fieldcat_bsad[] INTO s_fieldcat_bsadmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsadmod-reptext = s_fieldcat_bsadmod-fieldname.
      s_fieldcat_bsadmod-scrtext_s = s_fieldcat_bsadmod-fieldname.
      s_fieldcat_bsadmod-scrtext_m = s_fieldcat_bsadmod-fieldname.
      s_fieldcat_bsadmod-scrtext_l = s_fieldcat_bsadmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsadmod-col_pos.
    APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsadmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsadmod-fieldname = 'BELNR'
        OR s_fieldcat_bsadmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsadmod-fieldname = 'BUZEI'
        OR s_fieldcat_bsadmod-fieldname = 'KUNNR'
        OR s_fieldcat_bsadmod-fieldname = 'ZUONR'
        OR s_fieldcat_bsadmod-fieldname = 'AUGBL'
        OR s_fieldcat_bsadmod-fieldname = 'AUGDT'
        OR s_fieldcat_bsadmod-fieldname = 'UMSKS'
        OR s_fieldcat_bsadmod-fieldname = 'UMSKZ' ).
      ELSE.
        s_fieldcat_bsadmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsadmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsadmod TO t_fieldcat_bsadmod[].
  ENDLOOP.

***FIELDCAT BSEC
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSEC'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsec[].


  s_fieldcat_bsecmod-col_pos = '1'.
  s_fieldcat_bsecmod-tabname = '1'.
  s_fieldcat_bsecmod-fieldname = 'CONTROL'.
  s_fieldcat_bsecmod-datatype = 'CHAR'.
  s_fieldcat_bsecmod-inttype = 'C'.
  s_fieldcat_bsecmod-intlen = '000001'.
  s_fieldcat_bsecmod-reptext = ' '.
  s_fieldcat_bsecmod-domname = 'CHAR1'.
*s_fieldcat_bsecmod-emphasize = '?'.
  APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod[].
  CLEAR s_fieldcat_bsecmod.


  s_fieldcat_bsecmod-col_pos = '3'.
  s_fieldcat_bsecmod-tabname = '1'.
  s_fieldcat_bsecmod-fieldname = 'ORIG'.
  s_fieldcat_bsecmod-datatype = 'CHAR'.
  s_fieldcat_bsecmod-inttype = 'C'.
  s_fieldcat_bsecmod-intlen = '000004'.
  s_fieldcat_bsecmod-reptext = 'Origin'.
  s_fieldcat_bsecmod-domname = 'CHAR4'.
*s_fieldcat_bsecmod-emphasize = '?'.
  APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod[].
  APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod_out[].
  CLEAR s_fieldcat_bsecmod.

  s_fieldcat_bsecmod-col_pos = '2'.
  s_fieldcat_bsecmod-tabname = '1'.
  s_fieldcat_bsecmod-fieldname = 'CHECK'.
  s_fieldcat_bsecmod-datatype = 'CHAR'.
  s_fieldcat_bsecmod-inttype = 'C'.
  s_fieldcat_bsecmod-intlen = '000004'.
  s_fieldcat_bsecmod-reptext = 'KEEP'.
  s_fieldcat_bsecmod-domname = 'CHAR4'.
  s_fieldcat_bsecmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsec IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsecmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsecmod-emphasize = '?'.
  APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod[].
  CLEAR s_fieldcat_bsecmod.

  LOOP AT t_fieldcat_bsec[] INTO s_fieldcat_bsecmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsecmod-reptext = s_fieldcat_bsecmod-fieldname.
      s_fieldcat_bsecmod-scrtext_s = s_fieldcat_bsecmod-fieldname.
      s_fieldcat_bsecmod-scrtext_m = s_fieldcat_bsecmod-fieldname.
      s_fieldcat_bsecmod-scrtext_l = s_fieldcat_bsecmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsecmod-col_pos.
    APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsecmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsecmod-fieldname = 'BELNR'
        OR s_fieldcat_bsecmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsecmod-fieldname = 'BUZEI' ).
      ELSE.
        s_fieldcat_bsecmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsecmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsecmod TO t_fieldcat_bsecmod[].
  ENDLOOP.

***FIELDCAT BSED
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSED'
    CHANGING
      ct_fieldcat      = t_fieldcat_bsed[].


  s_fieldcat_bsedmod-col_pos = '1'.
  s_fieldcat_bsedmod-tabname = '1'.
  s_fieldcat_bsedmod-fieldname = 'CONTROL'.
  s_fieldcat_bsedmod-datatype = 'CHAR'.
  s_fieldcat_bsedmod-inttype = 'C'.
  s_fieldcat_bsedmod-intlen = '000001'.
  s_fieldcat_bsedmod-reptext = ' '.
  s_fieldcat_bsedmod-domname = 'CHAR1'.
*s_fieldcat_bsedmod-emphasize = '?'.
  APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod[].
  CLEAR s_fieldcat_bsedmod.


  s_fieldcat_bsedmod-col_pos = '3'.
  s_fieldcat_bsedmod-tabname = '1'.
  s_fieldcat_bsedmod-fieldname = 'ORIG'.
  s_fieldcat_bsedmod-datatype = 'CHAR'.
  s_fieldcat_bsedmod-inttype = 'C'.
  s_fieldcat_bsedmod-intlen = '000004'.
  s_fieldcat_bsedmod-reptext = 'Origin'.
  s_fieldcat_bsedmod-domname = 'CHAR4'.
*s_fieldcat_bsedmod-emphasize = '?'.
  APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod[].
  APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod_out[].
  CLEAR s_fieldcat_bsedmod.

  s_fieldcat_bsedmod-col_pos = '2'.
  s_fieldcat_bsedmod-tabname = '1'.
  s_fieldcat_bsedmod-fieldname = 'CHECK'.
  s_fieldcat_bsedmod-datatype = 'CHAR'.
  s_fieldcat_bsedmod-inttype = 'C'.
  s_fieldcat_bsedmod-intlen = '000004'.
  s_fieldcat_bsedmod-reptext = 'KEEP'.
  s_fieldcat_bsedmod-domname = 'CHAR4'.
  s_fieldcat_bsedmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bsed IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsedmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsedmod-emphasize = '?'.
  APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod[].
  CLEAR s_fieldcat_bsedmod.

  LOOP AT t_fieldcat_bsed[] INTO s_fieldcat_bsedmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsedmod-reptext = s_fieldcat_bsedmod-fieldname.
      s_fieldcat_bsedmod-scrtext_s = s_fieldcat_bsedmod-fieldname.
      s_fieldcat_bsedmod-scrtext_m = s_fieldcat_bsedmod-fieldname.
      s_fieldcat_bsedmod-scrtext_l = s_fieldcat_bsedmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsedmod-col_pos.
    APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod_out[].
    IF p_modif IS NOT INITIAL.
      s_fieldcat_bsedmod-edit = 'X'.
    ELSE.
      s_fieldcat_bsedmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsedmod TO t_fieldcat_bsedmod[].
  ENDLOOP.

***FIELDCAT bset
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSET'
    CHANGING
      ct_fieldcat      = t_fieldcat_bset[].


  s_fieldcat_bsetmod-col_pos = '1'.
  s_fieldcat_bsetmod-tabname = '1'.
  s_fieldcat_bsetmod-fieldname = 'CONTROL'.
  s_fieldcat_bsetmod-datatype = 'CHAR'.
  s_fieldcat_bsetmod-inttype = 'C'.
  s_fieldcat_bsetmod-intlen = '000001'.
  s_fieldcat_bsetmod-reptext = ' '.
  s_fieldcat_bsetmod-domname = 'CHAR1'.
*s_fieldcat_bsetmod-emphasize = '?'.
  APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod[].
  CLEAR s_fieldcat_bsetmod.


  s_fieldcat_bsetmod-col_pos = '3'.
  s_fieldcat_bsetmod-tabname = '1'.
  s_fieldcat_bsetmod-fieldname = 'ORIG'.
  s_fieldcat_bsetmod-datatype = 'CHAR'.
  s_fieldcat_bsetmod-inttype = 'C'.
  s_fieldcat_bsetmod-intlen = '000004'.
  s_fieldcat_bsetmod-reptext = 'Origin'.
  s_fieldcat_bsetmod-domname = 'CHAR4'.
*s_fieldcat_bsetmod-emphasize = '?'.
  APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod[].
  APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod_out[].
  CLEAR s_fieldcat_bsetmod.

  s_fieldcat_bsetmod-col_pos = '2'.
  s_fieldcat_bsetmod-tabname = '1'.
  s_fieldcat_bsetmod-fieldname = 'CHECK'.
  s_fieldcat_bsetmod-datatype = 'CHAR'.
  s_fieldcat_bsetmod-inttype = 'C'.
  s_fieldcat_bsetmod-intlen = '000004'.
  s_fieldcat_bsetmod-reptext = 'KEEP'.
  s_fieldcat_bsetmod-domname = 'CHAR4'.
  s_fieldcat_bsetmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bset IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bsetmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bsetmod-emphasize = '?'.
  APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod[].
  CLEAR s_fieldcat_bsetmod.

  LOOP AT t_fieldcat_bset[] INTO s_fieldcat_bsetmod.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_bsetmod-reptext = s_fieldcat_bsetmod-fieldname.
      s_fieldcat_bsetmod-scrtext_s = s_fieldcat_bsetmod-fieldname.
      s_fieldcat_bsetmod-scrtext_m = s_fieldcat_bsetmod-fieldname.
      s_fieldcat_bsetmod-scrtext_l = s_fieldcat_bsetmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bsetmod-col_pos.
    APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bsetmod-fieldname = 'BUKRS'
        OR s_fieldcat_bsetmod-fieldname = 'BELNR'
        OR s_fieldcat_bsetmod-fieldname = 'GJAHR'
        OR s_fieldcat_bsetmod-fieldname = 'BUZEI' ).
      ELSE.
        s_fieldcat_bsetmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bsetmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bsetmod TO t_fieldcat_bsetmod[].
  ENDLOOP.


***FIELDCAT BSE_CLR
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSE_CLR'
    CHANGING
      ct_fieldcat      = t_fieldcat_bse_clr[].


  s_fieldcat_bse_clrmod-col_pos = '1'.
  s_fieldcat_bse_clrmod-tabname = '1'.
  s_fieldcat_bse_clrmod-fieldname = 'CONTROL'.
  s_fieldcat_bse_clrmod-datatype = 'CHAR'.
  s_fieldcat_bse_clrmod-inttype = 'C'.
  s_fieldcat_bse_clrmod-intlen = '000001'.
  s_fieldcat_bse_clrmod-reptext = ' '.
  s_fieldcat_bse_clrmod-domname = 'CHAR1'.
*s_fieldcat_bse_clrmod-emphasize = '?'.
  APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod[].
  CLEAR s_fieldcat_bse_clrmod.


  s_fieldcat_bse_clrmod-col_pos = '3'.
  s_fieldcat_bse_clrmod-tabname = '1'.
  s_fieldcat_bse_clrmod-fieldname = 'ORIG'.
  s_fieldcat_bse_clrmod-datatype = 'CHAR'.
  s_fieldcat_bse_clrmod-inttype = 'C'.
  s_fieldcat_bse_clrmod-intlen = '000004'.
  s_fieldcat_bse_clrmod-reptext = 'Origin'.
  s_fieldcat_bse_clrmod-domname = 'CHAR4'.
*s_fieldcat_bse_clrmod-emphasize = '?'.
  APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod[].
  APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod_out[].
  CLEAR s_fieldcat_bse_clrmod.

  s_fieldcat_bse_clrmod-col_pos = '2'.
  s_fieldcat_bse_clrmod-tabname = '1'.
  s_fieldcat_bse_clrmod-fieldname = 'CHECK'.
  s_fieldcat_bse_clrmod-datatype = 'CHAR'.
  s_fieldcat_bse_clrmod-inttype = 'C'.
  s_fieldcat_bse_clrmod-intlen = '000004'.
  s_fieldcat_bse_clrmod-reptext = 'KEEP'.
  s_fieldcat_bse_clrmod-domname = 'CHAR4'.
  s_fieldcat_bse_clrmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bse_clr IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bse_clrmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bse_clrmod-emphasize = '?'.
  APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod[].
  CLEAR s_fieldcat_bse_clrmod.

  LOOP AT t_fieldcat_bse_clr[] INTO s_fieldcat_bse_clrmod.
    CLEAR s_fieldcat_bsegmod-no_out.
    IF NOT ( s_fieldcat_bseg_addmod-fieldname = 'BUKRS'
OR s_fieldcat_bseg_addmod-fieldname = 'BELNR'
OR s_fieldcat_bseg_addmod-fieldname = 'GJAHR'
         OR s_fieldcat_bseg_addmod-fieldname = 'BUZEI'
         OR s_fieldcat_bseg_addmod-fieldname = 'AGZEI'
         OR s_fieldcat_bseg_addmod-fieldname = 'AGBUZ'
         OR s_fieldcat_bseg_addmod-fieldname = 'WAERS'
         OR s_fieldcat_bseg_addmod-fieldname = 'CLRIN'
      OR s_fieldcat_bseg_addmod-fieldname = 'SHKZG'
         OR s_fieldcat_bseg_addmod-fieldname = 'BUKRS_CLR'
      OR s_fieldcat_bseg_addmod-fieldname = 'BELNR_CLR'
         OR s_fieldcat_bseg_addmod-fieldname = 'WRBTR'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBTR'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBE2'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBE3'
         OR s_fieldcat_bseg_addmod-fieldname = 'GJAHR_CLR'
         OR s_fieldcat_bseg_addmod-fieldname = 'INDEX_CLR'
 ).
      s_fieldcat_bseg_addmod-no_out = 'X'.
    ENDIF.

    IF p_tech IS NOT INITIAL.
      s_fieldcat_bse_clrmod-reptext = s_fieldcat_bse_clrmod-fieldname.
      s_fieldcat_bse_clrmod-scrtext_s = s_fieldcat_bse_clrmod-fieldname.
      s_fieldcat_bse_clrmod-scrtext_m = s_fieldcat_bse_clrmod-fieldname.
      s_fieldcat_bse_clrmod-scrtext_l = s_fieldcat_bse_clrmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bse_clrmod-col_pos.
    APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bse_clrmod-fieldname = 'BUKRS_CLR'
        OR s_fieldcat_bse_clrmod-fieldname = 'BELNR_CLR'
        OR s_fieldcat_bse_clrmod-fieldname = 'GJAHR_CLR'
        OR s_fieldcat_bse_clrmod-fieldname = 'INDEX_CLR' ).
      ELSE.
        s_fieldcat_bse_clrmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bse_clrmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bse_clrmod TO t_fieldcat_bse_clrmod[].
  ENDLOOP.

***FIELDCAT BSEG_ADD
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'BSEG_ADD'
    CHANGING
      ct_fieldcat      = t_fieldcat_bseg_add[].


  s_fieldcat_bseg_addmod-col_pos = '1'.
  s_fieldcat_bseg_addmod-tabname = '1'.
  s_fieldcat_bseg_addmod-fieldname = 'CONTROL'.
  s_fieldcat_bseg_addmod-datatype = 'CHAR'.
  s_fieldcat_bseg_addmod-inttype = 'C'.
  s_fieldcat_bseg_addmod-intlen = '000001'.
  s_fieldcat_bseg_addmod-reptext = ' '.
  s_fieldcat_bseg_addmod-domname = 'CHAR1'.
*s_fieldcat_bseg_addmod-emphasize = '?'.
  APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod[].
  CLEAR s_fieldcat_bseg_addmod.


  s_fieldcat_bseg_addmod-col_pos = '3'.
  s_fieldcat_bseg_addmod-tabname = '1'.
  s_fieldcat_bseg_addmod-fieldname = 'ORIG'.
  s_fieldcat_bseg_addmod-datatype = 'CHAR'.
  s_fieldcat_bseg_addmod-inttype = 'C'.
  s_fieldcat_bseg_addmod-intlen = '000004'.
  s_fieldcat_bseg_addmod-reptext = 'Origin'.
  s_fieldcat_bseg_addmod-domname = 'CHAR4'.
*s_fieldcat_bseg_addmod-emphasize = '?'.
  APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod[].
  APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod_out[].
  CLEAR s_fieldcat_bseg_addmod.

  s_fieldcat_bseg_addmod-col_pos = '2'.
  s_fieldcat_bseg_addmod-tabname = '1'.
  s_fieldcat_bseg_addmod-fieldname = 'CHECK'.
  s_fieldcat_bseg_addmod-datatype = 'CHAR'.
  s_fieldcat_bseg_addmod-inttype = 'C'.
  s_fieldcat_bseg_addmod-intlen = '000004'.
  s_fieldcat_bseg_addmod-reptext = 'KEEP'.
  s_fieldcat_bseg_addmod-domname = 'CHAR4'.
  s_fieldcat_bseg_addmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_bseg_add IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_bseg_addmod-edit = 'X'.
  ENDIF.
*s_fieldcat_bseg_addmod-emphasize = '?'.
  APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod[].
  CLEAR s_fieldcat_bseg_addmod.

  LOOP AT t_fieldcat_bseg_add[] INTO s_fieldcat_bseg_addmod.
    CLEAR s_fieldcat_bsegmod-no_out.
    IF NOT ( s_fieldcat_bseg_addmod-fieldname = 'BUKRS'
OR s_fieldcat_bseg_addmod-fieldname = 'BELNR'
OR s_fieldcat_bseg_addmod-fieldname = 'GJAHR'
         OR s_fieldcat_bseg_addmod-fieldname = 'BUZEI'
         OR s_fieldcat_bseg_addmod-fieldname = 'AUGDT'
         OR s_fieldcat_bseg_addmod-fieldname = 'AUGCP'
         OR s_fieldcat_bseg_addmod-fieldname = 'AUGBL'
         OR s_fieldcat_bseg_addmod-fieldname = 'BSCHL'
      OR s_fieldcat_bseg_addmod-fieldname = 'SHKZG'
         OR s_fieldcat_bseg_addmod-fieldname = 'KOART'
      OR s_fieldcat_bseg_addmod-fieldname = 'LDGRP'
         OR s_fieldcat_bseg_addmod-fieldname = 'WRBTR'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBTR'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBE2'
         OR s_fieldcat_bseg_addmod-fieldname = 'DMBE3'
         OR s_fieldcat_bseg_addmod-fieldname = 'PSWBT'
         OR s_fieldcat_bseg_addmod-fieldname = 'PSWSL'
         OR s_fieldcat_bseg_addmod-fieldname = 'XLGCLR'
         OR s_fieldcat_bseg_addmod-fieldname = 'HKONT'
 ).
      s_fieldcat_bseg_addmod-no_out = 'X'.
    ENDIF.

    IF p_tech IS NOT INITIAL.
      s_fieldcat_bseg_addmod-reptext = s_fieldcat_bseg_addmod-fieldname.
      s_fieldcat_bseg_addmod-scrtext_s = s_fieldcat_bseg_addmod-fieldname.
      s_fieldcat_bseg_addmod-scrtext_m = s_fieldcat_bseg_addmod-fieldname.
      s_fieldcat_bseg_addmod-scrtext_l = s_fieldcat_bseg_addmod-fieldname.
    ENDIF.
    ADD 3 TO s_fieldcat_bseg_addmod-col_pos.
    APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_bseg_addmod-fieldname = 'BUKRS'
        OR s_fieldcat_bseg_addmod-fieldname = 'BELNR'
        OR s_fieldcat_bseg_addmod-fieldname = 'GJAHR'
        OR s_fieldcat_bseg_addmod-fieldname = 'BUZEI' ).
      ELSE.
        s_fieldcat_bseg_addmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_bseg_addmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_bseg_addmod TO t_fieldcat_bseg_addmod[].
  ENDLOOP.

***FIELDCAT GLU1
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active  = 'X'
      i_structure_name = 'GLU1'
    CHANGING
      ct_fieldcat      = t_fieldcat_glu1[].

  s_fieldcat_glu1modmod-col_pos = '1'.
  s_fieldcat_glu1modmod-tabname = '1'.
  s_fieldcat_glu1modmod-fieldname = 'CONTROL'.
  s_fieldcat_glu1modmod-datatype = 'CHAR'.
  s_fieldcat_glu1modmod-inttype = 'C'.
  s_fieldcat_glu1modmod-intlen = '000001'.
  s_fieldcat_glu1modmod-reptext = ' '.
  s_fieldcat_glu1modmod-domname = 'CHAR1'.
*s_fieldcat_glu1modmod-emphasize = '?'.
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod[].
  CLEAR s_fieldcat_glu1modmod.


  s_fieldcat_glu1modmod-col_pos = '3'.
  s_fieldcat_glu1modmod-tabname = '1'.
  s_fieldcat_glu1modmod-fieldname = 'ORIG'.
  s_fieldcat_glu1modmod-datatype = 'CHAR'.
  s_fieldcat_glu1modmod-inttype = 'C'.
  s_fieldcat_glu1modmod-intlen = '000004'.
  s_fieldcat_glu1modmod-reptext = 'Origin'.
  s_fieldcat_glu1modmod-domname = 'CHAR4'.
*s_fieldcat_glu1modmod-emphasize = '?'.
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod[].
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod_out[].
  CLEAR s_fieldcat_glu1modmod.

  s_fieldcat_glu1modmod-col_pos = '2'.
  s_fieldcat_glu1modmod-tabname = '1'.
  s_fieldcat_glu1modmod-fieldname = 'CHECK'.
  s_fieldcat_glu1modmod-datatype = 'CHAR'.
  s_fieldcat_glu1modmod-inttype = 'C'.
  s_fieldcat_glu1modmod-intlen = '000004'.
  s_fieldcat_glu1modmod-reptext = 'KEEP'.
  s_fieldcat_glu1modmod-domname = 'CHAR4'.
  s_fieldcat_glu1modmod-checkbox = 'X'.
  IF p_test IS INITIAL
        AND NOT ( upflag_glu1mod IS INITIAL
    AND p_update = 'X' ).
    s_fieldcat_glu1modmod-edit = 'X'.
  ENDIF.
*s_fieldcat_glu1modmod-emphasize = '?'.
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod[].
  CLEAR s_fieldcat_glu1modmod.

  s_fieldcat_glu1modmod-col_pos = '4'.
  s_fieldcat_glu1modmod-tabname = '1'.
  s_fieldcat_glu1modmod-fieldname = 'ZZZ_TABNAME'.
  s_fieldcat_glu1modmod-datatype = 'CHAR'.
  s_fieldcat_glu1modmod-inttype = 'C'.
  s_fieldcat_glu1modmod-intlen = '000015'.
  s_fieldcat_glu1modmod-reptext = 'TABNAME'.
  s_fieldcat_glu1modmod-domname = 'CHAR15'.
*s_fieldcat_glu1modmod-emphasize = '?'.
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod[].
  APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod_out[].
  CLEAR s_fieldcat_glu1modmod.

  LOOP AT t_fieldcat_glu1[] INTO s_fieldcat_glu1modmod.
    CLEAR s_fieldcat_glu1modmod-no_out.
    IF NOT ( s_fieldcat_glu1modmod-fieldname = 'RBUKRS'
OR s_fieldcat_glu1modmod-fieldname = 'BELNR'
OR s_fieldcat_glu1modmod-fieldname = 'GJAHR'
     OR s_fieldcat_glu1modmod-fieldname = 'BUZEI'
      OR s_fieldcat_glu1modmod-fieldname = 'RLDNR'
     OR s_fieldcat_glu1modmod-fieldname = 'AUGDT'
     OR s_fieldcat_glu1modmod-fieldname = 'AUGCP'
     OR s_fieldcat_glu1modmod-fieldname = 'AUGBL'
     OR s_fieldcat_glu1modmod-fieldname = 'BSCHL'
  OR s_fieldcat_glu1modmod-fieldname = 'DRCRK'
     OR s_fieldcat_glu1modmod-fieldname = 'KOART'
     OR s_fieldcat_glu1modmod-fieldname = 'WRBTR'
     OR s_fieldcat_glu1modmod-fieldname = 'DOCLN'
      OR s_fieldcat_glu1modmod-fieldname = 'RTCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RWCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RHCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RKCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'ROCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RVCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RBCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RCCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RDCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RECUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RFCUR'
      OR s_fieldcat_glu1modmod-fieldname = 'RGCUR'
OR s_fieldcat_glu1modmod-fieldname = 'HSL'
      OR s_fieldcat_glu1modmod-fieldname = 'KSL'
      OR s_fieldcat_glu1modmod-fieldname = 'OSL'
      OR s_fieldcat_glu1modmod-fieldname = 'VSL'
                OR s_fieldcat_glu1modmod-fieldname = 'BSL'
      OR s_fieldcat_glu1modmod-fieldname = 'LINETYPE'
      OR s_fieldcat_glu1modmod-fieldname = 'KTOSL'
      OR s_fieldcat_glu1modmod-fieldname = 'CSL'
      OR s_fieldcat_glu1modmod-fieldname = 'DSL'
      OR s_fieldcat_glu1modmod-fieldname = 'ESL'
      OR s_fieldcat_glu1modmod-fieldname = 'FSL'
      OR s_fieldcat_glu1modmod-fieldname = 'GSL'
      OR s_fieldcat_glu1modmod-fieldname = 'TSL'
      OR s_fieldcat_glu1modmod-fieldname = 'WSL'
     OR s_fieldcat_glu1modmod-fieldname = 'PSWBT'
     OR s_fieldcat_glu1modmod-fieldname = 'PSWSL'
     OR s_fieldcat_glu1modmod-fieldname = 'XHRES'
     OR s_fieldcat_glu1modmod-fieldname = 'XOPVW'
     OR s_fieldcat_glu1modmod-fieldname = 'XLGCLR'
     OR s_fieldcat_glu1modmod-fieldname = 'RACCT'
     OR s_fieldcat_glu1modmod-fieldname = 'LIFNR'
     OR s_fieldcat_glu1modmod-fieldname = 'KUNNR'
      OR s_fieldcat_glu1modmod-fieldname = 'MIG_SOURCE'
OR s_fieldcat_glu1modmod-fieldname = 'BLART'
OR s_fieldcat_glu1modmod-fieldname = 'BLDAT'
OR s_fieldcat_glu1modmod-fieldname = 'BUDAT'
OR s_fieldcat_glu1modmod-fieldname = 'POPER'
OR s_fieldcat_glu1modmod-fieldname = 'USNAM'
OR s_fieldcat_glu1modmod-fieldname = 'WAERS'
OR s_fieldcat_glu1modmod-fieldname = 'HWAER'
OR s_fieldcat_glu1modmod-fieldname = 'HWAE2'
OR s_fieldcat_glu1modmod-fieldname = 'HWAE3'
OR s_fieldcat_glu1modmod-fieldname = 'BSTAT'
OR s_fieldcat_glu1modmod-fieldname = 'AWKEY'
OR s_fieldcat_glu1modmod-fieldname = 'AWTYP' ).
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpk IS INITIAL
      AND ( s_fieldcat_glu1modmod-fieldname = 'KSL'
      OR s_fieldcat_glu1modmod-fieldname = 'RKCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpo IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'OSL'
  OR s_fieldcat_glu1modmod-fieldname = 'ROCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpv IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'VSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RVCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpb IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'BSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RBCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpc IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'CSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RCCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpd IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'DSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RDCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpe IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'ESL'
  OR s_fieldcat_glu1modmod-fieldname = 'RECUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpf IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'FSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RFCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    IF gs_finsc_ld_cmp_disp-curtpg IS INITIAL
  AND ( s_fieldcat_glu1modmod-fieldname = 'GSL'
  OR s_fieldcat_glu1modmod-fieldname = 'RGCUR').
      s_fieldcat_glu1modmod-no_out = 'X'.
    ENDIF.

    CASE s_fieldcat_glu1modmod-fieldname.
      WHEN 'RYEAR'.
        s_fieldcat_glu1modmod-col_pos = '7'.
      WHEN 'BELNR'.
        s_fieldcat_glu1modmod-col_pos = '8'.
      WHEN 'RLDNR'.
        s_fieldcat_glu1modmod-col_pos = '5'.
      WHEN 'RBUKRS'.
        s_fieldcat_glu1modmod-col_pos = '6'.
      WHEN 'DOCLN'.
        s_fieldcat_glu1modmod-col_pos = '9'.
      WHEN OTHERS.
        ADD 10 TO s_fieldcat_glu1modmod-col_pos.
        s_fieldcat_glu1modmod-emphasize = ' '.
        s_fieldcat_glu1modmod-key = ' '.
    ENDCASE.
    IF p_tech IS NOT INITIAL.
      s_fieldcat_glu1modmod-reptext = s_fieldcat_glu1modmod-fieldname.
      s_fieldcat_glu1modmod-scrtext_s = s_fieldcat_glu1modmod-fieldname.
      s_fieldcat_glu1modmod-scrtext_m = s_fieldcat_glu1modmod-fieldname.
      s_fieldcat_glu1modmod-scrtext_l = s_fieldcat_glu1modmod-fieldname.
    ENDIF.
    APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod_out[].
    IF p_modif IS NOT INITIAL.
      IF p_edkey IS INITIAL AND
        ( s_fieldcat_glu1modmod-fieldname = 'RBUKRS'
        OR s_fieldcat_glu1modmod-fieldname = 'DOCNR'
        OR s_fieldcat_glu1modmod-fieldname = 'BELNR'
        OR s_fieldcat_glu1modmod-fieldname = 'RYEAR'
        OR s_fieldcat_glu1modmod-fieldname = 'DOCLN'
        OR s_fieldcat_glu1modmod-fieldname = 'RLDNR' ).
      ELSE.
        s_fieldcat_glu1modmod-edit = 'X'.
      ENDIF.
    ELSE.
      s_fieldcat_glu1modmod-col_opt = 'X'.
    ENDIF.
    APPEND s_fieldcat_glu1modmod TO t_fieldcat_glu1modmod[].
  ENDLOOP.
ENDFORM.                    "build_fieldcat

*&---------------------------------------------------------------------*
*&      Form  reverse_protocol
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_protocol.

  IF gt_bkpf IS NOT INITIAL.
    PERFORM reverse_bkpf.
  ENDIF.

  IF gt_bseg IS NOT INITIAL.
    PERFORM reverse_bseg.
  ENDIF.

  IF gt_bsec IS NOT INITIAL.
    PERFORM reverse_bsec.
  ENDIF.

  IF gt_bsed IS NOT INITIAL.
    PERFORM reverse_bsed.
  ENDIF.

  IF gt_bset IS NOT INITIAL.
    PERFORM reverse_bset.
  ENDIF.

  IF gt_bse_clr IS NOT INITIAL.
    PERFORM reverse_bse_clr.
  ENDIF.

  IF gt_bseg_add IS NOT INITIAL.
    PERFORM reverse_bseg_add.
  ENDIF.

  IF gt_bsis IS NOT INITIAL.
    PERFORM reverse_bsis.
  ENDIF.

  IF gt_bsas IS NOT INITIAL.
    PERFORM reverse_bsas.
  ENDIF.

  IF gt_bsik IS NOT INITIAL.
    PERFORM reverse_bsik.
  ENDIF.

  IF gt_bsak IS NOT INITIAL.
    PERFORM reverse_bsak.
  ENDIF.

  IF gt_bsid IS NOT INITIAL.
    PERFORM reverse_bsid.
  ENDIF.

  IF gt_bsad IS NOT INITIAL.
    PERFORM reverse_bsad.
  ENDIF.

  IF gt_splinfo IS NOT INITIAL.
    PERFORM reverse_splinfo.
  ENDIF.

  IF gt_splinfo_val IS NOT INITIAL.
    PERFORM reverse_splinfo_val.
  ENDIF.

  IF gt_glu1mod IS NOT INITIAL.
    PERFORM reverse_gl.
  ENDIF.

ENDFORM.                    "reverse_protocol

*&---------------------------------------------------------------------*
*&      Form  reverse_gl
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_gl.
  DATA ls_glu1modmod LIKE glu1moddisp.
  DATA ls_glu1mod LIKE glu1mod.
  DATA ls_glu1mod2 LIKE glu1mod.
  DATA ls_glu1modmod2 LIKE LINE OF gt_glu1mod.
  DATA ls_ins_gl TYPE REF TO data.
  DATA ls_ins_gl2 TYPE REF TO data.
  DATA select_count TYPE i.
  DATA BEGIN OF gl_reverse_count.
  DATA: tabname LIKE ls_glu1mod-zzz_tabname,
        count   TYPE i.
  DATA END OF gl_reverse_count.
  DATA ls_gl_reverse_count LIKE gl_reverse_count.
  DATA lt_gl_reverse_count LIKE TABLE OF ls_gl_reverse_count.
  FIELD-SYMBOLS: <ls_ins_gl>  TYPE any,
                 <ls_ins_gl2> TYPE any.
  DATA ld_subrc TYPE i.
  DATA glu1_reverse_count TYPE i.

  LOOP AT gt_glu1mod INTO ls_glu1modmod.
    MOVE-CORRESPONDING ls_glu1modmod TO ls_glu1mod.

** Reconvert data into gl data.
    CREATE DATA ls_ins_gl TYPE (ls_glu1mod-zzz_tabname).
    ASSIGN ls_ins_gl->* TO <ls_ins_gl>.
    CREATE DATA ls_ins_gl2 TYPE (ls_glu1mod-zzz_tabname).
    ASSIGN ls_ins_gl->* TO <ls_ins_gl2>.
    MOVE-CORRESPONDING ls_glu1mod TO <ls_ins_gl>.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM (ls_glu1mod-zzz_tabname)
       INTO select_count
      WHERE ryear = ls_glu1mod-ryear
      AND belnr = ls_glu1mod-belnr
      AND rldnr = ls_glu1mod-rldnr
      AND rbukrs = ls_glu1mod-rbukrs
      AND docln = ls_glu1mod-docln
     .

** Insert data to database.
    IF ls_glu1modmod-check = ' '.
      IF ls_glu1modmod-orig = 'DTAB'
        AND ls_glu1modmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (ls_glu1mod-zzz_tabname) FROM <ls_ins_gl>.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5B@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REINSERT: G/L entry reinserted'.
            ELSE.
              gs_protocol-message = 'REINSERT: ACDOCA entry reinserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-bukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-gjahr.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-type = '@5C@'.
          IF acdoca_active = 0.
            gs_protocol-message = 'REINSERT: G/L entry still existing'.
          ELSE.
            gs_protocol-message = 'REINSERT: ACDOCA entry still existing'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (ls_glu1mod-zzz_tabname) FROM <ls_ins_gl>.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REINSERT: G/L entry still existing'.
            ELSE.
              gs_protocol-message = 'REINSERT: ACDOCA entry still existing'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_glu1modmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (ls_glu1mod-zzz_tabname)
          FROM <ls_ins_gl>.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5B@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REVERSE: G/L entry updated'.
            ELSE.
              gs_protocol-message = 'REVERSE: ACDOCA entry updated'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REVERSE: G/L entry not updated'.
            ELSE.
              gs_protocol-message = 'REVERSE: ACDOCA entry not updated'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-bukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-gjahr.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-type = '@5C@'.
          IF acdoca_active = 0.
            gs_protocol-message = 'REVERSE: No G/L Entry found to update'.
          ELSE.
            gs_protocol-message = 'REVERSE: No ACDOCA Entry found to update'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_glu1modmod-pairing IS NOT INITIAL.
          LOOP AT gt_glu1mod INTO ls_glu1modmod2
            WHERE pairing = ls_glu1modmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_glu1modmod2 TO ls_glu1mod2.
            MOVE-CORRESPONDING ls_glu1mod2 TO <ls_ins_gl2>.
            DELETE (ls_glu1mod-zzz_tabname) FROM <ls_ins_gl>.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (ls_glu1mod-zzz_tabname)
            FROM <ls_ins_gl2>.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_glu1mod-bukrs.
              gs_protocol-belnr = ls_glu1mod-belnr.
              gs_protocol-gjahr = ls_glu1mod-gjahr.
              gs_protocol-buzei = ls_glu1mod-docln.
              gs_protocol-rldnr = ls_glu1mod-rldnr.
              gs_protocol-type = '@5B@'.
              IF acdoca_active = 0.
                gs_protocol-message = 'REVERSE-KEY: G/L entry updated'.
              ELSE.
                gs_protocol-message = 'REVERSE-KEY: ACDOCA entry updated'.
              ENDIF.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (ls_glu1mod-zzz_tabname) FROM <ls_ins_gl2>.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_glu1mod-bukrs.
              gs_protocol-belnr = ls_glu1mod-belnr.
              gs_protocol-gjahr = ls_glu1mod-gjahr.
              gs_protocol-buzei = ls_glu1mod-docln.
              gs_protocol-rldnr = ls_glu1mod-rldnr.
              gs_protocol-type = '@5C@'.
              IF acdoca_active = 0.
                gs_protocol-message = 'REVERSE-KEY: G/L entry not updated'.
              ELSE.
                gs_protocol-message = 'REVERSE-KEY: ACDOCA entry not updated'.
              ENDIF.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_glu1modmod-check = 'X'
      AND ls_glu1modmod-pairing IS INITIAL.
      IF ls_glu1modmod-orig = 'BUIL'
        OR ls_glu1modmod-orig = 'INSE'
        OR ls_glu1modmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (ls_glu1mod-zzz_tabname)
          FROM <ls_ins_gl>.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5B@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REMOVE: G/L entry inserted'.
            ELSE.
              gs_protocol-message = 'REMOVE: ACDOCA entry inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_glu1mod-bukrs.
            gs_protocol-belnr = ls_glu1mod-belnr.
            gs_protocol-gjahr = ls_glu1mod-gjahr.
            gs_protocol-buzei = ls_glu1mod-docln.
            gs_protocol-rldnr = ls_glu1mod-rldnr.
            gs_protocol-type = '@5C@'.
            IF acdoca_active = 0.
              gs_protocol-message = 'REMOVE: G/L entry not inserted'.
            ELSE.
              gs_protocol-message = 'REMOVE: ACDOCA entry not inserted'.
            ENDIF.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_glu1mod-bukrs.
          gs_protocol-belnr = ls_glu1mod-belnr.
          gs_protocol-gjahr = ls_glu1mod-gjahr.
          gs_protocol-buzei = ls_glu1mod-docln.
          gs_protocol-rldnr = ls_glu1mod-rldnr.
          gs_protocol-type = '@5C@'.
          IF acdoca_active = 0.
            gs_protocol-message = 'REMOVE: G/L entry already existing'.
          ELSE.
            gs_protocol-message = 'REMOVE: ACDOCA entry already existing'.
          ENDIF.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_gl

*&---------------------------------------------------------------------*
*&      Form  reverse_bkpf
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bkpf.
  DATA ls_bkpfmod LIKE bkpfmoddisp.
  DATA ls_bkpfmod2 LIKE bkpfmoddisp.
  DATA ls_bkpf TYPE bkpf.
  DATA ls_bkpf2 TYPE bkpf.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bkpf_reverse_count TYPE i.

  LOOP AT gt_bkpf INTO ls_bkpfmod.
    MOVE-CORRESPONDING ls_bkpfmod TO ls_bkpf.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bkpf
      INTO select_count
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

** Insert data to database.
    IF ls_bkpfmod-check = ' '.
      IF ls_bkpfmod-orig = 'DTAB'
        AND ls_bkpfmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bkpf FROM ls_bkpf.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BKPF entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BKPF entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bkpf FROM ls_bkpf.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BKPF entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bkpfmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bkpf
          FROM ls_bkpf.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BKPF entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BKPF entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BKPF Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bkpfmod-pairing IS NOT INITIAL.
          LOOP AT gt_bkpf INTO ls_bkpfmod2
            WHERE pairing = ls_bkpfmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bkpfmod2 TO ls_bkpf2.
            DELETE bkpf FROM ls_bkpf.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bkpf
            FROM ls_bkpf2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bkpf-bukrs.
              gs_protocol-belnr = ls_bkpf-belnr.
              gs_protocol-gjahr = ls_bkpf-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BKPF entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bkpf FROM ls_bkpf.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bkpf-bukrs.
              gs_protocol-belnr = ls_bkpf-belnr.
              gs_protocol-gjahr = ls_bkpf-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BKPF entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bkpfmod-check = 'X'
      AND ls_bkpfmod-pairing IS INITIAL.
      IF ls_bkpfmod-orig = 'BUIL'
        OR ls_bkpfmod-orig = 'INSE'
        OR ls_bkpfmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bkpf
          FROM ls_bkpf.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BKPF entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bkpf-bukrs.
            gs_protocol-belnr = ls_bkpf-belnr.
            gs_protocol-gjahr = ls_bkpf-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BKPF entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bkpf-bukrs.
          gs_protocol-belnr = ls_bkpf-belnr.
          gs_protocol-gjahr = ls_bkpf-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BKPF entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bkpf

*&---------------------------------------------------------------------*
*&      Form  reverse_bseg
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bseg.
  DATA ls_bsegmod LIKE bsegmoddisp.
  DATA ls_bsegmod2 LIKE bsegmoddisp.
  DATA ls_bseg TYPE bseg.
  DATA ls_bseg2 TYPE bseg.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bseg_reverse_count TYPE i.

  LOOP AT gt_bseg INTO ls_bsegmod.
    MOVE-CORRESPONDING ls_bsegmod TO ls_bseg.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bseg
       INTO select_count
      WHERE bukrs = ls_bseg-bukrs
      AND belnr = ls_bseg-belnr
      AND gjahr = ls_bseg-gjahr
     .

** Insert data to database.
    IF ls_bsegmod-check = ' '.
      IF ls_bsegmod-orig = 'DTAB'
        AND ls_bsegmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bseg FROM ls_bseg.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSEG entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg-bukrs.
          gs_protocol-belnr = ls_bseg-belnr.
          gs_protocol-gjahr = ls_bseg-gjahr.
          gs_protocol-buzei = ls_bseg-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSEG entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bseg FROM ls_bseg.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSEG entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsegmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bseg
          FROM ls_bseg.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSEG entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSEG entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg-bukrs.
          gs_protocol-belnr = ls_bseg-belnr.
          gs_protocol-gjahr = ls_bseg-gjahr.
          gs_protocol-buzei = ls_bseg-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSEG Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsegmod-pairing IS NOT INITIAL.
          LOOP AT gt_bseg INTO ls_bsegmod2
            WHERE pairing = ls_bsegmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsegmod2 TO ls_bseg2.
            DELETE bseg FROM ls_bseg.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bseg
            FROM ls_bseg2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg-bukrs.
              gs_protocol-belnr = ls_bseg-belnr.
              gs_protocol-buzei = ls_bseg-buzei.
              gs_protocol-gjahr = ls_bseg-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSEG entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bseg FROM ls_bseg.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg-bukrs.
              gs_protocol-belnr = ls_bseg-belnr.
              gs_protocol-buzei = ls_bseg-buzei.
              gs_protocol-gjahr = ls_bseg-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSEG entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsegmod-check = 'X'
      AND ls_bsegmod-pairing IS INITIAL.
      IF ls_bsegmod-orig = 'BUIL'
        OR ls_bsegmod-orig = 'INSE'
        OR ls_bsegmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bseg
          FROM ls_bseg.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSEG entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg-bukrs.
            gs_protocol-belnr = ls_bseg-belnr.
            gs_protocol-gjahr = ls_bseg-gjahr.
            gs_protocol-buzei = ls_bseg-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSEG entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg-bukrs.
          gs_protocol-belnr = ls_bseg-belnr.
          gs_protocol-gjahr = ls_bseg-gjahr.
          gs_protocol-buzei = ls_bseg-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSEG entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bseg

*&---------------------------------------------------------------------*
*&      Form  reverse_bsis
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsis.
  DATA ls_bsismod LIKE bsismoddisp.
  DATA ls_bsismod2 LIKE bsismoddisp.
  DATA ls_bsis TYPE bsis.
  DATA ls_bsis2 TYPE bsis.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsis_reverse_count TYPE i.

  LOOP AT gt_bsis INTO ls_bsismod.
    MOVE-CORRESPONDING ls_bsismod TO ls_bsis.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsis
      INTO select_count
      WHERE bukrs = ls_bsis-bukrs
      AND belnr = ls_bsis-belnr
      AND gjahr = ls_bsis-gjahr
      .

** Insert data to database.
    IF ls_bsismod-check = ' '.
      IF ls_bsismod-orig = 'DTAB'
        AND ls_bsismod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsis) FROM ls_bsis.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSIS entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsis-bukrs.
          gs_protocol-belnr = ls_bsis-belnr.
          gs_protocol-gjahr = ls_bsis-gjahr.
          gs_protocol-buzei = ls_bsis-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSIS entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsis) FROM ls_bsis.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSIS entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsismod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsis)
          FROM ls_bsis.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSIS entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSIS entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsis-bukrs.
          gs_protocol-belnr = ls_bsis-belnr.
          gs_protocol-buzei = ls_bsis-buzei.
          gs_protocol-gjahr = ls_bsis-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSIS Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsismod-pairing IS NOT INITIAL.
          LOOP AT gt_bsis INTO ls_bsismod2
            WHERE pairing = ls_bsismod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsismod2 TO ls_bsis2.
            DELETE (bsis) FROM ls_bsis.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsis)
            FROM ls_bsis2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsis-bukrs.
              gs_protocol-belnr = ls_bsis-belnr.
              gs_protocol-buzei = ls_bsis-buzei.
              gs_protocol-gjahr = ls_bsis-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSIS entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsis) FROM ls_bsis.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsis-bukrs.
              gs_protocol-belnr = ls_bsis-belnr.
              gs_protocol-buzei = ls_bsis-buzei.
              gs_protocol-gjahr = ls_bsis-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSIS entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsismod-check = 'X'
      AND ls_bsismod-pairing IS INITIAL.
      IF ls_bsismod-orig = 'BUIL'
        OR ls_bsismod-orig = 'INSE'
        OR ls_bsismod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsis)
          FROM ls_bsis.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSIS entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsis-bukrs.
            gs_protocol-belnr = ls_bsis-belnr.
            gs_protocol-buzei = ls_bsis-buzei.
            gs_protocol-gjahr = ls_bsis-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSIS entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsis-bukrs.
          gs_protocol-belnr = ls_bsis-belnr.
          gs_protocol-buzei = ls_bsis-buzei.
          gs_protocol-gjahr = ls_bsis-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSIS entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsis

*&---------------------------------------------------------------------*
*&      Form  reverse_bsas
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsas.
  DATA ls_bsasmod LIKE bsasmoddisp.
  DATA ls_bsasmod2 LIKE bsasmoddisp.
  DATA ls_bsas TYPE bsas.
  DATA ls_bsas2 TYPE bsas.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsas_reverse_count TYPE i.

  LOOP AT gt_bsas INTO ls_bsasmod.
    MOVE-CORRESPONDING ls_bsasmod TO ls_bsas.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsas
      INTO select_count
      WHERE bukrs = ls_bsas-bukrs
      AND belnr = ls_bsas-belnr
      AND gjahr = ls_bsas-gjahr.

** Insert data to database.
    IF ls_bsasmod-check = ' '.
      IF ls_bsasmod-orig = 'DTAB'
        AND ls_bsasmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsas) FROM ls_bsas.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSAS entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsas-bukrs.
          gs_protocol-belnr = ls_bsas-belnr.
          gs_protocol-gjahr = ls_bsas-gjahr.
          gs_protocol-buzei = ls_bsas-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSAS entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsas) FROM ls_bsas.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSAS entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsasmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsas)
          FROM ls_bsas.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSAS entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSAS entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsas-bukrs.
          gs_protocol-belnr = ls_bsas-belnr.
          gs_protocol-buzei = ls_bsas-buzei.
          gs_protocol-gjahr = ls_bsas-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSAS Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsasmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsas INTO ls_bsasmod2
            WHERE pairing = ls_bsasmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsasmod2 TO ls_bsas2.
            DELETE (bsas) FROM ls_bsas.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsas)
            FROM ls_bsas2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsas-bukrs.
              gs_protocol-belnr = ls_bsas-belnr.
              gs_protocol-buzei = ls_bsas-buzei.
              gs_protocol-gjahr = ls_bsas-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSAS entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsas) FROM ls_bsas.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsas-bukrs.
              gs_protocol-belnr = ls_bsas-belnr.
              gs_protocol-buzei = ls_bsas-buzei.
              gs_protocol-gjahr = ls_bsas-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSAS entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsasmod-check = 'X'
      AND ls_bsasmod-pairing IS INITIAL.
      IF ls_bsasmod-orig = 'BUIL'
        OR ls_bsasmod-orig = 'INSE'
        OR ls_bsasmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsas)
          FROM ls_bsas.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSAS entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsas-bukrs.
            gs_protocol-belnr = ls_bsas-belnr.
            gs_protocol-buzei = ls_bsas-buzei.
            gs_protocol-gjahr = ls_bsas-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSAS entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsas-bukrs.
          gs_protocol-belnr = ls_bsas-belnr.
          gs_protocol-buzei = ls_bsas-buzei.
          gs_protocol-gjahr = ls_bsas-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSAS entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsas

*&---------------------------------------------------------------------*
*&      Form  reverse_bsid
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsid.
  DATA ls_bsidmod LIKE bsidmoddisp.
  DATA ls_bsidmod2 LIKE bsidmoddisp.
  DATA ls_bsid TYPE bsid.
  DATA ls_bsid2 TYPE bsid.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsid_reverse_count TYPE i.

  LOOP AT gt_bsid INTO ls_bsidmod.
    MOVE-CORRESPONDING ls_bsidmod TO ls_bsid.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsid
      INTO select_count
      WHERE bukrs = ls_bsid-bukrs
      AND belnr = ls_bsid-belnr
      AND gjahr = ls_bsid-gjahr
      .

** Insert data to database.
    IF ls_bsidmod-check = ' '.
      IF ls_bsidmod-orig = 'DTAB'
        AND ls_bsidmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsid) FROM ls_bsid.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSID entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsid-bukrs.
          gs_protocol-belnr = ls_bsid-belnr.
          gs_protocol-gjahr = ls_bsid-gjahr.
          gs_protocol-buzei = ls_bsid-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSID entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsid) FROM ls_bsid.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSID entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsidmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsid)
          FROM ls_bsid.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSID entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSID entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsid-bukrs.
          gs_protocol-belnr = ls_bsid-belnr.
          gs_protocol-buzei = ls_bsid-buzei.
          gs_protocol-gjahr = ls_bsid-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSID Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsidmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsid INTO ls_bsidmod2
            WHERE pairing = ls_bsidmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsidmod2 TO ls_bsid2.
            DELETE (bsid) FROM ls_bsid.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsid)
            FROM ls_bsid2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsid-bukrs.
              gs_protocol-belnr = ls_bsid-belnr.
              gs_protocol-buzei = ls_bsid-buzei.
              gs_protocol-gjahr = ls_bsid-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSID entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsid) FROM ls_bsid.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsid-bukrs.
              gs_protocol-belnr = ls_bsid-belnr.
              gs_protocol-buzei = ls_bsid-buzei.
              gs_protocol-gjahr = ls_bsid-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSID entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsidmod-check = 'X'
      AND ls_bsidmod-pairing IS INITIAL.
      IF ls_bsidmod-orig = 'BUIL'
        OR ls_bsidmod-orig = 'INSE'
        OR ls_bsidmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsid)
          FROM ls_bsid.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSID entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsid-bukrs.
            gs_protocol-belnr = ls_bsid-belnr.
            gs_protocol-gjahr = ls_bsid-gjahr.
            gs_protocol-buzei = ls_bsid-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSID entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsid-bukrs.
          gs_protocol-belnr = ls_bsid-belnr.
          gs_protocol-buzei = ls_bsid-buzei.
          gs_protocol-gjahr = ls_bsid-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSID entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsid

*&---------------------------------------------------------------------*
*&      Form  reverse_bsad
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsad.
  DATA ls_bsadmod LIKE bsadmoddisp.
  DATA ls_bsadmod2 LIKE bsadmoddisp.
  DATA ls_bsad TYPE bsad.
  DATA ls_bsad2 TYPE bsad.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsad_reverse_count TYPE i.

  LOOP AT gt_bsad INTO ls_bsadmod.
    MOVE-CORRESPONDING ls_bsadmod TO ls_bsad.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsad
      INTO select_count
      WHERE bukrs = ls_bsad-bukrs
      AND belnr = ls_bsad-belnr
      AND gjahr = ls_bsad-gjahr
      .

** Insert data to database.
    IF ls_bsadmod-check = ' '.
      IF ls_bsadmod-orig = 'DTAB'
        AND ls_bsadmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsad) FROM ls_bsad.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSAD entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsad-bukrs.
          gs_protocol-belnr = ls_bsad-belnr.
          gs_protocol-gjahr = ls_bsad-gjahr.
          gs_protocol-buzei = ls_bsad-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSAD entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsad) FROM ls_bsad.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSAD entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsadmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsad)
          FROM ls_bsad.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSAD entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSAD entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsad-bukrs.
          gs_protocol-belnr = ls_bsad-belnr.
          gs_protocol-gjahr = ls_bsad-gjahr.
          gs_protocol-buzei = ls_bsad-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSAD Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsadmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsad INTO ls_bsadmod2
            WHERE pairing = ls_bsadmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsadmod2 TO ls_bsad2.
            DELETE (bsad) FROM ls_bsad.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsad)
            FROM ls_bsad2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsad-bukrs.
              gs_protocol-buzei = ls_bsad-buzei.
              gs_protocol-belnr = ls_bsad-belnr.
              gs_protocol-gjahr = ls_bsad-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSAD entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsad) FROM ls_bsad.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsad-bukrs.
              gs_protocol-belnr = ls_bsad-belnr.
              gs_protocol-buzei = ls_bsad-buzei.
              gs_protocol-gjahr = ls_bsad-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSAD entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsadmod-check = 'X'
      AND ls_bsadmod-pairing IS INITIAL.
      IF ls_bsadmod-orig = 'BUIL'
        OR ls_bsadmod-orig = 'INSE'
        OR ls_bsadmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsad)
          FROM ls_bsad.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSAD entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsad-bukrs.
            gs_protocol-buzei = ls_bsad-buzei.
            gs_protocol-belnr = ls_bsad-belnr.
            gs_protocol-gjahr = ls_bsad-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSAD entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsad-bukrs.
          gs_protocol-belnr = ls_bsad-belnr.
          gs_protocol-gjahr = ls_bsad-gjahr.
          gs_protocol-buzei = ls_bsad-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSAD entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsad

*&---------------------------------------------------------------------*
*&      Form  reverse_bsik
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsik.
  DATA ls_bsikmod LIKE bsikmoddisp.
  DATA ls_bsikmod2 LIKE bsikmoddisp.
  DATA ls_bsik TYPE bsik.
  DATA ls_bsik2 TYPE bsik.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsik_reverse_count TYPE i.

  LOOP AT gt_bsik INTO ls_bsikmod.
    MOVE-CORRESPONDING ls_bsikmod TO ls_bsik.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsik
      INTO select_count
      WHERE bukrs = ls_bsik-bukrs
      AND belnr = ls_bsik-belnr
      AND gjahr = ls_bsik-gjahr
      .

** Insert data to database.
    IF ls_bsikmod-check = ' '.
      IF ls_bsikmod-orig = 'DTAB'
        AND ls_bsikmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsik) FROM ls_bsik.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSIK entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsik-bukrs.
          gs_protocol-belnr = ls_bsik-belnr.
          gs_protocol-gjahr = ls_bsik-gjahr.
          gs_protocol-buzei = ls_bsik-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSIK entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsik) FROM ls_bsik.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSIK entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsikmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsik)
          FROM ls_bsik.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSIK entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSIK entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsik-bukrs.
          gs_protocol-belnr = ls_bsik-belnr.
          gs_protocol-buzei = ls_bsik-buzei.
          gs_protocol-gjahr = ls_bsik-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSIK Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsikmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsik INTO ls_bsikmod2
            WHERE pairing = ls_bsikmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsikmod2 TO ls_bsik2.
            DELETE (bsik) FROM ls_bsik.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsik)
            FROM ls_bsik2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsik-bukrs.
              gs_protocol-belnr = ls_bsik-belnr.
              gs_protocol-gjahr = ls_bsik-gjahr.
              gs_protocol-buzei = ls_bsik-buzei.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSIK entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsik) FROM ls_bsik.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsik-bukrs.
              gs_protocol-belnr = ls_bsik-belnr.
              gs_protocol-buzei = ls_bsik-buzei.
              gs_protocol-gjahr = ls_bsik-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSIK entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsikmod-check = 'X'
      AND ls_bsikmod-pairing IS INITIAL.
      IF ls_bsikmod-orig = 'BUIL'
        OR ls_bsikmod-orig = 'INSE'
        OR ls_bsikmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsik)
          FROM ls_bsik.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSIK entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsik-bukrs.
            gs_protocol-belnr = ls_bsik-belnr.
            gs_protocol-gjahr = ls_bsik-gjahr.
            gs_protocol-buzei = ls_bsik-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSIK entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsik-bukrs.
          gs_protocol-belnr = ls_bsik-belnr.
          gs_protocol-gjahr = ls_bsik-gjahr.
          gs_protocol-buzei = ls_bsik-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSIK entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsik

*&---------------------------------------------------------------------*
*&      Form  reverse_bsak
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsak.
  DATA ls_bsakmod LIKE bsakmoddisp.
  DATA ls_bsakmod2 LIKE bsakmoddisp.
  DATA ls_bsak TYPE bsak.
  DATA ls_bsak2 TYPE bsak.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsak_reverse_count TYPE i.

  LOOP AT gt_bsak INTO ls_bsakmod.
    MOVE-CORRESPONDING ls_bsakmod TO ls_bsak.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsak
      INTO select_count
      WHERE bukrs = ls_bsak-bukrs
      AND belnr = ls_bsak-belnr
      AND gjahr = ls_bsak-gjahr
      .

** Insert data to database.
    IF ls_bsakmod-check = ' '.
      IF ls_bsakmod-orig = 'DTAB'
        AND ls_bsakmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE (bsak) FROM ls_bsak.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSAK entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsak-bukrs.
          gs_protocol-buzei = ls_bsak-buzei.
          gs_protocol-belnr = ls_bsak-belnr.
          gs_protocol-gjahr = ls_bsak-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSAK entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE (bsak) FROM ls_bsak.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSAK entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsakmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE (bsak)
          FROM ls_bsak.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSAK entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSAK entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsak-bukrs.
          gs_protocol-belnr = ls_bsak-belnr.
          gs_protocol-buzei = ls_bsak-buzei.
          gs_protocol-gjahr = ls_bsak-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSAK Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsakmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsak INTO ls_bsakmod2
            WHERE pairing = ls_bsakmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsakmod2 TO ls_bsak2.
            DELETE (bsak) FROM ls_bsak.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT (bsak)
            FROM ls_bsak2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsak-bukrs.
              gs_protocol-belnr = ls_bsak-belnr.
              gs_protocol-gjahr = ls_bsak-gjahr.
              gs_protocol-buzei = ls_bsak-buzei.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSAK entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT (bsak) FROM ls_bsak.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsak-bukrs.
              gs_protocol-belnr = ls_bsak-belnr.
              gs_protocol-gjahr = ls_bsak-gjahr.
              gs_protocol-buzei = ls_bsak-buzei.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSAK entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsakmod-check = 'X'
      AND ls_bsakmod-pairing IS INITIAL.
      IF ls_bsakmod-orig = 'BUIL'
        OR ls_bsakmod-orig = 'INSE'
        OR ls_bsakmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE (bsak)
          FROM ls_bsak.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSAK entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsak-bukrs.
            gs_protocol-belnr = ls_bsak-belnr.
            gs_protocol-buzei = ls_bsak-buzei.
            gs_protocol-gjahr = ls_bsak-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSAK entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsak-bukrs.
          gs_protocol-belnr = ls_bsak-belnr.
          gs_protocol-buzei = ls_bsak-buzei.
          gs_protocol-gjahr = ls_bsak-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSAK entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsak

*&---------------------------------------------------------------------*
*&      Form  reverse_bsec
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsec.
  DATA ls_bsecmod LIKE bsecmoddisp.
  DATA ls_bsecmod2 LIKE bsecmoddisp.
  DATA ls_bsec TYPE bsec.
  DATA ls_bsec2 TYPE bsec.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsec_reverse_count TYPE i.

  LOOP AT gt_bsec INTO ls_bsecmod.
    MOVE-CORRESPONDING ls_bsecmod TO ls_bsec.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsec
      INTO select_count
      WHERE bukrs = ls_bsec-bukrs
      AND belnr = ls_bsec-belnr
      AND gjahr = ls_bsec-gjahr
      .

** Insert data to database.
    IF ls_bsecmod-check = ' '.
      IF ls_bsecmod-orig = 'DTAB'
        AND ls_bsecmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bsec FROM ls_bsec.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSEC entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsec-bukrs.
          gs_protocol-belnr = ls_bsec-belnr.
          gs_protocol-gjahr = ls_bsec-gjahr.
          gs_protocol-buzei = ls_bsec-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSEC entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bsec FROM ls_bsec.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSEC entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsecmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bsec
          FROM ls_bsec.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSEC entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSEC entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsec-bukrs.
          gs_protocol-belnr = ls_bsec-belnr.
          gs_protocol-buzei = ls_bsec-buzei.
          gs_protocol-gjahr = ls_bsec-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSEC Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsecmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsec INTO ls_bsecmod2
            WHERE pairing = ls_bsecmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsecmod2 TO ls_bsec2.
            DELETE bsec FROM ls_bsec.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bsec
            FROM ls_bsec2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsec-bukrs.
              gs_protocol-belnr = ls_bsec-belnr.
              gs_protocol-buzei = ls_bsec-buzei.
              gs_protocol-gjahr = ls_bsec-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSEC entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bsec FROM ls_bsec.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsec-bukrs.
              gs_protocol-belnr = ls_bsec-belnr.
              gs_protocol-buzei = ls_bsec-buzei.
              gs_protocol-gjahr = ls_bsec-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSEC entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsecmod-check = 'X'
      AND ls_bsecmod-pairing IS INITIAL.
      IF ls_bsecmod-orig = 'BUIL'
        OR ls_bsecmod-orig = 'INSE'
        OR ls_bsecmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bsec
          FROM ls_bsec.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSEC entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsec-bukrs.
            gs_protocol-belnr = ls_bsec-belnr.
            gs_protocol-buzei = ls_bsec-buzei.
            gs_protocol-gjahr = ls_bsec-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSEC entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsec-bukrs.
          gs_protocol-belnr = ls_bsec-belnr.
          gs_protocol-gjahr = ls_bsec-gjahr.
          gs_protocol-buzei = ls_bsec-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSEC entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsec

*&---------------------------------------------------------------------*
*&      Form  reverse_bsed
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bsed.
  DATA ls_bsedmod LIKE bsedmoddisp.
  DATA ls_bsedmod2 LIKE bsedmoddisp.
  DATA ls_bsed TYPE bsed.
  DATA ls_bsed2 TYPE bsed.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bsed_reverse_count TYPE i.

  LOOP AT gt_bsed INTO ls_bsedmod.
    MOVE-CORRESPONDING ls_bsedmod TO ls_bsed.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bsed
      INTO select_count
      WHERE bukrs = ls_bsed-bukrs
      AND belnr = ls_bsed-belnr
      AND gjahr = ls_bsed-gjahr
      .

** Insert data to database.
    IF ls_bsedmod-check = ' '.
      IF ls_bsedmod-orig = 'DTAB'
        AND ls_bsedmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bsed FROM ls_bsed.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSED entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsed-bukrs.
          gs_protocol-belnr = ls_bsed-belnr.
          gs_protocol-buzei = ls_bsed-buzei.
          gs_protocol-gjahr = ls_bsed-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSED entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bsed FROM ls_bsed.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSED entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsedmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bsed
          FROM ls_bsed.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSED entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSED entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsed-bukrs.
          gs_protocol-belnr = ls_bsed-belnr.
          gs_protocol-gjahr = ls_bsed-gjahr.
          gs_protocol-buzei = ls_bsed-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSED Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsedmod-pairing IS NOT INITIAL.
          LOOP AT gt_bsed INTO ls_bsedmod2
            WHERE pairing = ls_bsedmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsedmod2 TO ls_bsed2.
            DELETE bsed FROM ls_bsed.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bsed
            FROM ls_bsed2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsed-bukrs.
              gs_protocol-belnr = ls_bsed-belnr.
              gs_protocol-gjahr = ls_bsed-gjahr.
              gs_protocol-buzei = ls_bsed-buzei.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSED entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bsed FROM ls_bsed.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bsed-bukrs.
              gs_protocol-belnr = ls_bsed-belnr.
              gs_protocol-gjahr = ls_bsed-gjahr.
              gs_protocol-buzei = ls_bsed-buzei.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSED entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsedmod-check = 'X'
      AND ls_bsedmod-pairing IS INITIAL.
      IF ls_bsedmod-orig = 'BUIL'
        OR ls_bsedmod-orig = 'INSE'
        OR ls_bsedmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bsed
          FROM ls_bsed.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSED entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bsed-bukrs.
            gs_protocol-belnr = ls_bsed-belnr.
            gs_protocol-gjahr = ls_bsed-gjahr.
            gs_protocol-buzei = ls_bsed-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSED entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bsed-bukrs.
          gs_protocol-belnr = ls_bsed-belnr.
          gs_protocol-buzei = ls_bsed-buzei.
          gs_protocol-gjahr = ls_bsed-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSED entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bsed

*&---------------------------------------------------------------------*
*&      Form  reverse_bset
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bset.
  DATA ls_bsetmod LIKE bsetmoddisp.
  DATA ls_bsetmod2 LIKE bsetmoddisp.
  DATA ls_bset TYPE bset.
  DATA ls_bset2 TYPE bset.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bset_reverse_count TYPE i.

  LOOP AT gt_bset INTO ls_bsetmod.
    MOVE-CORRESPONDING ls_bsetmod TO ls_bset.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bset
       INTO select_count
      WHERE bukrs = ls_bset-bukrs
      AND belnr = ls_bset-belnr
      AND gjahr = ls_bset-gjahr
     .

** Insert data to database.
    IF ls_bsetmod-check = ' '.
      IF ls_bsetmod-orig = 'DTAB'
        AND ls_bsetmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bset FROM ls_bset.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSET entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bset-bukrs.
          gs_protocol-belnr = ls_bset-belnr.
          gs_protocol-gjahr = ls_bset-gjahr.
          gs_protocol-buzei = ls_bset-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSET entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bset FROM ls_bset.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSET entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsetmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bset
          FROM ls_bset.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSET entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSET entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bset-bukrs.
          gs_protocol-belnr = ls_bset-belnr.
          gs_protocol-buzei = ls_bset-buzei.
          gs_protocol-gjahr = ls_bset-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSET Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bsetmod-pairing IS NOT INITIAL.
          LOOP AT gt_bset INTO ls_bsetmod2
            WHERE pairing = ls_bsetmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bsetmod2 TO ls_bset2.
            DELETE bset FROM ls_bset.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bset
            FROM ls_bset2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bset-bukrs.
              gs_protocol-buzei = ls_bset-buzei.
              gs_protocol-belnr = ls_bset-belnr.
              gs_protocol-gjahr = ls_bset-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSET entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bset FROM ls_bset.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bset-bukrs.
              gs_protocol-belnr = ls_bset-belnr.
              gs_protocol-gjahr = ls_bset-gjahr.
              gs_protocol-buzei = ls_bset-buzei.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSET entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bsetmod-check = 'X'
      AND ls_bsetmod-pairing IS INITIAL.
      IF ls_bsetmod-orig = 'BUIL'
        OR ls_bsetmod-orig = 'INSE'
        OR ls_bsetmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bset
          FROM ls_bset.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSET entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bset-bukrs.
            gs_protocol-belnr = ls_bset-belnr.
            gs_protocol-buzei = ls_bset-buzei.
            gs_protocol-gjahr = ls_bset-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSET entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bset-bukrs.
          gs_protocol-belnr = ls_bset-belnr.
          gs_protocol-gjahr = ls_bset-gjahr.
          gs_protocol-buzei = ls_bset-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSET entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bset

*&---------------------------------------------------------------------*
*&      Form  reverse_bse_clr
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bse_clr.
  DATA ls_bse_clrmod LIKE bse_clrmoddisp.
  DATA ls_bse_clrmod2 LIKE bse_clrmoddisp.
  DATA ls_bse_clr TYPE bse_clr.
  DATA ls_bse_clr2 TYPE bse_clr.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bse_clr_reverse_count TYPE i.

  LOOP AT gt_bse_clr INTO ls_bse_clrmod.
    MOVE-CORRESPONDING ls_bse_clrmod TO ls_bse_clr.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bse_clr
      INTO select_count
      WHERE bukrs = ls_bse_clr-bukrs
      AND belnr = ls_bse_clr-belnr
      AND gjahr = ls_bse_clr-gjahr
      .

** Insert data to database.
    IF ls_bse_clrmod-check = ' '.
      IF ls_bse_clrmod-orig = 'DTAB'
        AND ls_bse_clrmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bse_clr FROM ls_bse_clr.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSE_CLR entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bse_clr-bukrs.
          gs_protocol-belnr = ls_bse_clr-belnr.
          gs_protocol-gjahr = ls_bse_clr-gjahr.
          gs_protocol-buzei = ls_bse_clr-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSE_CLR entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bse_clr FROM ls_bse_clr.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSE_CLR entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bse_clrmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bse_clr
          FROM ls_bse_clr.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSE_CLR entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSE_CLR entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bse_clr-bukrs.
          gs_protocol-belnr = ls_bse_clr-belnr.
          gs_protocol-buzei = ls_bse_clr-buzei.
          gs_protocol-gjahr = ls_bse_clr-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSE_CLR Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bse_clrmod-pairing IS NOT INITIAL.
          LOOP AT gt_bse_clr INTO ls_bse_clrmod2
            WHERE pairing = ls_bse_clrmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bse_clrmod2 TO ls_bse_clr2.
            DELETE bse_clr FROM ls_bse_clr.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bse_clr
            FROM ls_bse_clr2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bse_clr-bukrs.
              gs_protocol-belnr = ls_bse_clr-belnr.
              gs_protocol-buzei = ls_bse_clr-buzei.
              gs_protocol-gjahr = ls_bse_clr-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSE_CLR entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bse_clr FROM ls_bse_clr.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bse_clr-bukrs.
              gs_protocol-belnr = ls_bse_clr-belnr.
              gs_protocol-gjahr = ls_bse_clr-gjahr.
              gs_protocol-buzei = ls_bse_clr-buzei.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSE_CLR entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bse_clrmod-check = 'X'
      AND ls_bse_clrmod-pairing IS INITIAL.
      IF ls_bse_clrmod-orig = 'BUIL'
        OR ls_bse_clrmod-orig = 'INSE'
        OR ls_bse_clrmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bse_clr
          FROM ls_bse_clr.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSE_CLR entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bse_clr-bukrs.
            gs_protocol-belnr = ls_bse_clr-belnr.
            gs_protocol-buzei = ls_bse_clr-buzei.
            gs_protocol-gjahr = ls_bse_clr-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSE_CLR entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bse_clr-bukrs.
          gs_protocol-belnr = ls_bse_clr-belnr.
          gs_protocol-gjahr = ls_bse_clr-gjahr.
          gs_protocol-buzei = ls_bse_clr-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSE_CLR entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bse_clr

*&---------------------------------------------------------------------*
*&      Form  reverse_bseg_add
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_bseg_add.
  DATA ls_bseg_addmod LIKE bseg_addmoddisp.
  DATA ls_bseg_addmod2 LIKE bseg_addmoddisp.
  DATA ls_bseg_add TYPE bseg_add.
  DATA ls_bseg_add2 TYPE bseg_add.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA bseg_add_reverse_count TYPE i.

  LOOP AT gt_bseg_add INTO ls_bseg_addmod.
    MOVE-CORRESPONDING ls_bseg_addmod TO ls_bseg_add.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM bseg_add
      INTO select_count
      WHERE bukrs = ls_bseg_add-bukrs
      AND belnr = ls_bseg_add-belnr
      AND gjahr = ls_bseg_add-gjahr
      .

** Insert data to database.
    IF ls_bseg_addmod-check = ' '.
      IF ls_bseg_addmod-orig = 'DTAB'
        AND ls_bseg_addmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE bseg_add FROM ls_bseg_add.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: BSEG_ADD entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg_add-bukrs.
          gs_protocol-belnr = ls_bseg_add-belnr.
          gs_protocol-buzei = ls_bseg_add-buzei.
          gs_protocol-gjahr = ls_bseg_add-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: BSEG_ADD entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE bseg_add FROM ls_bseg_add.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: BSEG_ADD entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bseg_addmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE bseg_add
          FROM ls_bseg_add.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: BSEG_ADD entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: BSEG_ADD entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg_add-bukrs.
          gs_protocol-buzei = ls_bseg_add-buzei.
          gs_protocol-belnr = ls_bseg_add-belnr.
          gs_protocol-gjahr = ls_bseg_add-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No BSEG_ADD Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_bseg_addmod-pairing IS NOT INITIAL.
          LOOP AT gt_bseg_add INTO ls_bseg_addmod2
            WHERE pairing = ls_bseg_addmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_bseg_addmod2 TO ls_bseg_add2.
            DELETE bseg_add FROM ls_bseg_add.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT bseg_add
            FROM ls_bseg_add2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg_add-bukrs.
              gs_protocol-belnr = ls_bseg_add-belnr.
              gs_protocol-buzei = ls_bseg_add-buzei.
              gs_protocol-gjahr = ls_bseg_add-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: BSEG_ADD entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT bseg_add FROM ls_bseg_add.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_bseg_add-bukrs.
              gs_protocol-belnr = ls_bseg_add-belnr.
              gs_protocol-buzei = ls_bseg_add-buzei.
              gs_protocol-gjahr = ls_bseg_add-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: BSEG_ADD entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_bseg_addmod-check = 'X'
      AND ls_bseg_addmod-pairing IS INITIAL.
      IF ls_bseg_addmod-orig = 'BUIL'
        OR ls_bseg_addmod-orig = 'INSE'
        OR ls_bseg_addmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE bseg_add
          FROM ls_bseg_add.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: BSEG_ADD entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_bseg_add-bukrs.
            gs_protocol-belnr = ls_bseg_add-belnr.
            gs_protocol-gjahr = ls_bseg_add-gjahr.
            gs_protocol-buzei = ls_bseg_add-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: BSEG_ADD entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_bseg_add-bukrs.
          gs_protocol-belnr = ls_bseg_add-belnr.
          gs_protocol-buzei = ls_bseg_add-buzei.
          gs_protocol-gjahr = ls_bseg_add-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: BSEG_ADD entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_bseg_add

*&---------------------------------------------------------------------*
*&      Form  reverse_splinfo
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_splinfo.
  DATA ls_splinfomod LIKE splinfomoddisp.
  DATA ls_splinfomod2 LIKE splinfomoddisp.
  DATA ls_splinfo TYPE fagl_splinfo.
  DATA ls_splinfo2 TYPE fagl_splinfo.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA splinfo_reverse_count TYPE i.

  LOOP AT gt_splinfo INTO ls_splinfomod.
    MOVE-CORRESPONDING ls_splinfomod TO ls_splinfo.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM fagl_splinfo
       INTO select_count
      WHERE bukrs = ls_splinfo-bukrs
      AND belnr = ls_splinfo-belnr
      AND gjahr = ls_splinfo-gjahr
     .

** Insert data to database.
    IF ls_splinfomod-check = ' '.
      IF ls_splinfomod-orig = 'DTAB'
        AND ls_splinfomod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE fagl_splinfo FROM ls_splinfo.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: SPLINFO entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo-bukrs.
          gs_protocol-belnr = ls_splinfo-belnr.
          gs_protocol-gjahr = ls_splinfo-gjahr.
          gs_protocol-buzei = ls_splinfo-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: SPLINFO entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE fagl_splinfo FROM ls_splinfo.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: SPLINFO entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfomod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE fagl_splinfo
          FROM ls_splinfo.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: SPLINFO entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: SPLINFO entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo-bukrs.
          gs_protocol-belnr = ls_splinfo-belnr.
          gs_protocol-buzei = ls_splinfo-buzei.
          gs_protocol-gjahr = ls_splinfo-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No SPLINFO Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_splinfomod-pairing IS NOT INITIAL.
          LOOP AT gt_splinfo INTO ls_splinfomod2
            WHERE pairing = ls_splinfomod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_splinfomod2 TO ls_splinfo2.
            DELETE fagl_splinfo FROM ls_splinfo.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT fagl_splinfo
            FROM ls_splinfo2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo-bukrs.
              gs_protocol-belnr = ls_splinfo-belnr.
              gs_protocol-buzei = ls_splinfo-buzei.
              gs_protocol-gjahr = ls_splinfo-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: SPLINFO entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT fagl_splinfo FROM ls_splinfo.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo-bukrs.
              gs_protocol-belnr = ls_splinfo-belnr.
              gs_protocol-buzei = ls_splinfo-buzei.
              gs_protocol-gjahr = ls_splinfo-gjahr.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: SPLINFO entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfomod-check = 'X'
      AND ls_splinfomod-pairing IS INITIAL.
      IF ls_splinfomod-orig = 'BUIL'
        OR ls_splinfomod-orig = 'INSE'
        OR ls_splinfomod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE fagl_splinfo
          FROM ls_splinfo.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: SPLINFO entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo-bukrs.
            gs_protocol-belnr = ls_splinfo-belnr.
            gs_protocol-buzei = ls_splinfo-buzei.
            gs_protocol-gjahr = ls_splinfo-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: SPLINFO entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo-bukrs.
          gs_protocol-belnr = ls_splinfo-belnr.
          gs_protocol-gjahr = ls_splinfo-gjahr.
          gs_protocol-buzei = ls_splinfo-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: SPLINFO entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_splinfo

*&---------------------------------------------------------------------*
*&      Form  reverse_splinfo_val
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM reverse_splinfo_val.
  DATA ls_splinfo_valmod LIKE splinfovalmoddisp.
  DATA ls_splinfo_valmod2 LIKE splinfovalmoddisp.
  DATA ls_splinfo_val TYPE fagl_splinfo_val.
  DATA ls_splinfo_val2 TYPE fagl_splinfo_val.
  DATA select_count TYPE i.
  DATA ld_subrc TYPE i.
  DATA splinfo_val_reverse_count TYPE i.

  LOOP AT gt_splinfo_val INTO ls_splinfo_valmod.
    MOVE-CORRESPONDING ls_splinfo_valmod TO ls_splinfo_val.

** Check if entry doesn't already exist in database.
    SELECT COUNT(*) FROM fagl_splinfo_val
      INTO select_count
      WHERE bukrs = ls_splinfo_val-bukrs
      AND belnr = ls_splinfo_val-belnr
      AND gjahr = ls_splinfo_val-gjahr
      .

** Insert data to database.
    IF ls_splinfo_valmod-check = ' '.
      IF ls_splinfo_valmod-orig = 'DTAB'
        AND ls_splinfo_valmod-pairing IS INITIAL.
        IF select_count = 0.
          DELETE fagl_splinfo_val FROM ls_splinfo_val.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REINSERT: SPLINFO_VAL entry reinserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSEIF select_count = 1.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo_val-bukrs.
          gs_protocol-belnr = ls_splinfo_val-belnr.
          gs_protocol-buzei = ls_splinfo_val-buzei.
          gs_protocol-gjahr = ls_splinfo_val-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REINSERT: SPLINFO_VAL entry still existing'.
          APPEND gs_protocol TO gt_protocol.
        ELSE.
          CLEAR gs_protocol.
          DELETE fagl_splinfo_val FROM ls_splinfo_val.
          IF sy-subrc = 0.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REINSERT: SPLINFO_VAL entry still existing'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfo_valmod-check = 'O'.
      IF p_edkey IS INITIAL.
        IF select_count = 1.
          UPDATE fagl_splinfo_val
          FROM ls_splinfo_val.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REVERSE: SPLINFO_VAL entry updated'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REVERSE: SPLINFO_VAL entry not updated'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo_val-bukrs.
          gs_protocol-belnr = ls_splinfo_val-belnr.
          gs_protocol-buzei = ls_splinfo_val-buzei.
          gs_protocol-gjahr = ls_splinfo_val-gjahr.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REVERSE: No SPLINFO_VAL Entry found to update'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ELSE.
        IF ls_splinfo_valmod-pairing IS NOT INITIAL.
          LOOP AT gt_splinfo_val INTO ls_splinfo_valmod2
            WHERE pairing = ls_splinfo_valmod-pairing
            AND ( check = 'E'
            OR orig = 'EDIT' ).
            MOVE-CORRESPONDING ls_splinfo_valmod2 TO ls_splinfo_val2.
            DELETE fagl_splinfo_val FROM ls_splinfo_val.
            ADD sy-subrc TO ld_subrc.
          ENDLOOP.
          IF ld_subrc = 0.
            INSERT fagl_splinfo_val
            FROM ls_splinfo_val2.
            IF sy-subrc = 0.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo_val-bukrs.
              gs_protocol-buzei = ls_splinfo_val-buzei.
              gs_protocol-belnr = ls_splinfo_val-belnr.
              gs_protocol-gjahr = ls_splinfo_val-gjahr.
              gs_protocol-type = '@5B@'.
              gs_protocol-message = 'REVERSE-KEY: SPLINFO_VAL entry updated'.
              APPEND gs_protocol TO gt_protocol.
            ELSE.
              INSERT fagl_splinfo_val FROM ls_splinfo_val.
              CLEAR gs_protocol.
              gs_protocol-bukrs = ls_splinfo_val-bukrs.
              gs_protocol-belnr = ls_splinfo_val-belnr.
              gs_protocol-gjahr = ls_splinfo_val-gjahr.
              gs_protocol-buzei = ls_splinfo_val-buzei.
              gs_protocol-type = '@5C@'.
              gs_protocol-message = 'REVERSE-KEY: SPLINFO_VAL entry not updated'.
              APPEND gs_protocol TO gt_protocol.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_splinfo_valmod-check = 'X'
      AND ls_splinfo_valmod-pairing IS INITIAL.
      IF ls_splinfo_valmod-orig = 'BUIL'
        OR ls_splinfo_valmod-orig = 'INSE'
        OR ls_splinfo_valmod-orig = 'EXTR'.
        IF select_count = 1.
          DELETE fagl_splinfo_val
          FROM ls_splinfo_val.
          IF sy-subrc = 0.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-type = '@5B@'.
            gs_protocol-message = 'REMOVE: SPLINFO_VAL entry inserted'.
            APPEND gs_protocol TO gt_protocol.
          ELSE.
            CLEAR gs_protocol.
            gs_protocol-bukrs = ls_splinfo_val-bukrs.
            gs_protocol-belnr = ls_splinfo_val-belnr.
            gs_protocol-gjahr = ls_splinfo_val-gjahr.
            gs_protocol-buzei = ls_splinfo_val-buzei.
            gs_protocol-type = '@5C@'.
            gs_protocol-message = 'REMOVE: SPLINFO_VAL entry not inserted'.
            APPEND gs_protocol TO gt_protocol.
          ENDIF.
        ELSE.
          CLEAR gs_protocol.
          gs_protocol-bukrs = ls_splinfo_val-bukrs.
          gs_protocol-belnr = ls_splinfo_val-belnr.
          gs_protocol-gjahr = ls_splinfo_val-gjahr.
          gs_protocol-buzei = ls_splinfo_val-buzei.
          gs_protocol-type = '@5C@'.
          gs_protocol-message = 'REMOVE: SPLINFO_VAL entry already existing'.
          APPEND gs_protocol TO gt_protocol.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "reverse_splinfo_val

***********************************************************************
* CHECK IF ACDOCA EXISTS
***********************************************************************
FORM check_s4.

  SELECT COUNT( * )
    FROM dd02l
    INTO acdoca_active
    WHERE tabname = 'ACDOCA'
    .

ENDFORM.                                                    "check_s4


*&---------------------------------------------------------------------*
*&      Form  update_flags
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_flags.
  DATA ls_bkpfmod2 LIKE ls_bkpfmod.
  DATA entry_flag TYPE i.

  IF flag_store NE 1.
    CLEAR gt_doclist.

    IF gt_doclist IS INITIAL.
      LOOP AT gt_bkpf INTO ls_bkpfmod.
        ls_bkpfmod-control = '@5B@'.
        DELETE ADJACENT DUPLICATES FROM gt_flag.
        LOOP AT gt_flag INTO ls_flag
          WHERE bukrs = ls_bkpfmod-bukrs
          AND belnr = ls_bkpfmod-belnr
          AND gjahr = ls_bkpfmod-gjahr.
          IF ls_flag-control = '@5C@'.
            ls_bkpfmod-error = ls_flag-error.
            ls_bkpfmod-control = '@5C@'.
          ELSEIF ls_flag-control = '@5D@'
            AND ls_bkpfmod-control NE '@5C@'.
            ls_bkpfmod-error = ls_flag-error.
            ls_bkpfmod-control = '@5D@'.
          ELSE.
            DELETE gt_flag INDEX sy-tabix.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_doclist TRANSPORTING NO FIELDS
          WHERE bukrs = ls_bkpfmod-bukrs
          AND belnr = ls_bkpfmod-belnr
          AND gjahr = ls_bkpfmod-gjahr.
          MODIFY gt_doclist FROM ls_bkpfmod INDEX sy-tabix.
          entry_flag = 1.
        ENDLOOP.
        IF entry_flag IS INITIAL.
          APPEND ls_bkpfmod TO gt_doclist.
        ENDIF.
        CLEAR entry_flag.
      ENDLOOP.

      SORT gt_doclist BY bukrs ASCENDING gjahr ASCENDING belnr ASCENDING.
    ENDIF.
  ELSE.

    CLEAR gt_doclist_store.

    IF gt_doclist_store IS INITIAL.
      LOOP AT gt_bkpf_store INTO ls_bkpfmod.
        ls_bkpfmod-control = '@5B@'.
        DELETE ADJACENT DUPLICATES FROM gt_flag.
        LOOP AT gt_flag_store INTO ls_flag
          WHERE bukrs = ls_bkpfmod-bukrs
          AND belnr = ls_bkpfmod-belnr
          AND gjahr = ls_bkpfmod-gjahr.
          IF ls_flag-control = '@5C@'.
            ls_bkpfmod-error = ls_flag-error.
            ls_bkpfmod-control = '@5C@'.
          ELSEIF ls_flag-control = '@5D@'
            AND ls_bkpfmod-control NE '@5C@'.
            ls_bkpfmod-error = ls_flag-error.
            ls_bkpfmod-control = '@5D@'.
          ELSEIF ls_flag-control NE '@5D@'.
            DELETE gt_flag_store INDEX sy-tabix.
          ENDIF.
        ENDLOOP.
        LOOP AT gt_doclist_store TRANSPORTING NO FIELDS
          WHERE bukrs = ls_bkpfmod-bukrs
          AND belnr = ls_bkpfmod-belnr
          AND gjahr = ls_bkpfmod-gjahr.
          MODIFY gt_doclist_store FROM ls_bkpfmod INDEX sy-tabix.
          entry_flag = 1.
        ENDLOOP.
        IF entry_flag IS INITIAL.
          APPEND ls_bkpfmod TO gt_doclist_store.
        ENDIF.
        CLEAR entry_flag.
      ENDLOOP.

      SORT gt_doclist_store BY bukrs ASCENDING gjahr ASCENDING belnr ASCENDING.
    ENDIF.
  ENDIF.

ENDFORM.                    "update_flags


*&---------------------------------------------------------------------*
*&      Form  consistency_check
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM consistency_check.
  CLEAR gt_flag.

  DATA ls_bkpf LIKE bkpfmoddisp.
  DATA ls_bkpf2 LIKE bkpfmoddisp.
  DATA ls_bseg LIKE bsegmoddisp.
  DATA ls_bsis LIKE bsismoddisp.
  DATA ls_bsas LIKE bsasmoddisp.
  DATA ls_bsik LIKE bsikmoddisp.
  DATA ls_bsak LIKE bsakmoddisp.
  DATA ls_bsid LIKE bsidmoddisp.
  DATA ls_bsad LIKE bsadmoddisp.
  DATA ls_bsec LIKE bsecmoddisp.
  DATA ls_bsed LIKE bsedmoddisp.
  DATA ls_bset LIKE bsetmoddisp.
  DATA ls_bse_clr LIKE bse_clrmoddisp.
  DATA ls_bseg_add LIKE bseg_addmoddisp.
  DATA ls_splinfo LIKE splinfomoddisp.
  DATA ls_splinfo_val LIKE splinfovalmoddisp.
  DATA ls_glu1 LIKE glu1moddisp.
  DATA ls_bseg2 LIKE bsegmoddisp.
  DATA ls_bsis2 LIKE bsismoddisp.
  DATA ls_bsas2 LIKE bsasmoddisp.
  DATA ls_bsik2 LIKE bsikmoddisp.
  DATA ls_bsak2 LIKE bsakmoddisp.
  DATA ls_bsid2 LIKE bsidmoddisp.
  DATA ls_bsad2 LIKE bsadmoddisp.
  DATA ls_bsec2 LIKE bsecmoddisp.
  DATA ls_bsed2 LIKE bsedmoddisp.
  DATA ls_bset2 LIKE bsetmoddisp.
  DATA ls_bse_clr2 LIKE bse_clrmoddisp.
  DATA ls_bseg_add2 LIKE bseg_addmoddisp.
  DATA ls_splinfo2 LIKE splinfomoddisp.
  DATA ls_splinfo_val2 LIKE splinfovalmoddisp.
  DATA ls_glu12 LIKE glu1moddisp.
  DATA ls_doclist LIKE LINE OF gt_doclist.
  DATA flag_doclist TYPE i.
  DATA obsolete_flag TYPE i.
  DATA ld_tabix TYPE i.
  DATA ld_tabix2 TYPE i.


  LOOP AT gt_bkpf_store INTO ls_bkpf.
    ld_tabix = sy-tabix.
    IF ls_bkpf-orig = 'INSE'
      OR ls_bkpf-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bkpf-bukrs
        AND belnr = ls_bkpf-belnr
        AND gjahr = ls_bkpf-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bkpf_store INTO ls_bkpf2
        WHERE bukrs = ls_bkpf-bukrs
        AND belnr = ls_bkpf-belnr
        AND gjahr = ls_bkpf-gjahr
        AND check NE 'O'
        AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bkpf2-control = '@5C@'.
          ls_bkpf2-check = 'X'.
          MODIFY gt_bkpf_store FROM ls_bkpf2 INDEX ld_tabix2.
          ls_bkpf-control = '@5C@'.
          ls_bkpf-orig = 'EDIT'.
          ls_bkpf-check = ' '.
          MODIFY gt_bkpf_store FROM ls_bkpf INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bkpf2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
    IF ls_bkpf-orig = 'DTAB'
      AND ( ls_bkpf-check = ' '
      OR ls_bkpf-check = 'O' ).
      LOOP AT gt_bkpf_store INTO ls_bkpf
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      AND ( check = 'X'
      OR check = 'E' ).
        obsolete_flag = 1.
      ENDLOOP.
      IF obsolete_flag IS INITIAL.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-check = 'X'.
        MODIFY gt_bkpf_store FROM ls_bkpf INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bkpf_store TO ls_flag.
        APPEND ls_flag TO gt_flag_store.
      ENDIF.
      CLEAR obsolete_flag.
    ENDIF.
    CLEAR: ld_tabix, ld_tabix2.
  ENDLOOP.

  LOOP AT gt_bseg_store INTO ls_bseg.
    ld_tabix = sy-tabix.
    IF ls_bseg-orig = 'INSE'
      OR ls_bseg-check = 'E'.
      LOOP AT gt_doclist INTO ls_doclist
        WHERE bukrs = ls_bseg-bukrs
        AND belnr = ls_bseg-belnr
        AND gjahr = ls_bseg-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_bseg TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bseg_store INTO ls_bseg2
    WHERE bukrs = ls_bseg-bukrs
    AND belnr = ls_bseg-belnr
    AND gjahr = ls_bseg-gjahr
    AND buzei = ls_bseg-buzei
    AND check NE 'O'
    AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bseg2-control = '@5C@'.
          ls_bseg2-check = 'X'.
          MODIFY gt_bseg_store FROM ls_bseg2 INDEX ld_tabix2.
          ls_bseg-control = '@5C@'.
          ls_bseg-orig = 'EDIT'.
          ls_bseg-check = ' '.
          MODIFY gt_bseg_store FROM ls_bseg INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bseg2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  IF acdoca_active = 0.
    LOOP AT gt_bsis_store INTO ls_bsis.
      ld_tabix = sy-tabix.
      IF ls_bsis-orig = 'INSE'
        OR ls_bsis-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsis-bukrs
          AND belnr = ls_bsis-belnr
          AND gjahr = ls_bsis-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsis TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsis_store INTO ls_bsis2
  WHERE bukrs = ls_bsis-bukrs
  AND belnr = ls_bsis-belnr
  AND gjahr = ls_bsis-gjahr
  AND buzei = ls_bsis-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsis2-control = '@5C@'.
            ls_bsis2-check = 'X'.
            MODIFY gt_bsis_store FROM ls_bsis2 INDEX ld_tabix2.
            ls_bsis-control = '@5C@'.
            ls_bsis-orig = 'EDIT'.
            ls_bsis-orig = ' '.
            MODIFY gt_bsis_store FROM ls_bsis INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsis2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsas_store INTO ls_bsas.
      IF ls_bsas-orig NE 'DTAB'.
        upflag_bsas = 1.
      ENDIF.
      ld_tabix = sy-tabix.
      IF ls_bsas-orig = 'INSE'
        OR ls_bsas-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsas-bukrs
          AND belnr = ls_bsas-belnr
          AND gjahr = ls_bsas-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsas TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsas_store INTO ls_bsas2
  WHERE bukrs = ls_bsas-bukrs
  AND belnr = ls_bsas-belnr
  AND gjahr = ls_bsas-gjahr
  AND buzei = ls_bsas-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsas2-check = 'X'.
            ls_bsas2-control = '@5C@'.
            MODIFY gt_bsas_store FROM ls_bsas2 INDEX ld_tabix2.
            ls_bsas-control = '@5C@'.
            ls_bsas-orig = 'EDIT'.
            ls_bsas-check = ' '.
            MODIFY gt_bsas_store FROM ls_bsas INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsas2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsik_store INTO ls_bsik.

      ld_tabix = sy-tabix.
      IF ls_bsik-orig = 'INSE'
        OR ls_bsik-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsik-bukrs
          AND belnr = ls_bsik-belnr
          AND gjahr = ls_bsik-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsik TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsik_store INTO ls_bsik2
  WHERE bukrs = ls_bsik-bukrs
  AND belnr = ls_bsik-belnr
  AND gjahr = ls_bsik-gjahr
          AND buzei = ls_bsik-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsik2-check = 'X'.
            ls_bsik2-control = '@5C@'.
            MODIFY gt_bsik_store FROM ls_bsik2 INDEX ld_tabix2.
            ls_bsik-control = '@5C@'.
            ls_bsik-orig = 'EDIT'.
            ls_bsik-check = ' '.
            MODIFY gt_bsik_store FROM ls_bsik INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsik2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsak_store INTO ls_bsak.

      ld_tabix = sy-tabix.
      IF ls_bsak-orig = 'INSE'
        OR ls_bsak-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsak-bukrs
          AND belnr = ls_bsak-belnr
          AND gjahr = ls_bsak-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsak TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsak_store INTO ls_bsak2
  WHERE bukrs = ls_bsak-bukrs
  AND belnr = ls_bsak-belnr
  AND gjahr = ls_bsak-gjahr
          AND buzei = ls_bsak-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsak2-check = 'X'.
            ls_bsak2-control = '@5C@'.
            MODIFY gt_bsak_store FROM ls_bsak2 INDEX ld_tabix2.
            ls_bsak-control = '@5C@'.
            ls_bsak-orig = 'EDIT'.
            ls_bsak-check = ' '.
            MODIFY gt_bsak_store FROM ls_bsak INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsak2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsid INTO ls_bsid.

      ld_tabix = sy-tabix.
      IF ls_bsid-orig = 'INSE'
        OR ls_bsid-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsid-bukrs
          AND belnr = ls_bsid-belnr
          AND gjahr = ls_bsid-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsid TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsid_store INTO ls_bsid2
  WHERE bukrs = ls_bsid-bukrs
  AND belnr = ls_bsid-belnr
  AND gjahr = ls_bsid-gjahr
          AND buzei = ls_bsid-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsid2-check = 'X'.
            ls_bsid2-control = '@5C@'.
            MODIFY gt_bsid_store FROM ls_bsid2 INDEX ld_tabix2.
            ls_bsid-control = '@5C@'.
            ls_bsid-orig = 'EDIT'.
            ls_bsid-check = ' '.
            MODIFY gt_bsid_store FROM ls_bsid INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsid2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_bsad_store INTO ls_bsad.

      ld_tabix = sy-tabix.
      IF ls_bsad-orig = 'INSE'
        OR ls_bsad-check = 'E'.
        LOOP AT gt_doclist_store INTO ls_doclist
          WHERE bukrs = ls_bsad-bukrs
          AND belnr = ls_bsad-belnr
          AND gjahr = ls_bsad-gjahr.
          flag_doclist = 1.
        ENDLOOP.
        IF flag_doclist = 0.
          CLEAR ls_bkpf.
          MOVE-CORRESPONDING ls_bsad TO ls_bkpf.
          PERFORM check_databases_subseq USING ls_bkpf.
        ENDIF.
        LOOP AT gt_bsad_store INTO ls_bsad2
  WHERE bukrs = ls_bsad-bukrs
  AND belnr = ls_bsad-belnr
  AND gjahr = ls_bsad-gjahr
          AND buzei = ls_bsad-buzei
  AND check NE 'O'
  AND check NE ' '.
          ld_tabix2 = sy-tabix.
          IF ld_tabix NE ld_tabix2.
            ls_bsad2-check = 'X'.
            ls_bsad2-control = '@5C@'.
            MODIFY gt_bsad_store FROM ls_bsad2 INDEX ld_tabix2.
            ls_bsad-control = '@5C@'.
            ls_bsad-orig = 'EDIT'.
            ls_bsad-check = ' '.
            MODIFY gt_bsad_store FROM ls_bsad INDEX ld_tabix.
            MOVE-CORRESPONDING ls_bsad2 TO ls_flag.
            APPEND ls_flag TO gt_flag_store.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

  ENDIF.
  LOOP AT gt_bsec_store INTO ls_bsec.

    ld_tabix = sy-tabix.
    IF ls_bsec-orig = 'INSE'
      OR ls_bsec-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bsec-bukrs
        AND belnr = ls_bsec-belnr
        AND gjahr = ls_bsec-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_bsec TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bsec_store INTO ls_bsec2
WHERE bukrs = ls_bsec-bukrs
AND belnr = ls_bsec-belnr
AND gjahr = ls_bsec-gjahr
        AND buzei = ls_bsec-buzei
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bsec2-check = 'X'.
          ls_bsec2-control = '@5C@'.
          MODIFY gt_bsec_store FROM ls_bsec2 INDEX ld_tabix2.
          ls_bsec-control = '@5C@'.
          ls_bsec-orig = 'EDIT'.
          ls_bsec-check = ' '.
          MODIFY gt_bsec_store FROM ls_bsec INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bsec2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsed_store INTO ls_bsed.

    ld_tabix = sy-tabix.
    IF ls_bsed-orig = 'INSE'
      OR ls_bsed-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bsed-bukrs
        AND belnr = ls_bsed-belnr
        AND gjahr = ls_bsed-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_bsed TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bsed_store INTO ls_bsed2
WHERE bukrs = ls_bsed-bukrs
AND belnr = ls_bsed-belnr
AND gjahr = ls_bsed-gjahr
        AND buzei = ls_bsed-buzei
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bsed2-check = 'X'.
          ls_bsed2-control = '@5C@'.
          MODIFY gt_bsed_store FROM ls_bsed2 INDEX ld_tabix2.
          ls_bsed-control = '@5C@'.
          ls_bsed-orig = 'EDIT'.
          ls_bsed-check = ' '.
          MODIFY gt_bsed_store FROM ls_bsed INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bsed2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bset_store INTO ls_bset.

    ld_tabix = sy-tabix.
    IF ls_bset-orig = 'INSE'
      OR ls_bset-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bset-bukrs
        AND belnr = ls_bset-belnr
        AND gjahr = ls_bset-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_bset TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bset_store INTO ls_bset2
WHERE bukrs = ls_bset-bukrs
AND belnr = ls_bset-belnr
AND gjahr = ls_bset-gjahr
        AND buzei = ls_bset-buzei
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bset2-check = 'X'.
          ls_bset2-control = '@5C@'.
          MODIFY gt_bset_store FROM ls_bset2 INDEX ld_tabix2.
          ls_bset-control = '@5C@'.
          ls_bset-orig = 'EDIT'.
          ls_bset-check = ' '.
          MODIFY gt_bset_store FROM ls_bset INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bset2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bse_clr_store INTO ls_bse_clr.

    ld_tabix = sy-tabix.
    IF ls_bse_clr-orig = 'INSE'
      OR ls_bse_clr-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bse_clr-bukrs_clr
        AND belnr = ls_bse_clr-belnr_clr
        AND gjahr = ls_bse_clr-gjahr_clr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        ls_bkpf-bukrs = ls_bse_clr-bukrs_clr.
        ls_bkpf-belnr = ls_bse_clr-belnr_clr.
        ls_bkpf-gjahr = ls_bse_clr-gjahr_clr.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bse_clr_store INTO ls_bse_clr2
WHERE bukrs_clr = ls_bse_clr-bukrs_clr
AND belnr_clr = ls_bse_clr-belnr_clr
AND gjahr_clr = ls_bse_clr-gjahr_clr
        AND index_clr = ls_bse_clr-index_clr
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bse_clr2-check = 'X'.
          ls_bse_clr2-control = '@5C@'.
          MODIFY gt_bse_clr_store FROM ls_bse_clr2 INDEX ld_tabix2.
          ls_bse_clr-control = '@5C@'.
          ls_bse_clr-orig = 'EDIT'.
          ls_bse_clr-check = ' '.
          MODIFY gt_bse_clr_store FROM ls_bse_clr INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bse_clr2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bseg_add_store INTO ls_bseg_add.

    ld_tabix = sy-tabix.
    IF ls_bseg_add-orig = 'INSE'
      OR ls_bseg_add-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_bseg_add-bukrs
        AND belnr = ls_bseg_add-belnr
        AND gjahr = ls_bseg_add-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_bseg_add TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_bseg_add_store INTO ls_bseg_add2
WHERE bukrs = ls_bseg_add-bukrs
AND belnr = ls_bseg_add-belnr
AND gjahr = ls_bseg_add-gjahr
        AND buzei = ls_bseg_add-buzei
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_bseg_add2-check = 'X'.
          ls_bseg_add2-control = '@5C@'.
          MODIFY gt_bseg_add_store FROM ls_bseg_add2 INDEX ld_tabix2.
          ls_bseg_add-control = '@5C@'.
          ls_bseg_add-orig = 'EDIT'.
          ls_bseg_add-check = ' '.
          MODIFY gt_bseg_add_store FROM ls_bseg_add INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bseg_add2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo_store INTO ls_splinfo.

    ld_tabix = sy-tabix.
    IF ls_splinfo-orig = 'INSE'
      OR ls_splinfo-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_splinfo-bukrs
        AND belnr = ls_splinfo-belnr
        AND gjahr = ls_splinfo-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_splinfo TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_splinfo_store INTO ls_splinfo2
WHERE bukrs = ls_splinfo-bukrs
AND belnr = ls_splinfo-belnr
AND gjahr = ls_splinfo-gjahr
                AND buzei = ls_splinfo-buzei
  AND spl_no = ls_splinfo-spl_no
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_splinfo2-check = 'X'.
          ls_splinfo2-control = '@5C@'.
          MODIFY gt_splinfo_store FROM ls_splinfo2 INDEX ld_tabix2.
          ls_splinfo-control = '@5C@'.
          ls_splinfo-orig = 'EDIT'.
          ls_splinfo-check = ' '.
          MODIFY gt_splinfo_store FROM ls_splinfo INDEX ld_tabix.
          MOVE-CORRESPONDING ls_splinfo2 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo_val_store INTO ls_splinfo_val.

    ld_tabix = sy-tabix.
    IF ls_splinfo_val-orig = 'INSE'
      OR ls_splinfo_val-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_splinfo_val-bukrs
        AND belnr = ls_splinfo_val-belnr
        AND gjahr = ls_splinfo_val-gjahr.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_splinfo_val TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_splinfo_val_store INTO ls_splinfo_val2
WHERE bukrs = ls_splinfo_val-bukrs
AND belnr = ls_splinfo_val-belnr
AND gjahr = ls_splinfo_val-gjahr
        AND buzei = ls_splinfo_val-buzei
        AND spl_no = ls_splinfo_val-spl_no
        AND curtp = ls_splinfo_val-curtp
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_splinfo_val2-check = 'X'.
          ls_splinfo_val2-control = '@5C@'.
          MODIFY gt_splinfo_val_store FROM ls_splinfo_val2 INDEX ld_tabix2.
          ls_splinfo_val-control = '@5C@'.
          ls_splinfo_val-orig = 'EDIT'.
          ls_splinfo_val-check = ' '.
          MODIFY gt_splinfo_val_store FROM ls_splinfo_val INDEX ld_tabix.
          MOVE-CORRESPONDING ls_splinfo_val2 TO ls_flag.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_glu1_store INTO ls_glu1.

    ld_tabix = sy-tabix.
    IF ls_glu1-orig = 'INSE'
      OR ls_glu1-check = 'E'.
      LOOP AT gt_doclist_store INTO ls_doclist
        WHERE bukrs = ls_glu1-rbukrs
        AND belnr = ls_glu1-belnr
        AND gjahr = ls_glu1-ryear.
        flag_doclist = 1.
      ENDLOOP.
      IF flag_doclist = 0.
        CLEAR ls_bkpf.
        MOVE-CORRESPONDING ls_glu1 TO ls_bkpf.
        PERFORM check_databases_subseq USING ls_bkpf.
      ENDIF.
      LOOP AT gt_glu1_store INTO ls_glu12
WHERE rbukrs = ls_glu1-rbukrs
AND belnr = ls_glu1-belnr
AND ryear = ls_glu1-ryear
AND rldnr = ls_glu1-rldnr
AND docln = ls_glu1-docln
AND check NE 'O'
AND check NE ' '.
        ld_tabix2 = sy-tabix.
        IF ld_tabix NE ld_tabix2.
          ls_glu12-check = 'X'.
          ls_glu12-control = '@5C@'.
          MODIFY gt_glu1_store FROM ls_glu12 INDEX ld_tabix2.
          ls_glu1-control = '@5C@'.
          ls_glu1-orig = 'EDIT'.
          ls_glu1-check = ' '.
          MODIFY gt_glu1_store FROM ls_glu1 INDEX ld_tabix.
          MOVE-CORRESPONDING ls_glu12 TO ls_flag.
          APPEND ls_flag TO gt_flag_store.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "consistency_check

*&---------------------------------------------------------------------*
*&      Form  check_databases_subseq
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LS_BKPF    text
*----------------------------------------------------------------------*
FORM check_databases_subseq USING ls_bkpf LIKE bkpfmoddisp.

  DATA: lt_t001           TYPE TABLE OF t001,
        lt_t881           TYPE TABLE OF t881,
        ls_t881           TYPE t881,
        lt_t800a          TYPE TABLE OF t800a-ntable,
        ls_t800a          TYPE t800a-ntable,
        bkpf_count        TYPE i,
        it_ledgers        TYPE fagl_rldnr_tab,
        ld_ledger         TYPE rldnr,
        lt_bkpf           TYPE TABLE OF bkpf,
        ls_bkpf2          TYPE bkpf,
        ls_bkpfmod        LIKE bkpfmoddisp,
        ls_bseg           TYPE bseg,
        ls_bsegmod        LIKE bsegmoddisp,
        lt_bseg           TYPE TABLE OF bseg,
        lt_bsis           TYPE TABLE OF bsis,
        ls_bsis           TYPE bsis,
        ls_bsismod        LIKE bsismoddisp,
        lt_bsas           TYPE TABLE OF bsas,
        ls_bsas           TYPE bsas,
        ls_bsasmod        LIKE bsasmoddisp,
        lt_bsid           TYPE TABLE OF bsid,
        ls_bsid           TYPE bsid,
        ls_bsidmod        LIKE bsidmoddisp,
        lt_bsad           TYPE TABLE OF bsad,
        ls_bsad           TYPE bsad,
        ls_bsadmod        LIKE bsadmoddisp,
        lt_bsik           TYPE TABLE OF bsik,
        ls_bsik           TYPE bsik,
        ls_bsikmod        LIKE bsikmoddisp,
        lt_bsak           TYPE TABLE OF bsak,
        ls_bsak           TYPE bsak,
        ls_bsakmod        LIKE bsakmoddisp,
        lt_bsec           TYPE TABLE OF bsec,
        ls_bsec           TYPE bsec,
        ls_bsecmod        LIKE bsecmoddisp,
        lt_bsed           TYPE TABLE OF bsed,
        ls_bsed           TYPE bsed,
        ls_bsedmod        LIKE bsedmoddisp,
        lt_bset           TYPE TABLE OF bset,
        ls_bset           TYPE bset,
        ls_bsetmod        LIKE bsetmoddisp,
        lt_bseg_add       TYPE TABLE OF bseg_add,
        ls_bseg_add       TYPE bseg_add,
        ls_bseg_addmod    LIKE bseg_addmoddisp,
        lt_bse_clr        TYPE TABLE OF bse_clr,
        ls_bse_clr        TYPE bse_clr,
        ls_bse_clrmod     LIKE bse_clrmoddisp,
        lt_splinfo        TYPE TABLE OF fagl_splinfo,
        ls_splinfo        TYPE fagl_splinfo,
        ls_splinfomod     LIKE splinfomoddisp,
        lt_splinfo_val    TYPE TABLE OF fagl_splinfo_val,
        ls_splinfo_val    TYPE fagl_splinfo_val,
        ls_splinfo_valmod LIKE splinfovalmoddisp,
        ls_glu1moddisp    LIKE glu1moddisp,
        ls_glu1           TYPE glu1.

  CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
    EXPORTING
      i_bukrs    = ls_bkpf-bukrs
    IMPORTING
      et_ledgers = it_ledgers.
  LOOP AT it_ledgers INTO ld_ledger.
    SELECT * FROM t881
      APPENDING TABLE lt_t881
      WHERE rldnr = ld_ledger
      .
  ENDLOOP.
  LOOP AT lt_t881 INTO ls_t881.
    SELECT SINGLE ntable FROM t800a
      INTO ls_t800a
      WHERE tab = ls_t881-tab
      .
    APPEND ls_t800a TO lt_t800a.
  ENDLOOP.
  SORT lt_t800a ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_t800a.

  IF acdoca_active = 1.
    CLEAR lt_t800a.
    ls_t800a = 'ACDOCA'.
    APPEND ls_t800a TO lt_t800a.
  ENDIF.

  SELECT * FROM bkpf
     APPENDING TABLE lt_bkpf
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
   .

  LOOP AT lt_bkpf INTO ls_bkpf2.
    MOVE-CORRESPONDING ls_bkpf2 TO ls_bkpfmod.
    ls_bkpfmod-orig = 'DTAB'.
    ls_bkpfmod-control = '@5B@'.
    ls_bkpfmod-check = 'X'.
    APPEND ls_bkpfmod TO gt_bkpf.
    CLEAR ls_bkpfmod.
  ENDLOOP.

  SELECT * FROM bseg
     APPENDING TABLE lt_bseg
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
   .

  LOOP AT lt_bseg INTO ls_bseg.
    MOVE-CORRESPONDING ls_bseg TO ls_bsegmod.
    ls_bsegmod-orig = 'DTAB'.
    ls_bsegmod-control = '@5B@'.
    ls_bsegmod-check = 'X'.
    APPEND ls_bsegmod TO gt_bseg.
    CLEAR ls_bsegmod.
  ENDLOOP.

  SELECT * FROM bsec
    APPENDING TABLE lt_bsec
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_bsec INTO ls_bsec.
    MOVE-CORRESPONDING ls_bsec TO ls_bsecmod.
    ls_bsecmod-orig = 'DTAB'.
    ls_bsecmod-control = '@5B@'.
    ls_bsecmod-check = 'X'.
    APPEND ls_bsecmod TO gt_bsec.
    CLEAR ls_bsecmod.
  ENDLOOP.

  SELECT * FROM bse_clr
    APPENDING TABLE lt_bse_clr
    WHERE bukrs_clr = ls_bkpf-bukrs
    AND belnr_clr = ls_bkpf-belnr
    AND gjahr_clr = ls_bkpf-gjahr
    .

  LOOP AT lt_bse_clr INTO ls_bse_clr.
    MOVE-CORRESPONDING ls_bse_clr TO ls_bse_clrmod.
    ls_bse_clrmod-orig = 'DTAB'.
    ls_bse_clrmod-control = '@5B@'.
    ls_bse_clrmod-check = 'X'.
    APPEND ls_bse_clrmod TO gt_bse_clr.
    CLEAR ls_bse_clrmod.
  ENDLOOP.

  SELECT * FROM bsed
    APPENDING TABLE lt_bsed
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_bsed INTO ls_bsed.
    MOVE-CORRESPONDING ls_bsed TO ls_bsedmod.
    ls_bsedmod-orig = 'DTAB'.
    ls_bsedmod-control = '@5B@'.
    ls_bsedmod-check = 'X'.
    APPEND ls_bsedmod TO gt_bsed.
    CLEAR ls_bsedmod.
  ENDLOOP.

  SELECT * FROM bset
    APPENDING TABLE lt_bset
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_bset INTO ls_bset.
    MOVE-CORRESPONDING ls_bset TO ls_bsetmod.
    ls_bsetmod-orig = 'DTAB'.
    ls_bsetmod-control = '@5B@'.
    ls_bsetmod-check = 'X'.
    APPEND ls_bsetmod TO gt_bset.
    CLEAR ls_bsetmod.
  ENDLOOP.

  IF acdoca_active = 0.
    SELECT * FROM bsis
      APPENDING TABLE lt_bsis
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

    LOOP AT lt_bsis INTO ls_bsis.
      MOVE-CORRESPONDING ls_bsis TO ls_bsismod.
      ls_bsismod-orig = 'DTAB'.
      ls_bsismod-control = '@5B@'.
      ls_bsismod-check = 'X'.
      APPEND ls_bsismod TO gt_bsis.
      CLEAR ls_bsismod.
    ENDLOOP.

    SELECT * FROM bsas
      APPENDING TABLE lt_bsas
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

    LOOP AT lt_bsas INTO ls_bsas.
      MOVE-CORRESPONDING ls_bsas TO ls_bsasmod.
      ls_bsasmod-orig = 'DTAB'.
      ls_bsasmod-control = '@5B@'.
      ls_bsasmod-check = 'X'.
      APPEND ls_bsasmod TO gt_bsas.
      CLEAR ls_bsasmod.
    ENDLOOP.

    SELECT * FROM bsid
       APPENDING TABLE lt_bsid
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
     .

    LOOP AT lt_bsid INTO ls_bsid.
      MOVE-CORRESPONDING ls_bsid TO ls_bsidmod.
      ls_bsidmod-orig = 'DTAB'.
      ls_bsidmod-control = '@5B@'.
      ls_bsidmod-check = 'X'.
      APPEND ls_bsidmod TO gt_bsid.
      CLEAR ls_bsidmod.
    ENDLOOP.

    SELECT * FROM bsad
      APPENDING TABLE lt_bsad
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

    LOOP AT lt_bsad INTO ls_bsad.
      MOVE-CORRESPONDING ls_bsad TO ls_bsadmod.
      ls_bsadmod-orig = 'DTAB'.
      ls_bsadmod-control = '@5B@'.
      ls_bsadmod-check = 'X'.
      APPEND ls_bsadmod TO gt_bsad.
      CLEAR ls_bsadmod.
    ENDLOOP.

    SELECT * FROM bsik
      APPENDING TABLE lt_bsik
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

    LOOP AT lt_bsik INTO ls_bsik.
      MOVE-CORRESPONDING ls_bsik TO ls_bsikmod.
      ls_bsikmod-orig = 'DTAB'.
      ls_bsikmod-control = '@5B@'.
      ls_bsikmod-check = 'X'.
      APPEND ls_bsikmod TO gt_bsik.
      CLEAR ls_bsikmod.
    ENDLOOP.

    SELECT * FROM bsak
      APPENDING TABLE lt_bsak
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr
      .

    LOOP AT lt_bsak INTO ls_bsak.
      MOVE-CORRESPONDING ls_bsak TO ls_bsakmod.
      ls_bsakmod-orig = 'DTAB'.
      ls_bsakmod-control = '@5B@'.
      ls_bsakmod-check = 'X'.
      APPEND ls_bsakmod TO gt_bsak.
      CLEAR ls_bsakmod.
    ENDLOOP.
  ENDIF.

  SELECT * FROM bseg_add
    APPENDING TABLE lt_bseg_add
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_bseg_add INTO ls_bseg_add.
    MOVE-CORRESPONDING ls_bseg_add TO ls_bseg_addmod.
    ls_bseg_addmod-orig = 'DTAB'.
    ls_bseg_addmod-control = '@5B@'.
    ls_bseg_addmod-check = 'X'.
    APPEND ls_bseg_addmod TO gt_bseg_add.
    CLEAR ls_bseg_addmod.
  ENDLOOP.

  SELECT * FROM fagl_splinfo
    APPENDING TABLE lt_splinfo
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_splinfo INTO ls_splinfo.
    MOVE-CORRESPONDING ls_splinfo TO ls_splinfomod.
    ls_splinfomod-orig = 'DTAB'.
    ls_splinfomod-control = '@5B@'.
    ls_splinfomod-check = 'X'.
    APPEND ls_splinfomod TO gt_splinfo.
    CLEAR ls_splinfomod.
  ENDLOOP.

  SELECT * FROM fagl_splinfo_val
    APPENDING TABLE lt_splinfo_val
    WHERE bukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    .

  LOOP AT lt_splinfo_val INTO ls_splinfo_val.
    MOVE-CORRESPONDING ls_splinfo_val TO ls_splinfo_valmod.
    ls_splinfo_valmod-orig = 'DTAB'.
    ls_splinfo_valmod-control = '@5B@'.
    ls_splinfo_valmod-check = 'X'.
    APPEND ls_splinfo_valmod TO gt_splinfo_val.
    CLEAR ls_splinfo_valmod.
  ENDLOOP.

  LOOP AT lt_t800a INTO ls_t800a.
    IF ls_t800a IS NOT INITIAL.
      TRY.
          SELECT * FROM (ls_t800a)
            APPENDING CORRESPONDING FIELDS OF TABLE gt_glu1
            WHERE rbukrs = ls_bkpf-bukrs
            AND belnr = ls_bkpf-belnr
            AND ryear = ls_bkpf-gjahr
            .
        CATCH cx_sy_dynamic_osql_semantics.
      ENDTRY.
    ENDIF.

    LOOP AT gt_glu1 INTO ls_glu1.
      MOVE-CORRESPONDING ls_glu1 TO ls_glu1moddisp.
      ls_glu1moddisp-zzz_tabname = ls_t800a.
      ls_glu1moddisp-control = '@5B@'.
      ls_glu1moddisp-check = 'X'.
      ls_glu1moddisp-orig = 'DTAB'.
      APPEND ls_glu1moddisp TO gt_glu1mod.
    ENDLOOP.
    CLEAR gt_glu1.
  ENDLOOP.

ENDFORM.                    "check_databases_subseq

*&---------------------------------------------------------------------*
*&      Form  transfer_noninitial
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->I_STR1     text
*      -->X_STR2     text
*----------------------------------------------------------------------*
FORM transfer_noninitial USING i_str1
                         CHANGING
                               x_str2.

  DATA: descr_ref TYPE REF TO cl_abap_structdescr.
  DATA: ls_line TYPE abap_compdescr.

  FIELD-SYMBOLS: <fs1>,
                 <fs2>.

  descr_ref ?= cl_abap_typedescr=>describe_by_data( i_str1 ).

  LOOP AT  descr_ref->components INTO ls_line.
    ASSIGN COMPONENT sy-tabix OF STRUCTURE i_str1 TO <fs1>.
    IF sy-subrc NE 0.
      EXIT.
    ENDIF.

    IF NOT <fs1> IS INITIAL.
      ASSIGN COMPONENT sy-tabix OF STRUCTURE x_str2 TO <fs2>.
      <fs2> = <fs1>.
    ENDIF.

  ENDLOOP.
ENDFORM.                    "transfer_noninitial

*&---------------------------------------------------------------------*
*&      Form  display_protocol
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display_protocol.
  DATA lo_alv               TYPE REF TO cl_salv_table.
  DATA lex_message          TYPE REF TO cx_salv_msg.
  DATA lo_layout_settings   TYPE REF TO cl_salv_layout.
  DATA lo_layout_key        TYPE        salv_s_layout_key.
  DATA lo_columns           TYPE REF TO cl_salv_columns_table.
  DATA lo_column            TYPE REF TO cl_salv_column.
  DATA lex_not_found        TYPE REF TO cx_salv_not_found.
  DATA lo_functions         TYPE REF TO cl_salv_functions_list.
  DATA lo_display_settings  TYPE REF TO cl_salv_display_settings.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lo_alv
        CHANGING
          t_table      = gt_protocol_store[] ).
    CATCH cx_salv_msg INTO lex_message.
  ENDTRY.

*** set the ALV layout.
  lo_layout_settings   = lo_alv->get_layout( ).
  lo_layout_key-report = sy-repid.
  lo_layout_settings->set_key( lo_layout_key ).
  lo_layout_settings->set_save_restriction( if_salv_c_layout=>restrict_none ).

*** set the ALV toolbar.
  lo_functions = lo_alv->get_functions( ).
  lo_functions->set_all( ).

*** optimize ALV columns size.
  lo_columns = lo_alv->get_columns( ).
  lo_columns->set_optimize( ).

*** set zebra display.
  lo_display_settings = lo_alv->get_display_settings( ).
  lo_display_settings->set_striped_pattern( if_salv_c_bool_sap=>true ).

*** set ALV header title.
  lo_display_settings->set_list_header( 'Modification Log.' ).

*** display the ALV.
  lo_alv->display( ).

ENDFORM.                    "display_protocol

*&---------------------------------------------------------------------*
*&      Form  display_doclist
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM display_doclist.
  DATA lo_alv               TYPE REF TO cl_salv_table.
  DATA lex_message          TYPE REF TO cx_salv_msg.
  DATA lo_layout_settings   TYPE REF TO cl_salv_layout.
  DATA lo_layout_key        TYPE        salv_s_layout_key.
  DATA lo_columns           TYPE REF TO cl_salv_columns_table.
  DATA lo_column            TYPE REF TO cl_salv_column.
  DATA lex_not_found        TYPE REF TO cx_salv_not_found.
  DATA lo_functions         TYPE REF TO cl_salv_functions_list.
  DATA lo_display_settings  TYPE REF TO cl_salv_display_settings.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lo_alv
        CHANGING
          t_table      = gt_doclist_store[] ).
    CATCH cx_salv_msg INTO lex_message.
  ENDTRY.

*** set the ALV layout.
  lo_layout_settings   = lo_alv->get_layout( ).
  lo_layout_key-report = sy-repid.
  lo_layout_settings->set_key( lo_layout_key ).
  lo_layout_settings->set_save_restriction( if_salv_c_layout=>restrict_none ).

*** set the ALV toolbar.
  lo_functions = lo_alv->get_functions( ).
  lo_functions->set_all( ).

*** optimize ALV columns size.
  lo_columns = lo_alv->get_columns( ).
  lo_columns->set_optimize( ).

*** set zebra display.
  lo_display_settings = lo_alv->get_display_settings( ).
  lo_display_settings->set_striped_pattern( if_salv_c_bool_sap=>true ).

*** set ALV header title.
  lo_display_settings->set_list_header( 'Document List' ).

*** display the ALV.
  lo_alv->display( ).
ENDFORM.                    "display_doclist


FORM cross_check.

  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_glu1 LIKE LINE OF gt_glu1mod.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsad LIKE LINE OF gt_bsad.
  DATA ld_ktopl TYPE t001-ktopl.
  DATA ls_ska1 TYPE ska1.
  DATA ls_skb1 TYPE skb1.
  DATA ld_index_glu1 TYPE sy-tabix.
  DATA ld_index_bkpf TYPE sy-tabix.
  DATA ld_index_bseg TYPE sy-tabix.
  DATA ld_index_bsis TYPE sy-tabix.
  DATA ld_index_bsas TYPE sy-tabix.
  DATA ld_index_bsid TYPE sy-tabix.
  DATA ld_index_bsad TYPE sy-tabix.
  DATA ld_index_bsik TYPE sy-tabix.
  DATA ld_index_bsak TYPE sy-tabix.
  DATA ls_bseg_store LIKE ls_bseg.
  DATA ls_glu1_store LIKE ls_glu1.
  DATA ls_bkpf_store LIKE ls_bkpf.
  DATA ls_bseg_add_store LIKE ls_bseg_add.

  LOOP AT gt_glu1mod INTO ls_glu1 WHERE buzei IS NOT INITIAL
    AND orig NE 'CORR'
    AND check NE 'O'.
    ld_index_glu1 = sy-tabix.

    CLEAR: ls_bkpf, ls_bseg, ls_bseg_add, ls_bsis, ls_bsas, ls_bsik, ls_bsak, ls_bsid, ls_bsad.

    IF ls_glu1-bstat = ' '.
      READ TABLE gt_bseg WITH KEY bukrs = ls_glu1-rbukrs
                                  belnr = ls_glu1-belnr
                                  gjahr = ls_glu1-gjahr
                                  buzei = ls_glu1-buzei
                         INTO ls_bseg.
      ld_index_bseg = sy-tabix.
    ELSE.
      READ TABLE gt_bseg_add WITH KEY bukrs = ls_glu1-rbukrs
                            belnr = ls_glu1-belnr
                            gjahr = ls_glu1-gjahr
                            buzei = ls_glu1-buzei
                   INTO ls_bseg_add.
      MOVE-CORRESPONDING ls_bseg_add TO ls_bseg.
      ld_index_bseg = sy-tabix.
    ENDIF.

    IF acdoca_active = 0.
      IF ls_bseg-augbl IS INITIAL.
        READ TABLE gt_bsis WITH KEY bukrs = ls_glu1-rbukrs
                              belnr = ls_glu1-belnr
                              gjahr = ls_glu1-gjahr
                              buzei = ls_glu1-buzei
                     INTO ls_bsis.
        ld_index_bsis = sy-tabix.
        IF ls_bseg-koart = 'K'.
          READ TABLE gt_bsik WITH KEY bukrs = ls_glu1-rbukrs
                  belnr = ls_glu1-belnr
                  gjahr = ls_glu1-gjahr
                  buzei = ls_glu1-buzei
         INTO ls_bsik.
          ld_index_bsik = sy-tabix.
        ELSEIF ls_bseg-koart = 'D'.
          READ TABLE gt_bsid WITH KEY bukrs = ls_glu1-rbukrs
                belnr = ls_glu1-belnr
                gjahr = ls_glu1-gjahr
                buzei = ls_glu1-buzei
       INTO ls_bsid.
          ld_index_bsid = sy-tabix.
        ENDIF.
      ELSE.
        READ TABLE gt_bsas WITH KEY bukrs = ls_glu1-rbukrs
                 belnr = ls_glu1-belnr
                 gjahr = ls_glu1-gjahr
                 buzei = ls_glu1-buzei
        INTO ls_bsas.
        ld_index_bsas = sy-tabix.
        IF ls_bseg-koart = 'K'.
          READ TABLE gt_bsak WITH KEY bukrs = ls_glu1-rbukrs
                  belnr = ls_glu1-belnr
                  gjahr = ls_glu1-gjahr
                  buzei = ls_glu1-buzei
         INTO ls_bsak.
          ld_index_bsak = sy-tabix.
        ELSEIF ls_bseg-koart = 'D'.
          READ TABLE gt_bsad WITH KEY bukrs = ls_glu1-rbukrs
                belnr = ls_glu1-belnr
                gjahr = ls_glu1-gjahr
                buzei = ls_glu1-buzei
       INTO ls_bsad.
          ld_index_bsad = sy-tabix.
        ENDIF.
      ENDIF.

    ENDIF.
    READ TABLE gt_bkpf WITH KEY bukrs = ls_glu1-rbukrs
                                belnr = ls_glu1-belnr
                                gjahr = ls_glu1-gjahr
                       INTO ls_bkpf.
    ld_index_bkpf = sy-tabix.


    IF ls_glu1-rbukrs = gd_bukrs_ktopl.
      ld_ktopl = gd_ktopl.
    ELSE.
      gd_bukrs_ktopl = ld_ktopl.
      SELECT SINGLE ktopl INTO ld_ktopl FROM t001 WHERE bukrs = ls_glu1-rbukrs.
      gd_ktopl = ld_ktopl.
    ENDIF.
    SELECT SINGLE * FROM ska1 INTO ls_ska1
  WHERE ktopl = ld_ktopl
  AND saknr = ls_glu1-racct.

    SELECT SINGLE * FROM skb1 INTO ls_skb1
      WHERE bukrs = ls_glu1-rbukrs
      AND saknr = ls_glu1-racct.

    ls_bkpf_store = ls_bkpf.
    ls_bseg_store = ls_bseg.
    ls_glu1_store = ls_glu1.

    IF ld_index_glu1 = 0 OR ld_index_bkpf = 0 OR ld_index_bseg = 0.
      IF ld_index_glu1 NE 0.
        MOVE-CORRESPONDING ls_glu1 TO ls_flag.
        ls_flag-bukrs = ls_glu1-rbukrs.
      ELSEIF ld_index_bseg NE 0.
        MOVE-CORRESPONDING ls_bseg TO ls_flag.
      ELSEIF ld_index_bkpf NE 0.
        MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      ENDIF.
      ls_flag-control = '@5C@'.
      ls_flag-error = 'ERROR WHILE COMPARE'.
    ELSE.
      IF p_cbstat IS NOT INITIAL.
        PERFORM compare_bstat CHANGING ls_bkpf ls_bseg ls_glu1
                               ld_index_bkpf
                               ld_index_bseg
                               ld_index_glu1.

      ENDIF.

      IF acdoca_active = 1.
        IF p_cawxxx IS NOT INITIAL AND ls_bkpf-bstat NE 'L'.
          PERFORM compare_awkey CHANGING ls_bkpf ls_bseg ls_glu1
                                     ld_index_bkpf
                                     ld_index_bseg
                                     ld_index_glu1.
        ENDIF.

        IF p_cdat IS NOT INITIAL.
          PERFORM compare_bldat CHANGING ls_bkpf ls_bseg ls_glu1
                                         ld_index_bkpf
                                         ld_index_bseg
                                         ld_index_glu1.
        ENDIF.

        IF p_cblart IS NOT INITIAL.
          PERFORM compare_blart CHANGING ls_bkpf ls_bseg ls_glu1
                                         ld_index_bkpf
                                         ld_index_bseg
                                         ld_index_glu1.
        ENDIF.
      ENDIF.

      IF p_cawxxx IS NOT INITIAL.
        PERFORM compare_awtyp CHANGING ls_bkpf ls_bseg ls_glu1
                                       ld_index_bkpf
                                       ld_index_bseg
                                       ld_index_glu1.


        PERFORM compare_awsys CHANGING ls_bkpf ls_bseg ls_glu1
                                   ld_index_bkpf
                                   ld_index_bseg
                                   ld_index_glu1.
      ENDIF.

      IF p_cdat IS NOT INITIAL.
        PERFORM compare_budat CHANGING ls_bkpf ls_bseg ls_glu1
                                       ld_index_bkpf
                                       ld_index_bseg
                                       ld_index_glu1.

        PERFORM compare_monat CHANGING ls_bkpf ls_bseg ls_glu1
                                   ld_index_bkpf
                                   ld_index_bseg
                                   ld_index_glu1.
      ENDIF.

      IF p_ccurr IS NOT INITIAL.
        PERFORM compare_amounts CHANGING ls_bkpf ls_bseg ls_glu1
                                       ld_index_bkpf
                                       ld_index_bseg
                                       ld_index_glu1.
      ENDIF.

      IF p_cusnam IS NOT INITIAL.
        PERFORM compare_usnam CHANGING ls_bkpf ls_bseg ls_glu1
                                       ld_index_bkpf
                                       ld_index_bseg
                                       ld_index_glu1.
      ENDIF.

      IF acdoca_active = 1.
        IF p_cstorn IS NOT INITIAL.
          PERFORM compare_xreversed CHANGING ls_bkpf ls_bseg ls_glu1
                                     ld_index_bkpf
                                     ld_index_bseg
                                     ld_index_glu1.

          PERFORM compare_xreversal CHANGING ls_bkpf ld_index_bkpf.

          PERFORM compare_xreversing CHANGING ls_bkpf ls_bseg ls_glu1
                                 ld_index_bkpf
                                 ld_index_bseg
                                 ld_index_glu1.


          PERFORM compare_aworg_rev CHANGING ls_bkpf ls_bseg ls_glu1
                               ld_index_bkpf
                               ld_index_bseg
                               ld_index_glu1.


          PERFORM compare_awref_rev CHANGING ls_bkpf ls_bseg ls_glu1
                                 ld_index_bkpf
                                 ld_index_bseg
                                 ld_index_glu1.
        ENDIF.

        IF p_cclear IS NOT INITIAL.
          PERFORM compare_augdt CHANGING ls_bkpf ls_bseg ls_glu1
                                 ld_index_bkpf
                                 ld_index_bseg
                                 ld_index_glu1.


          PERFORM compare_augbl CHANGING ls_bkpf ls_bseg ls_glu1
                           ld_index_bkpf
                           ld_index_bseg
                           ld_index_glu1.


          PERFORM compare_auggj CHANGING ls_bkpf ls_bseg ls_glu1
                     ld_index_bkpf
                     ld_index_bseg
                     ld_index_glu1.
        ENDIF.

        IF p_cktosl IS NOT INITIAL.
          PERFORM compare_ktosl CHANGING ls_bkpf ls_bseg ls_glu1
               ld_index_bkpf
               ld_index_bseg
               ld_index_glu1.
        ENDIF.

        IF p_czuonr IS NOT INITIAL.
          PERFORM compare_zuonr CHANGING ls_bkpf ls_bseg ls_glu1
         ld_index_bkpf
         ld_index_bseg
         ld_index_glu1.
        ENDIF.

        IF p_caccou IS NOT INITIAL.
          PERFORM compare_koart CHANGING ls_bkpf ls_bseg ls_glu1
                   ld_index_bkpf
                   ld_index_bseg
                   ld_index_glu1.

          IF ls_bseg-koart = 'D' AND ls_bkpf-bstat NE 'L'.
            PERFORM compare_kunnr CHANGING ls_bkpf ls_bseg ls_glu1
           ld_index_bkpf
           ld_index_bseg
           ld_index_glu1.
          ENDIF.

          IF ls_bseg-koart = 'K' AND ls_bkpf-bstat NE 'L'.
            PERFORM compare_lifnr CHANGING ls_bkpf ls_bseg ls_glu1
      ld_index_bkpf
      ld_index_bseg
      ld_index_glu1.
          ENDIF.
        ENDIF.

      ENDIF.

      IF p_cumskz IS NOT INITIAL AND ls_bkpf-bstat NE 'L'.
        PERFORM compare_umskz CHANGING ls_bkpf ls_bseg ls_glu1
                   ld_index_bkpf
                   ld_index_bseg
                   ld_index_glu1.
      ENDIF.

      IF p_cbschl IS NOT INITIAL.
        PERFORM compare_bschl CHANGING ls_bkpf ls_bseg ls_glu1
                   ld_index_bkpf
                   ld_index_bseg
                   ld_index_glu1.
      ENDIF.

      IF p_cshkzg IS NOT INITIAL.
        PERFORM compare_shkzg CHANGING ls_bkpf ls_bseg ls_glu1
             ld_index_bkpf
             ld_index_bseg
             ld_index_glu1.
      ENDIF.

      IF p_cbewar IS NOT INITIAL.
        PERFORM compare_bewar CHANGING ls_bkpf ls_bseg ls_glu1
             ld_index_bkpf
             ld_index_bseg
             ld_index_glu1.
      ENDIF.

      IF p_caccou IS NOT INITIAL.
        PERFORM compare_hkont CHANGING ls_bkpf ls_bseg ls_glu1
         ld_index_bkpf
         ld_index_bseg
         ld_index_glu1.
      ENDIF.

      IF p_cflags IS NOT INITIAL.
        PERFORM compare_master_data CHANGING ls_bkpf ls_bseg ls_glu1
         ls_ska1 ls_skb1
         ld_index_bkpf
         ld_index_bseg
         ld_index_glu1.
      ENDIF.

*V2.2
      IF p_cvbund IS NOT INITIAL.
        PERFORM compare_vbund CHANGING ls_bkpf ls_bseg ls_glu1
         ld_index_bkpf
         ld_index_bseg
         ld_index_glu1.
      ENDIF.

      IF ls_bsis IS NOT INITIAL.
        PERFORM check_bsis USING ls_bkpf ls_bseg ls_bsis ld_index_bsis.
      ENDIF.

      IF ls_bsik IS NOT INITIAL.
        PERFORM check_bsik USING ls_bkpf ls_bseg ls_bsik ld_index_bsik.
      ENDIF.

      IF ls_bsid IS NOT INITIAL.
        PERFORM check_bsid USING ls_bkpf ls_bseg ls_bsid ld_index_bsid.
      ENDIF.

      IF ls_bsas IS NOT INITIAL.
        PERFORM check_bsas USING ls_bkpf ls_bseg ls_bsas ld_index_bsas.
      ENDIF.

      IF ls_bsad IS NOT INITIAL.
        PERFORM check_bsad USING ls_bkpf ls_bseg ls_bsad ld_index_bsad.
      ENDIF.

      IF ls_bsak IS NOT INITIAL.
        PERFORM check_bsak USING ls_bkpf ls_bseg ls_bsak ld_index_bsak.
      ENDIF.

      IF ls_bkpf-control = '@5D@' AND ls_bkpf-orig NE 'BUIL' AND ls_bkpf-orig NE 'EXTR'.
        ls_bkpf-orig = 'CORR'.
        IF ls_bkpf-pairing IS INITIAL.
          ADD 1 TO pairing_counter.
          ls_bkpf-pairing = pairing_counter.
          MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
          ls_bkpf_store-error = ls_bkpf-error.
          ls_bkpf_store-control = ls_bkpf-control.
          ls_bkpf_store-pairing = pairing_counter.
          ls_bkpf_store-check = 'O'.
          APPEND ls_bkpf_store TO gt_bkpf.
        ENDIF.
      ENDIF.

      IF ls_bseg-control = '@5D@' AND ls_bseg-orig NE 'BUIL' AND ls_bseg-orig NE 'EXTR'.
        ls_bseg-orig = 'CORR'.
        IF ls_bseg-pairing IS INITIAL.
          ADD 1 TO pairing_counter.
          ls_bseg-pairing = pairing_counter.
          IF ls_bkpf-bstat NE 'L'.
            MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
          ELSE.
            MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
            MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
          ENDIF.
          ls_bseg_store-error = ls_bseg-error.
          ls_bseg_store-control = ls_bseg-control.
          ls_bseg_store-check = 'O'.
          ls_bseg_store-pairing = ls_bseg-pairing.
          IF ls_bkpf-bstat = ' '.
            APPEND ls_bseg_store TO gt_bseg.
          ELSE.
            MOVE-CORRESPONDING ls_bseg_store TO ls_bseg_add_store.
            APPEND ls_bseg_add_store TO gt_bseg_add.
          ENDIF.
        ENDIF.
      ENDIF.

      IF ls_glu1-control = '@5D@' AND ls_glu1-orig NE 'BUIL' AND ls_glu1-orig NE 'EXTR'.
        ls_glu1-orig = 'CORR'.
        IF ls_glu1-pairing IS INITIAL.
          ADD 1 TO pairing_counter.
          ls_glu1-pairing = pairing_counter.
          MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
          ls_glu1_store-error = ls_glu1-error.
          ls_glu1_store-control = ls_glu1-control.
          ls_glu1_store-check = 'O'.
          ls_glu1_store-pairing = pairing_counter.
          APPEND ls_glu1_store TO gt_glu1mod.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
  LOOP AT gt_glu1mod INTO ls_glu1 WHERE buzei IS INITIAL
    AND orig NE 'CORR'
    AND check NE 'O'.
    ld_index_glu1 = sy-tabix.
    ls_glu1_store = ls_glu1.
    IF ls_glu1-rtcur IS INITIAL.
      DATA ld_xsalh TYPE skb1-xsalh.
      ld_error = 'X'.
      SELECT SINGLE xsalh FROM skb1 INTO ld_xsalh WHERE bukrs = ls_glu1-rbukrs AND saknr = ls_glu1-racct.
      IF ld_xsalh = 'X'.
        ls_glu1-rtcur = ls_bkpf-hwaer.
      ELSE.
        ls_glu1-rtcur = ls_bkpf-waers.
      ENDIF.
      ls_glu1-control = '@5D@'.
      ls_glu1-error = 'RTCUR MISSING'.
    ENDIF.
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag.
      ls_flag-bukrs = ls_glu1-rbukrs.
      IF ls_glu1-control = '@5D@' AND ls_glu1-orig NE 'BUIL' AND ls_glu1-orig NE 'EXTR'.
        ls_glu1-orig = 'CORR'.
        IF ls_glu1-pairing IS INITIAL.
          ADD 1 TO pairing_counter.
          ls_glu1-pairing = pairing_counter.
          MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
          ls_glu1_store-error = ls_glu1-error.
          ls_glu1_store-control = ls_glu1-control.
          ls_glu1_store-check = 'O'.
          ls_glu1_store-pairing = pairing_counter.
          APPEND ls_glu1_store TO gt_glu1mod.
        ENDIF.
      ENDIF.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDLOOP.
ENDFORM.

FORM compare_master_data CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ls_ska1 TYPE ska1
                            ls_skb1 TYPE skb1
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ld_xopvw_ac> TYPE any.
  DATA ld_xopvw_ac TYPE c LENGTH 1.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  CLEAR ls_flag.
  IF ls_bseg-koart = 'K'
    OR ls_bseg-koart = 'D'.
    IF ls_bseg-xhres NE ls_skb1-xkres.
      ld_error = 'X'.
      ls_bseg-xhres = ls_skb1-xkres.
      ls_bseg-control = '@5D@'.
      ls_bseg-error = 'XKRES MISMATCH'.
    ENDIF.
  ELSE.
    IF ls_bseg-xkres NE ls_skb1-xkres AND ls_bkpf-bstat NE 'L'.
      ls_bseg-xkres = ls_skb1-xkres.
      ls_bseg-control = '@5D@'.
      ld_error = 'X'.
      ls_bseg-error = 'XKRES MISMATCH'.
    ENDIF.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bseg-xbilk NE ls_ska1-xbilk.
    ls_bseg-xbilk = ls_ska1-xbilk.
    ls_bseg-control = '@5D@'.
    ld_error = 'X'.
    ls_bseg-error = 'XBILK MISMATCH'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bseg-gvtyp NE ls_ska1-gvtyp.
    ls_bseg-gvtyp = ls_ska1-gvtyp.
    ls_bseg-control = '@5D@'.
    ld_error = 'X'.
    ls_bseg-error = 'GVTYP MISMATCH'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF acdoca_active = 1.
    ASSIGN COMPONENT 'XOPVW' OF STRUCTURE ls_glu1 TO <ld_xopvw_ac>.
    ld_xopvw_ac = <ld_xopvw_ac>.
  ELSE.
    ld_xopvw_ac = ls_bseg-xopvw.
  ENDIF.
  CLEAR ls_flag.

  IF ls_skb1-mitkz = 'D'
    OR ls_skb1-mitkz = 'K'.
    ls_skb1-xopvw = 'X'.
    ls_skb1-xlgclr = ' '.
  ENDIF.

  IF ls_bseg-xopvw NE ls_skb1-xopvw.
    ls_bseg-xopvw = ls_skb1-xopvw.
    ls_bseg-control = '@5D@'.
    ld_error = 'X'.
    ls_bseg-error = 'XOPVW MISMATCH'.
  ENDIF.

  IF ls_bseg-xlgclr NE ls_skb1-xlgclr.
    ls_bseg-xlgclr = ls_skb1-xlgclr.
    ls_bseg-control = '@5D@'.
    ld_error = 'X'.
    ls_bseg-error = 'XLGCLR MISMATCH'.
  ENDIF.

  IF ld_xopvw_ac = 'X' AND ( ls_skb1-xopvw = ' ' AND ls_skb1-xlgclr = ' ') .
    ld_xopvw_ac = ' '.
    ls_glu1-control = '@5D@'.
    ld_error = 'X'.
    ls_glu1-error = 'XOPVW MISMATCH'.
  ENDIF.

  IF ld_xopvw_ac = ' ' AND ( ls_skb1-xopvw = 'X' OR ls_skb1-xlgclr = 'X').
    ld_xopvw_ac = 'X'.
    ls_glu1-control = '@5D@'.
    ld_error = 'X'.
    ls_glu1-error = 'XOPVW MISMATCH'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'XOPVW' AND acdoca_active = 1.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      IF acdoca_active = 1.
        <ld_xopvw_ac> = ld_xopvw_ac.
      ENDIF.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'XOPVW' OR ls_bseg-error(6) = 'XLGCLR'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.


ENDFORM.

FORM compare_hkont CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_racct TYPE bseg-hkont.

  CLEAR ls_flag.

  IF ls_glu1-racct IS NOT INITIAL AND ls_bseg-hkont IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
  WHERE  racct NE ld_clear_racct
         AND racct NE ls_glu1-racct
         AND buzei = ls_glu1-buzei
         AND rbukrs = ls_glu1-rbukrs
         AND gjahr = ls_glu1-gjahr
         AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-hkont NE ls_glu1-racct AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-hkont IS INITIAL.
        ls_bseg-hkont = ls_glu1-racct.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'HKONT MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-racct IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-racct = ls_bseg-hkont.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RACCT MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-racct IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1-racct = ls_bseg-hkont.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RACCT MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-hkont NE ls_glu1-racct.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'RACCT MISMATCH'.
      ls_bseg-error = 'HKONT MISMATCH'.
      ld_error = 'X'.
    ELSEIF ls_bseg-hkont IS INITIAL AND ls_glu1-racct IS INITIAL.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'HKONT MISSING'.
      ls_glu1-error = 'RACCT MISSING'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'RACCT MISMATCH'.
    ls_bseg-error = 'HKONT MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'RACCT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'HKONT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_bewar CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_rmvct TYPE bseg-bewar.

  CLEAR ls_flag.

  IF ls_glu1-rmvct IS NOT INITIAL AND ls_bseg-bewar IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
  WHERE  rmvct NE ld_clear_rmvct
       AND rmvct NE ls_glu1-rmvct
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-bewar NE ls_glu1-rmvct AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-bewar IS INITIAL.
        ls_bseg-bewar = ls_glu1-rmvct.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'BEWAR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-rmvct IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-rmvct = ls_bseg-bewar.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RMVCT MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-rmvct IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1-rmvct = ls_bseg-bewar.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RMVCT MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-bewar NE ls_glu1-rmvct.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'BEWAR MISMATCH'.
      ls_glu1-error = 'RMVCT MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'BEWAR MISMATCH'.
    ls_glu1-error = 'RASSC MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'RMVCT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'BEWAR'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_vbund CHANGING ls_bkpf LIKE LINE OF gt_bkpf "V2.2
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_rassc TYPE bseg-vbund.

  CLEAR ls_flag.

  IF ls_glu1-rassc IS NOT INITIAL AND ls_bseg-vbund IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
  WHERE  rassc NE ld_clear_rassc
       AND rassc NE ls_glu1-rassc
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-vbund NE ls_glu1-rassc AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-vbund IS INITIAL.
        ls_bseg-vbund = ls_glu1-rassc.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'VBUND MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-rassc IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-rassc = ls_bseg-vbund.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RASSC MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-rassc IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1-rassc = ls_bseg-vbund.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'RASSC MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-vbund NE ls_glu1-rassc.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'VBUND MISMATCH'.
      ls_glu1-error = 'RASSC MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'VBUND MISMATCH'.
    ls_glu1-error = 'RASSC MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'RASSC'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'VBUND'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_zuonr CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_zuonr TYPE bseg-zuonr.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_zuonr TYPE bseg-zuonr.

  FIELD-SYMBOLS <ls_glu1_zuonr> TYPE any.

  ASSIGN COMPONENT 'ZUONR' OF STRUCTURE ls_glu1 TO <ls_glu1_zuonr>.
  ls_glu1_zuonr = <ls_glu1_zuonr>.

  CLEAR ls_flag.

  IF <ls_glu1_zuonr> IS ASSIGNED AND ls_glu1_zuonr IS NOT INITIAL AND ls_bseg-zuonr IS INITIAL.
    IF acdoca_active = 1.
      DATA zuonr_conditions TYPE c LENGTH 200.
      zuonr_conditions = 'zuonr NE ld_clear_zuonr AND zuonr NE ls_glu1_zuonr AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
      WHERE  (zuonr_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-zuonr NE ls_glu1_zuonr AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-zuonr IS INITIAL.
        ls_bseg-zuonr = ls_glu1_zuonr.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'ZUONR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_zuonr IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_zuonr = ls_bseg-zuonr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'ZUONR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_zuonr IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1_zuonr = ls_bseg-zuonr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'ZUONR MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-zuonr NE ls_glu1_zuonr.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'ZUONR MISMATCH'.
      ls_glu1-error = 'ZUONR MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'ZUONR MISMATCH'.
    ls_glu1-error = 'ZUONR MISMATCH'.
    ld_error = 'X'.
  ENDIF.
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'ZUONR'.
      <ls_glu1_zuonr> = ls_glu1_zuonr.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'ZUONR'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_kunnr CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_kunnr TYPE bseg-kunnr.

  CLEAR ls_flag.

  IF ls_glu1-kunnr IS NOT INITIAL AND ls_bseg-kunnr IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE kunnr NE ld_clear_kunnr
       AND kunnr NE ls_glu1-kunnr
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.

    IF ls_bseg-kunnr NE ls_glu1-kunnr AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-kunnr IS INITIAL.
        ls_bseg-kunnr = ls_glu1-kunnr.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'KUNNR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-kunnr IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-kunnr = ls_bseg-kunnr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KUNNR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-kunnr IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1-kunnr = ls_bseg-kunnr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KUNNR MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-kunnr NE ls_glu1-kunnr.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'KUNNR MISMATCH'.
      ls_glu1-error = 'KUNNR MISMATCH'.
      ld_error = 'X'.

    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'KUNNR MISMATCH'.
    ls_glu1-error = 'KUNNR MISMATCH'.
    ld_error = 'X'.

  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'KUNNR'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSEIF ls_bseg-error(5) = 'KUNNR'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_lifnr CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_lifnr TYPE bseg-lifnr.

  CLEAR ls_flag.

  IF ls_glu1-lifnr IS NOT INITIAL AND ls_bseg-lifnr IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE lifnr NE ld_clear_lifnr
       AND lifnr NE ls_glu1-lifnr
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-lifnr NE ls_glu1-lifnr AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-lifnr IS INITIAL.
        ls_bseg-lifnr = ls_glu1-lifnr.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'LIFNR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-lifnr IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-lifnr = ls_bseg-lifnr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'LIFNR MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-lifnr IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1-lifnr = ls_bseg-lifnr.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'LIFNR MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-lifnr NE ls_glu1-lifnr.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'LIFNR MISMATCH'.
      ls_glu1-error = 'LIFNR MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'LIFNR MISMATCH'.
    ls_glu1-error = 'LIFNR MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'LIFNR'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSEIF ls_bseg-error(5) = 'LIFNR'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_ktosl CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_ktosl TYPE bseg-ktosl.

  CLEAR ls_flag.

  IF ls_glu1-ktosl IS NOT INITIAL AND ls_bseg-ktosl IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE ktosl NE ld_clear_ktosl
       AND ktosl NE ls_glu1-ktosl
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.

  IF sy-subrc = 4.

    CLEAR ls_flag.
    IF ls_bseg-ktosl NE ls_glu1-ktosl AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-ktosl IS INITIAL.
        ls_bseg-ktosl = ls_glu1-ktosl.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'KTOSL MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-ktosl IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-ktosl = ls_bseg-ktosl.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KTOSL MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-ktosl IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1-ktosl = ls_bseg-ktosl.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KTOSL MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-ktosl NE ls_glu1-ktosl.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'KTOSL MISMATCH'.
      ls_glu1-error = 'KTOSL MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'KTOSL MISMATCH'.
    ls_glu1-error = 'KTOSL MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'KTOSL'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'KTOSL'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_shkzg CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_shkzg TYPE bseg-shkzg.

  CLEAR ls_flag.

  IF ls_glu1-drcrk IS NOT INITIAL AND ls_bseg-shkzg IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE drcrk NE ld_clear_shkzg
       AND drcrk NE ls_glu1-drcrk
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ( ls_bseg-shkzg NE ls_glu1-drcrk AND ls_bseg-xnegp = ' ' AND ls_bseg-control NE '@5C@' )
      OR ( ls_bseg-shkzg = ls_glu1-drcrk AND ls_bseg-xnegp = 'X' AND ls_bseg-control NE '@5C@' ).
      IF ls_bseg-shkzg IS INITIAL.
        ls_bseg-shkzg = ls_glu1-drcrk.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'SHKZG MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-drcrk IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-drcrk = ls_bseg-shkzg.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'DRCRK MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-drcrk IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1-drcrk = ls_bseg-shkzg.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'DRCRK MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ( ls_bseg-shkzg NE ls_glu1-drcrk AND ls_bseg-xnegp = ' ' )
      OR ( ls_bseg-shkzg = ls_glu1-drcrk AND ls_bseg-xnegp = 'X' ).
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'SHKZG MISMATCH'.
      ls_glu1-error = 'DRCRK MISMATCH'.
      ld_error = 'X'.
    ELSEIF ls_bseg-shkzg IS INITIAL AND ls_glu1-drcrk IS INITIAL.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'BSCHL MISSING'.
      ls_glu1-error = 'BSCHL MISSING'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'SHKZG MISMATCH'.
    ls_glu1-error = 'DRCRK MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'SHKZG'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'SHKZG'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.



FORM compare_umskz CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_umskz TYPE bseg-umskz.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ld_ktopl TYPE ska1-ktopl.
  DATA ld_umskz TYPE t074-umskz.

  FIELD-SYMBOLS <ls_glu1_umskz> TYPE any.

  IF acdoca_active = 1.
    ASSIGN COMPONENT 'UMSKZ' OF STRUCTURE ls_glu1 TO <ls_glu1_umskz>.
    ls_glu1_umskz = <ls_glu1_umskz>.
  ELSE.
    ls_glu1_umskz = ls_bseg-umskz.
  ENDIF.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_umskz TYPE bseg-umskz.

  CLEAR ls_flag.

  IF ls_bseg-umskz IS NOT INITIAL.
    SELECT SINGLE ktopl FROM t001
      INTO ld_ktopl
      WHERE bukrs = ls_bseg-bukrs.
    SELECT SINGLE umskz FROM t074
      INTO ld_umskz
      WHERE skont = ls_bseg-hkont
      AND umskz = ls_bseg-umskz
      AND ktopl = ld_ktopl
      AND koart = ls_bseg-koart.
    IF sy-subrc = 4.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'UMSKZ NOT IN T074'.
      ld_error = 'X'.
    ENDIF.
  ENDIF.

  IF ls_bseg-error NE 'UMSKZ NOT IN T074'.
    IF <ls_glu1_umskz> IS ASSIGNED AND ls_glu1_umskz IS NOT INITIAL AND ls_bseg-umskz IS INITIAL.
      DATA umskz_conditions TYPE c LENGTH 200.
      umskz_conditions = 'umskz NE ld_clear_umskz AND umskz NE ls_glu1-umskz AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (umskz_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
    IF sy-subrc = 4.
      IF ls_bseg-umskz NE ls_glu1_umskz AND ls_bseg-control NE '@5C@'.
        IF ls_bseg-umskz IS INITIAL.
          ls_bseg-umskz = ls_glu1_umskz.
          ls_bseg-control = '@5D@'.
          ls_bseg-error = 'UMSKZ MISSING'.
          ld_error = 'X'.
        ELSEIF ls_glu1_umskz IS INITIAL AND ls_glu1-control NE '@5C@'.
          ls_glu1_umskz = ls_bseg-umskz.
          ls_glu1-control = '@5D@'.
          ls_glu1-error = 'UMSKZ MISSING'.
          ld_error = 'X'.
        ELSEIF ls_glu1_umskz IS NOT INITIAL
    AND ls_bkpf-gjahr GE gs_curry
          AND ls_glu1-control NE '@5C@'.
          ls_glu1_umskz = ls_bseg-umskz.
          ls_glu1-control = '@5D@'.
          ls_glu1-error = 'UMSKZ MISMATCH'.
          ld_error = 'X'.
        ENDIF.
      ELSEIF ls_bseg-umskz NE ls_glu1_umskz.
        ls_bseg-control = '@5C@'.
        ls_glu1-control = '@5C@'.
        ls_bseg-error = 'UMSKZ MISMATCH'.
        ls_glu1-error = 'UMSKZ MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSE.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'UMSKZ MISMATCH'.
      ls_glu1-error = 'UMSKZ MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1.
      <ls_glu1_umskz> = ls_glu1_umskz.
    ENDIF.
    IF ls_glu1-error(5) = 'UMSKZ'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'UMSKZ'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_koart CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_koart TYPE bseg-koart.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  FIELD-SYMBOLS <ls_glu1_koart> TYPE any.

  ASSIGN COMPONENT 'KOART' OF STRUCTURE ls_glu1 TO <ls_glu1_koart>.
  ls_glu1_koart = <ls_glu1_koart>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_koart TYPE bseg-koart.

  CLEAR ls_flag.

  IF <ls_glu1_koart> IS ASSIGNED AND ls_glu1_koart IS NOT INITIAL AND ls_bseg-koart IS INITIAL.
    DATA koart_conditions TYPE c LENGTH 200.
    koart_conditions = 'koart NE ld_clear_koart AND koart NE ls_glu1-koart AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE (koart_conditions).
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-koart NE ls_glu1_koart AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-koart IS INITIAL.
        ls_bseg-koart = ls_glu1_koart.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'KOART MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_koart IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_koart = ls_bseg-koart.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KOART MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_koart IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_koart = ls_bseg-koart.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'KOART MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-koart NE ls_glu1_koart.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'KOART MISMATCH'.
      ls_glu1-error = 'KOART MISMATCH'.
      ld_error = 'X'.
    ELSEIF ls_bseg-koart IS INITIAL AND ls_glu1_koart IS INITIAL.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'BSCHL MISSING'.
      ls_glu1-error = 'BSCHL MISSING'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'KOART MISMATCH'.
    ls_glu1-error = 'KOART MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    <ls_glu1_koart> = ls_glu1_koart.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'KOART'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'KOART'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_bschl CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ld_bseg_error TYPE c LENGTH 1.
  DATA ld_glu1_error TYPE c LENGTH 1.
  DATA ls_tbsl TYPE tbsl.

  CLEAR ls_flag.

  SELECT SINGLE * FROM tbsl
    INTO ls_tbsl
    WHERE bschl = ls_bseg-bschl
    AND koart = ls_bseg-koart.
  IF sy-subrc = 4.
    ld_bseg_error = 'X'.
    IF acdoca_active = 1.
      DATA tbsl_conditions TYPE c LENGTH 100.
      tbsl_conditions = 'bschl = ls_glu1-bschl AND koart = ls_glu1-koart'.
      SELECT SINGLE * FROM tbsl
        INTO ls_tbsl
        WHERE (tbsl_conditions).
      IF sy-subrc = 4.
        ld_glu1_error = 'X'.
      ENDIF.
    ENDIF.
  ENDIF.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_bschl TYPE bseg-bschl.

  CLEAR ls_flag.

  IF ls_glu1-bschl IS NOT INITIAL AND ls_bseg-bschl IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE bschl NE ld_clear_bschl
       AND bschl NE ls_glu1-bschl
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-bschl NE ls_glu1-bschl AND ls_bseg-control NE '@5C@'.
      if ls_bseg-shkzg = ls_glu1-drcrk.
      IF ls_bseg-bschl IS INITIAL.
        IF ld_glu1_error IS INITIAL.
          ls_bseg-bschl = ls_glu1-bschl.
          ls_bseg-control = '@5D@'.
          ls_bseg-error = 'BSCHL MISSING'.
          ld_error = 'X'.
        ELSE.
          ls_bseg-control = '@5C@'.
          ls_bseg-error = 'BSCHL MISSING'.
          ld_error = 'X'.
          ls_glu1-control = '@5C@'.
          ls_glu1-error = 'WRONG BSCHL'.
          ld_error = 'X'.
        ENDIF.
      ELSEIF ls_glu1-bschl IS INITIAL AND ls_glu1-control NE '@5C@'.
        IF ld_bseg_error IS INITIAL.
          ls_glu1-bschl = ls_bseg-bschl.
          ls_glu1-control = '@5D@'.
          ls_glu1-error = 'BSCHL MISSING'.
          ld_error = 'X'.
        ELSE.
          ls_glu1-control = '@5C@'.
          ls_glu1-error = 'BSCHL MISSING'.
          ld_error = 'X'.
          ls_bseg-control = '@5C@'.
          ls_bseg-error = 'WRONG BSCHL'.
          ld_error = 'X'.
        ENDIF.
      ELSEIF ls_glu1-bschl IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        IF ld_bseg_error IS INITIAL.
          ls_glu1-bschl = ls_bseg-bschl.
          ls_glu1-control = '@5D@'.
          ls_glu1-error = 'BSCHL MISMATCH'.
          ld_error = 'X'.
        ELSEIF ld_glu1_error IS INITIAL.
          ls_bseg-bschl = ls_glu1-bschl.
          ls_bseg-control = '@5D@'.
          ls_bseg-error = 'BSCHL MISMATCH'.
          ld_error = 'X'.
        ELSE.
          ls_bseg-control = '@5C@'.
          ls_glu1-control = '@5C@'.
          ls_bseg-error = 'BSCHL MISMATCH'.
          ls_glu1-error = 'BSCHL MISMATCH'.
          ld_error = 'X'.
        ENDIF.
      ELSEIF ls_glu1-bschl IS NOT INITIAL.
        ls_bseg-control = '@5C@'.
        ls_glu1-control = '@5C@'.
        ls_bseg-error = 'BSCHL MISMATCH'.
        ls_glu1-error = 'BSCHL MISMATCH'.
        ld_error = 'X'.
      ENDIF.
      endif.
    ELSEIF ls_bseg-bschl NE ls_glu1-bschl.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'BSCHL MISMATCH'.
      ls_glu1-error = 'BSCHL MISMATCH'.
      ld_error = 'X'.
    ELSEIF ls_bseg-bschl IS INITIAL AND ls_glu1-bschl IS INITIAL.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'BSCHL MISSING'.
      ls_glu1-error = 'BSCHL MISSING'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'BSCHL MISMATCH'.
    ls_glu1-error = 'BSCHL MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'BSCHL'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'BSCHL'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_auggj CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_auggj TYPE bseg-auggj.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  FIELD-SYMBOLS <ls_glu1_auggj> TYPE any.

  ASSIGN COMPONENT 'AUGGJ' OF STRUCTURE ls_glu1 TO <ls_glu1_auggj>.
  ls_glu1_auggj = <ls_glu1_auggj>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_auggj TYPE bseg-auggj.

  CLEAR ls_flag.

  IF <ls_glu1_auggj> IS ASSIGNED AND ls_glu1_auggj IS NOT INITIAL AND ls_bseg-auggj IS INITIAL.
    IF acdoca_active = 1.
      DATA auggj_conditions TYPE c LENGTH 200.
      auggj_conditions = 'auggj NE ld_clear_auggj AND auggj NE ls_glu1_auggj AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (auggj_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-auggj NE ls_glu1_auggj AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-auggj IS INITIAL.
        ls_bseg-auggj = ls_glu1_auggj.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AUGGJ MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_auggj IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_auggj = ls_bseg-auggj.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGGJ MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_auggj IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_auggj = ls_bseg-auggj.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGGJ MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-auggj NE ls_glu1_auggj .
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'AUGGJ MISMATCH'.
      ls_glu1-error = 'AUGGJ MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'AUGGJ MISMATCH'.
    ls_glu1-error = 'AUGGJ MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_auggj> = ls_glu1_auggj.
    IF ls_glu1-error(5) = 'AUGGJ'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'AUGGJ'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_augbl CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_augbl TYPE bseg-augbl.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  FIELD-SYMBOLS <ls_glu1_augbl> TYPE any.

  ASSIGN COMPONENT 'AUGBL' OF STRUCTURE ls_glu1 TO <ls_glu1_augbl>.
  ls_glu1_augbl = <ls_glu1_augbl>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_augbl TYPE bseg-augbl.

  CLEAR ls_flag.

  IF <ls_glu1_augbl> IS ASSIGNED AND ls_glu1_augbl IS NOT INITIAL AND ls_bseg-augbl IS INITIAL.
    IF acdoca_active = 1.
      DATA augbl_conditions TYPE c LENGTH 200.
      augbl_conditions = 'augbl NE ld_clear_augbl AND augbl NE ls_glu1-augbl AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.

      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (augbl_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-augbl NE ls_glu1_augbl AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-augbl IS INITIAL.
        ls_bseg-augbl = ls_glu1_augbl.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AUGBL MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_augbl IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_augbl = ls_bseg-augbl.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGBL MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_augbl IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_augbl = ls_bseg-augbl.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGBL MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-augbl NE ls_glu1_augbl.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'AUGBL MISMATCH'.
      ls_glu1-error = 'AUGBL MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'AUGBL MISMATCH'.
    ls_glu1-error = 'AUGBL MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_augbl> = ls_glu1_augbl.
    IF ls_glu1-error(5) = 'AUGBL'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'AUGBL'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_augdt CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1_augdt TYPE bseg-augdt.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.

  FIELD-SYMBOLS <ls_glu1_augdt> TYPE any.

  ASSIGN COMPONENT 'AUGDT' OF STRUCTURE ls_glu1 TO <ls_glu1_augdt>.
  ls_glu1_augdt = <ls_glu1_augdt>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_augdt TYPE bseg-augdt.

  CLEAR ls_flag.

  IF <ls_glu1_augdt> IS ASSIGNED AND ls_glu1_augdt IS NOT INITIAL AND ls_bseg-augdt IS INITIAL.
    IF acdoca_active = 1.
      DATA augdt_conditions TYPE c LENGTH 200.
      augdt_conditions = 'augdt NE ld_clear_augdt AND augdt NE ls_glu1-augdt AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (augdt_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bseg-augdt NE ls_glu1_augdt AND ls_bseg-control NE '@5C@'.
      IF ls_bseg-augdt IS INITIAL.
        ls_bseg-augdt = ls_glu1_augdt.
        ls_bseg-augcp = sy-datum.
        ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AUGDT MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_augdt IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_augdt = ls_bseg-augdt.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGDT MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_augdt IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_augdt = ls_bseg-augdt.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AUGDT MISMATCH'.
        ld_error = 'X'.
      ELSE.
        ls_bseg-control = '@5C@'.
        ls_glu1-control = '@5C@'.
        ls_bseg-error = 'AUGDT MISMATCH'.
        ls_glu1-error = 'AUGDT MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bseg-augdt NE ls_glu1_augdt.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'AUGDT MISMATCH'.
      ls_glu1-error = 'AUGDT MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'AUGDT MISMATCH'.
    ls_glu1-error = 'AUGDT MISMATCH'.
    ld_error = 'X'.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_augdt> = ls_glu1_augdt.
    IF ls_glu1-error(5) = 'AUGDT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ELSEIF ls_bseg-error(5) = 'AUGDT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_awref_rev CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.


  DATA ls_glu1_awref_rev TYPE c LENGTH 10.
  DATA ls_bkpf_awref_rev TYPE c LENGTH 10.
  DATA ls_glu1_awtyp_rev TYPE c LENGTH 10.
  FIELD-SYMBOLS <ls_glu1_awref_rev> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_awref_rev> TYPE any.
  FIELD-SYMBOLS <ls_glu1_awtyp_rev> TYPE any.

  ASSIGN COMPONENT 'AWREF_REV' OF STRUCTURE ls_glu1 TO <ls_glu1_awref_rev>.
  ls_glu1_awref_rev = <ls_glu1_awref_rev>.
  ASSIGN COMPONENT 'AWREF_REV' OF STRUCTURE ls_bkpf TO <ls_bkpf_awref_rev>.
  ls_bkpf_awref_rev = <ls_bkpf_awref_rev>.
  ASSIGN COMPONENT 'AWTYP_REV' OF STRUCTURE ls_glu1 TO <ls_glu1_awtyp_rev>.
  ls_glu1_awtyp_rev = <ls_glu1_awtyp_rev>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_awref_rev TYPE c LENGTH 10.

  CLEAR ls_flag.

  IF <ls_glu1_awref_rev> IS ASSIGNED AND ls_glu1-awref_rev IS NOT INITIAL
    AND <ls_bkpf_awref_rev> IS ASSIGNED AND ls_bkpf_awref_rev IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE awref_rev NE ld_clear_awref_rev
       AND awref_rev NE ls_glu1_awref_rev
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bkpf_awref_rev NE ls_glu1_awref_rev AND ls_bkpf-control NE '@5C@'.
      IF ls_bkpf_awref_rev IS INITIAL.
        IF ls_bkpf-stblg IS INITIAL.
          IF ls_glu1_awtyp_rev = 'BKPF' OR ls_glu1_awtyp_rev = 'BKPFF'.
            ls_bkpf-stblg = ls_glu1_awref_rev.
          ENDIF.
        ENDIF.
        ls_bkpf_awref_rev = ls_glu1_awref_rev.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'AWREF_REV MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_awref_rev IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_awref_rev = ls_bkpf_awref_rev.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWREF_REV MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_awref_rev IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_awref_rev = ls_bkpf_awref_rev.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWREF_REV MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bkpf_awref_rev NE ls_glu1_awref_rev.
      ls_bkpf-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bkpf-error = 'AWREF_REV MISMATCH'.
      ls_glu1-error = 'AWREF_REV MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bkpf-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bkpf-error = 'AWREF_REV MISMATCH'.
    ls_glu1-error = 'AWREF_REV MISMATCH'.
    ld_error = 'X'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_awref_rev> = ls_glu1_awref_rev.
    <ls_bkpf_awref_rev> = ls_bkpf_awref_rev.
    IF ls_glu1-error(9) = 'AWREF_REV'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(9) = 'AWREF_REV'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_aworg_rev CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.


  DATA ls_glu1_aworg_rev TYPE c LENGTH 10.
  DATA ls_bkpf_aworg_rev TYPE c LENGTH 10.
  FIELD-SYMBOLS <ls_glu1_aworg_rev> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_aworg_rev> TYPE any.

  ASSIGN COMPONENT 'AWORG_REV' OF STRUCTURE ls_glu1 TO <ls_glu1_aworg_rev>.
  ls_glu1_aworg_rev = <ls_glu1_aworg_rev>.
  ASSIGN COMPONENT 'AWORG_REV' OF STRUCTURE ls_bkpf TO <ls_bkpf_aworg_rev>.
  ls_bkpf_aworg_rev = <ls_bkpf_aworg_rev>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_aworg_rev TYPE c LENGTH 10.

  CLEAR ls_flag.

  IF <ls_glu1_aworg_rev> IS ASSIGNED AND ls_glu1_aworg_rev IS NOT INITIAL
        AND <ls_bkpf_aworg_rev> IS ASSIGNED AND ls_bkpf_aworg_rev IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE aworg_rev NE ld_clear_aworg_rev
       AND aworg_rev NE ls_glu1_aworg_rev
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bkpf_aworg_rev NE ls_glu1_aworg_rev AND ls_bkpf-control NE '@5C@'.
      IF ls_bkpf_aworg_rev IS INITIAL.
        ls_bkpf_aworg_rev = ls_glu1_aworg_rev.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'AWORG_REV MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_aworg_rev IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_aworg_rev = ls_bkpf_aworg_rev.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWORG_REV MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_aworg_rev IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
       AND ls_glu1-control NE '@5C@'.
        ls_glu1_aworg_rev = ls_bkpf_aworg_rev.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWORG_REV MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bkpf_aworg_rev NE ls_glu1_aworg_rev.
      ls_bkpf-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bkpf-error = 'AWORG_REV MISMATCH'.
      ls_glu1-error = 'AWORG_REV MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bkpf-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bkpf-error = 'AWORG_REV MISMATCH'.
    ls_glu1-error = 'AWORG_REV MISMATCH'.
    ld_error = 'X'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_aworg_rev> = ls_glu1_aworg_rev.
    <ls_bkpf_aworg_rev> = ls_bkpf_aworg_rev.
    IF ls_glu1-error(9) = 'AWORG_REV'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(9) = 'AWORG_REV'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_xreversal CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                                ld_index_bkpf TYPE sy-tabix.

  FIELD-SYMBOLS <ls_glu1_xreversing> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_xreversing> TYPE any.
  FIELD-SYMBOLS <ls_glu1_xreversed> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_xreversed> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_xreversal> TYPE any.

  ASSIGN COMPONENT 'XREVERSING' OF STRUCTURE ls_bkpf TO <ls_bkpf_xreversing>.
  ASSIGN COMPONENT 'XREVERSED' OF STRUCTURE ls_bkpf TO <ls_bkpf_xreversed>.
  ASSIGN COMPONENT 'XREVERSAL' OF STRUCTURE ls_bkpf TO <ls_bkpf_xreversal>.

  IF ls_bkpf-stblg IS NOT INITIAL.
    IF ( <ls_bkpf_xreversed> IS NOT INITIAL AND <ls_bkpf_xreversing> IS NOT INITIAL )
      OR ( <ls_bkpf_xreversed> IS INITIAL AND <ls_bkpf_xreversing> IS INITIAL ).
      IF <ls_bkpf_xreversal> = '1'.
        <ls_bkpf_xreversed> = 'X'.
        <ls_bkpf_xreversing> = ' '.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'XREV* MISMATCH'.
        ld_error = 'X'.
      ELSEIF <ls_bkpf_xreversal> = '2'.
        <ls_bkpf_xreversed> = ' '.
        <ls_bkpf_xreversing> = 'X'.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'XREV* MISMATCH'.
        ld_error = 'X'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'XREV* MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ENDIF.

    IF <ls_bkpf_xreversal> NE '1' AND <ls_bkpf_xreversed> = 'X'.
      <ls_bkpf_xreversal> = '1'.
      ls_bkpf-control = '@5D@'.
      ls_bkpf-error = 'XREVERSAL MISMATCH'.
      ld_error = 'X'.
    ENDIF.
    IF <ls_bkpf_xreversal> NE '2' AND <ls_bkpf_xreversing> = 'X'.
      <ls_bkpf_xreversal> = '2'.
      ls_bkpf-control = '@5D@'.
      ls_bkpf-error = 'XREVERSAL MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    IF <ls_bkpf_xreversing> IS NOT INITIAL.
      <ls_bkpf_xreversing> = ' '.
      ls_bkpf-control = '@5D@'.
      ls_bkpf-error = 'XREVERSING MISMATCH'.
      ld_error = 'X'.
    ENDIF.
    IF <ls_bkpf_xreversed> IS NOT INITIAL.
      <ls_bkpf_xreversed> = ' '.
      ls_bkpf-control = '@5D@'.
      ls_bkpf-error = 'XREVERSED MISMATCH'.
      ld_error = 'X'.
    ENDIF.
    IF <ls_bkpf_xreversal> IS NOT INITIAL.
      <ls_bkpf_xreversal> = ' '.
      ls_bkpf-control = '@5D@'.
      ls_bkpf-error = 'XREVERSAL MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ENDIF.

  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_bkpf-error(4) = 'XREV'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_xreversing CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.


  DATA ls_glu1_xreversing TYPE c LENGTH 10.
  DATA ls_bkpf_xreversing TYPE c LENGTH 10.
  FIELD-SYMBOLS <ls_glu1_xreversing> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_xreversing> TYPE any.

  ASSIGN COMPONENT 'XREVERSING' OF STRUCTURE ls_glu1 TO <ls_glu1_xreversing>.
  ls_glu1_xreversing = <ls_glu1_xreversing>.
  ASSIGN COMPONENT 'XREVERSING' OF STRUCTURE ls_bkpf TO <ls_bkpf_xreversing>.
  ls_bkpf_xreversing = <ls_bkpf_xreversing>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_xreversing TYPE c LENGTH 1.

  CLEAR ls_flag.

  IF <ls_glu1_xreversing> IS ASSIGNED AND ls_glu1_xreversing IS NOT INITIAL.
    IF acdoca_active = 1.
      DATA xreversing_conditions TYPE c LENGTH 200.
      xreversing_conditions = 'xreversing NE ld_clear_xreversing AND xreversing NE ls_glu1_xreversing AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (xreversing_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bkpf_xreversing NE ls_glu1_xreversing AND ls_bkpf-control NE '@5C@'.
      IF ls_bkpf_xreversing IS INITIAL.
        ls_bkpf_xreversing = ls_glu1_xreversing.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'XREVERSING MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_xreversing IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_xreversing = ls_bkpf_xreversing.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'XREVERSING MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_xreversing IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry AND ls_glu1-control NE '@5C@'.
        ls_glu1_xreversing = ls_bkpf_xreversing.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'XREVERSING MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bkpf_xreversing NE ls_glu1_xreversing.
      ls_bkpf-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bkpf-error = 'XREVERSING MISMATCH'.
      ls_glu1-error = 'XREVERSING MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bkpf-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bkpf-error = 'XREVERSING MISMATCH'.
    ls_glu1-error = 'XREVERSING MISMATCH'.
    ld_error = 'X'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_xreversing> = ls_glu1_xreversing.
    <ls_bkpf_xreversing> = ls_bkpf_xreversing.
    IF ls_glu1-error(10) = 'XREVERSING'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(10) = 'XREVERSING'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_xreversed CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.


  DATA ls_glu1_xreversed TYPE c LENGTH 10.
  DATA ls_bkpf_xreversed TYPE c LENGTH 10.
  FIELD-SYMBOLS <ls_glu1_xreversed> TYPE any.
  FIELD-SYMBOLS <ls_bkpf_xreversed> TYPE any.

  ASSIGN COMPONENT 'XREVERSED' OF STRUCTURE ls_glu1 TO <ls_glu1_xreversed>.
  ls_glu1_xreversed = <ls_glu1_xreversed>.
  ASSIGN COMPONENT 'XREVERSED' OF STRUCTURE ls_bkpf TO <ls_bkpf_xreversed>.
  ls_bkpf_xreversed = <ls_bkpf_xreversed>.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_xreversed TYPE c LENGTH 1.

  CLEAR ls_flag.

  IF <ls_glu1_xreversed> IS ASSIGNED AND ls_glu1_xreversed IS NOT INITIAL.
    IF acdoca_active = 1.
      DATA xreversed_conditions TYPE c LENGTH 200.
      xreversed_conditions = 'xreversed NE ld_clear_xreversed AND xreversed NE ls_glu1_xreversed AND buzei = ls_glu1-buzei AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
      LOOP AT gt_glu1mod INTO ls_glu1mod_check
         WHERE (xreversed_conditions).
      ENDLOOP.
    ELSE.
      sy-subrc = 4.
    ENDIF.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bkpf_xreversed NE ls_glu1_xreversed AND ls_bkpf-control NE '@5C@'.
      IF ls_bkpf_xreversed IS INITIAL.
        ls_bkpf_xreversed = ls_glu1_xreversed.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'XREVERSED MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_xreversed IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1_xreversed = ls_bkpf_xreversed.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'XREVERSED MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1_xreversed IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1_xreversed = ls_bkpf_xreversed.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'XREVERSED MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bkpf_xreversed NE ls_glu1_xreversed.
      ls_bkpf-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bkpf-error = 'XREVERSED MISMATCH'.
      ls_glu1-error = 'XREVERSED MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bkpf-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bkpf-error = 'XREVERSED MISMATCH'.
    ls_glu1-error = 'XREVERSED MISMATCH'.
    ld_error = 'X'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    <ls_glu1_xreversed> = ls_glu1_xreversed.
    <ls_bkpf_xreversed> = ls_bkpf_xreversed.
    IF ls_glu1-error(9) = 'XREVERSED'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(9) = 'XREVERSED'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_usnam CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_glu1mod_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_usnam TYPE bkpf-usnam.

  CLEAR ls_flag.

  IF ls_glu1-usnam IS NOT INITIAL AND ls_bkpf-usnam IS INITIAL.
    LOOP AT gt_glu1mod INTO ls_glu1mod_check
       WHERE usnam NE ld_clear_usnam
       AND usnam NE ls_glu1-usnam
       AND buzei = ls_glu1-buzei
       AND rbukrs = ls_glu1-rbukrs
       AND gjahr = ls_glu1-gjahr
       AND belnr = ls_glu1-belnr.
    ENDLOOP.
  ELSE.
    sy-subrc = 4.
  ENDIF.
  IF sy-subrc = 4.
    IF ls_bkpf-usnam NE ls_glu1-usnam AND ls_bkpf-control NE '@5C@'.
      IF ls_bkpf-usnam IS INITIAL.
        ls_bkpf-usnam = ls_glu1-usnam.
        ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'USNAM MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-usnam IS INITIAL AND ls_glu1-control NE '@5C@'.
        ls_glu1-usnam = ls_bkpf-usnam.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'USNAM MISSING'.
        ld_error = 'X'.
      ELSEIF ls_glu1-usnam IS NOT INITIAL
  AND ls_bkpf-gjahr GE gs_curry
        AND ls_glu1-control NE '@5C@'.
        ls_glu1-usnam = ls_bkpf-usnam.
        ls_glu1-control = '@5D@'.
        ls_glu1-error = 'USNAM MISMATCH'.
        ld_error = 'X'.
      ENDIF.
    ELSEIF ls_bkpf-usnam NE ls_glu1-usnam.
      ls_bkpf-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bkpf-error = 'USNAM MISMATCH'.
      ls_glu1-error = 'USNAM MISMATCH'.
      ld_error = 'X'.
    ENDIF.
  ELSE.
    ls_bkpf-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bkpf-error = 'USNAM MISMATCH'.
    ls_glu1-error = 'USNAM MISMATCH'.
    ld_error = 'X'.
  ENDIF.


  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF ls_glu1-error(5) = 'USNAM'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'USNAM'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_awtyp CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_awtyp> TYPE any.
  DATA ls_bseg_awtyp TYPE bkpf-awtyp.
  DATA ls_glu1_awtyp TYPE bkpf-awtyp.
  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_awtyp LIKE bkpf-awtyp.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'AWTYP' OF STRUCTURE ls_bseg TO <ls_bseg_awtyp>.
    ls_bseg_awtyp = <ls_bseg_awtyp>.
  ELSE.
    ls_bseg_awtyp = ls_bkpf-awtyp.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-awtyp = ls_bseg_awtyp
    AND ls_bkpf-awtyp = ls_glu1-awtyp.
  ELSEIF ls_bkpf-awtyp IS INITIAL
    AND ls_bseg_awtyp IS INITIAL
    AND ls_glu1-awtyp IS INITIAL.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'AWTYP MISSING'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'AWTYP MISSING'.
    ls_bseg-control = '@5C@'.
    ls_bseg-error = 'AWTYP MISSING'.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-awtyp IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_awtyp IS INITIAL.
        ls_bseg_awtyp = ls_bkpf-awtyp.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_awtyp NE ls_bkpf-awtyp.
        ls_bseg_awtyp = ls_bkpf-awtyp.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-awtyp IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-awtyp = ls_bkpf-awtyp.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-awtyp IS INITIAL.
        ls_glu1-awtyp = ls_bkpf-awtyp.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_awtyp IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA bseg_conditions TYPE c LENGTH 200.
        bseg_conditions = 'awtyp NE ld_clear_awtyp AND awtyp NE ls_bseg_awtyp AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
           WHERE (bseg_conditions).
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1-awtyp IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1-awtyp = ls_bseg_awtyp.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1-awtyp IS INITIAL.
          ls_glu1-awtyp = ls_bseg_awtyp.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-awtyp = ls_bseg_awtyp.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWTYP MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWTYP MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWTYP MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1-awtyp IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA glu1_conditions TYPE c LENGTH 200.
        glu1_conditions = 'awtyp NE ld_clear_awtyp AND awtyp NE ls_glu1_awtyp AND rbukrs = ls_glu1-rbukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
        LOOP AT gt_glu1mod INTO ls_glu1_check
           WHERE (glu1_conditions).
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        ls_bkpf-awtyp = ls_glu1-awtyp.
        ls_bkpf-control = '@5D@'.
        ls_bseg_awtyp = ls_glu1-awtyp.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWTYP MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWTYP MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWTYP MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-awtyp = ls_bseg_awtyp
      AND ls_bkpf-awtyp = ls_glu1-awtyp.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'AWTYP MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AWTYP MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'AWTYP MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWTYP MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'AWTYP MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'AWTYP MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'AWTYP MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_awtyp> = ls_bseg_awtyp.
    ENDIF.

    IF ls_glu1-error(5) = 'AWTYP'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(5) = 'AWTYP'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'AWTYP'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_awsys CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                              ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_awsys> TYPE any.
  DATA ls_bseg_awsys TYPE bkpf-awsys.
  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_awsys LIKE bkpf-awsys.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'AWSYS' OF STRUCTURE ls_bseg TO <ls_bseg_awsys>.
    ls_bseg_awsys = <ls_bseg_awsys>.
  ELSE.
    ls_bseg_awsys = ls_bkpf-awsys.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-awsys = ls_bseg_awsys
    AND ls_bkpf-awsys = ls_glu1-awsys.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-awsys IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_awsys IS INITIAL.
        ls_bseg_awsys = ls_bkpf-awsys.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_awsys NE ls_bkpf-awsys.
        ls_bseg_awsys = ls_bkpf-awsys.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-awsys IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-awsys = ls_bkpf-awsys.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-awsys IS INITIAL.
        ls_glu1-awsys = ls_bkpf-awsys.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_awsys IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA bseg_conditions TYPE c LENGTH 200.
        bseg_conditions = 'AWSYS NE ld_clear_AWSYS AND AWSYS NE ls_bseg_AWSYS AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
           WHERE (bseg_conditions).
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1-awsys IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1-awsys = ls_bseg_awsys.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1-awsys IS INITIAL.
          ls_glu1-awsys = ls_bseg_awsys.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-awsys = ls_bseg_awsys.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWSYS MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWSYS MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWSYS MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1-awsys IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      LOOP AT gt_glu1mod INTO ls_glu1_check
   WHERE awsys NE ld_clear_awsys
   AND awsys NE ls_glu1-awsys
   AND bukrs = ls_glu1-bukrs
   AND gjahr = ls_glu1-gjahr
   AND belnr = ls_glu1-belnr.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bkpf-awsys = ls_glu1-awsys.
        ls_bkpf-control = '@5D@'.
        ls_bseg_awsys = ls_glu1-awsys.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWSYS MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWSYS MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWSYS MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-awsys = ls_bseg_awsys
      AND ls_bkpf-awsys = ls_glu1-awsys.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'AWSYS MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AWSYS MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'AWSYS MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWSYS MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'AWSYS MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'AWSYS MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'AWSYS MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_awsys> = ls_bseg_awsys.
    ENDIF.

    IF ls_glu1-error(5) = 'AWSYS'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(5) = 'AWSYS'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'AWSYS'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_awkey CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                             ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA: ls_glu1_awkey TYPE bkpf-awkey,
        ls_bseg_awkey TYPE bkpf-awkey.

  FIELD-SYMBOLS: <ls_glu1_awref> TYPE any,
                 <ls_glu1_aworg> TYPE any,
                 <ls_bseg_awkey> TYPE any.

  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_awref TYPE  c LENGTH 10.
  DATA ld_clear_aworg TYPE c LENGTH 10.
  DATA ld_clear_awkey TYPE bkpf-awkey.

  IF ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'AWKEY' OF STRUCTURE ls_bseg TO <ls_bseg_awkey>.
  ELSE.
    <ls_bseg_awkey> = ls_bkpf-awkey.
  ENDIF.
  ASSIGN COMPONENT 'AWREF' OF STRUCTURE ls_glu1 TO <ls_glu1_awref>.
  ASSIGN COMPONENT 'AWORG' OF STRUCTURE ls_glu1 TO <ls_glu1_aworg>.
  CONCATENATE <ls_glu1_awref> <ls_glu1_aworg> INTO ls_glu1_awkey.
  ls_bseg_awkey = <ls_bseg_awkey>.

  CLEAR ls_flag.

  IF ls_bkpf-awkey = ls_bseg_awkey
    AND ls_bkpf-awkey = ls_glu1_awkey.
  ELSEIF ls_bkpf-awkey IS INITIAL
AND ls_bseg_awkey IS INITIAL
AND ls_glu1_awkey IS INITIAL.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'AWKEY MISSING'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'AWKEY MISSING'.
    ls_bseg-control = '@5C@'.
    ls_bseg-error = 'AWKEY MISSING'.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-awkey IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_awkey IS INITIAL.
        ls_bseg_awkey = ls_bkpf-awkey.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_awkey NE ls_bkpf-awkey.
        ls_bseg_awkey = ls_bkpf-awkey.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1_awkey IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1_awkey = ls_bkpf-awkey.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1_awkey IS INITIAL.
        ls_glu1_awkey = ls_bkpf-awkey.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_awkey IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA bseg_conditions TYPE c LENGTH 200.
        bseg_conditions = 'AWKEY NE ld_clear_AWKEY AND AWKEY NE ls_bseg_AWKEY AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
           WHERE (bseg_conditions).
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1_awkey IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1_awkey = ls_bseg_awkey.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1_awkey IS INITIAL.
          ls_glu1_awkey = ls_bseg_awkey.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-awkey = ls_bseg_awkey.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWKEY MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWKEY MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWKEY MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1_awkey IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA awref_conditions TYPE c LENGTH 200.
        awref_conditions = 'awref NE ld_clear_awref AND aworg NE ld_clear_aworg AND awref NE ls_glu1_awkey(10) AND aworg NE ls_glu1_awkey+10(8) AND bukrs = ls_glu1-bukrs AND gjahr = ls_glu1-gjahr AND belnr = ls_glu1-belnr'.
        LOOP AT gt_glu1mod INTO ls_glu1_check
     WHERE (awref_conditions).
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        ls_bkpf-awkey = ls_glu1_awkey.
        ls_bkpf-control = '@5D@'.
        ls_bseg_awkey = ls_glu1_awkey.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'AWKEY MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'AWKEY MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'AWKEY MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-awkey = ls_bseg_awkey
      AND ls_bkpf-awkey = ls_glu1_awkey.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'AWKEY MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'AWKEY MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'AWKEY MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'AWKEY MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'AWKEY MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'AWKEY MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'AWKEY MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_awkey> = ls_bseg_awkey.
    ENDIF.

    IF ls_glu1-error(5) = 'AWKEY'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(5) = 'AWKEY'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'AWKEY'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_monat CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_h_monat> TYPE any.
  DATA ls_bseg_h_monat TYPE bkpf-monat.
  DATA ld_gjahr TYPE glu1-gjahr.
  DATA ld_poper TYPE glu1-poper.
  DATA ld_monat TYPE bkpf-monat.
  DATA ld_rep_ledger TYPE glu1-rldnr.

  CALL FUNCTION 'FI_PERIOD_DETERMINE'
    EXPORTING
      i_budat = ls_glu1-budat
      i_bukrs = ls_glu1-rbukrs
      i_rldnr = ls_glu1-rldnr
    IMPORTING
      e_gjahr = ld_gjahr
      e_poper = ld_poper.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'H_MONAT' OF STRUCTURE ls_bseg TO <ls_bseg_h_monat>.
    ls_bseg_h_monat = <ls_bseg_h_monat>.
  ELSE.
    ls_bseg_h_monat = ls_bkpf-monat.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-monat = ls_bseg_h_monat
    AND ls_glu1-poper = ld_poper.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-monat IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_h_monat IS INITIAL.
        ls_bseg_h_monat = ls_bkpf-monat.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_h_monat NE ls_bkpf-monat.
        ls_bseg_h_monat = ls_bkpf-monat.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-poper IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-poper = ld_poper.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-poper IS INITIAL.
        ls_glu1-poper = ld_poper.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_h_monat IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF ls_glu1-poper IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-poper = ld_poper.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-poper IS INITIAL.
        ls_glu1-poper = ld_poper.
        ls_glu1-control = '@5D@'.
      ENDIF.
      ls_bkpf-monat = ls_bseg_h_monat.
      ls_bkpf-control = '@5D@'.
    ELSEIF ls_glu1-poper+1 IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      CALL FUNCTION 'FAGL_GET_REPRESENTATIVE_LEDGER'
        EXPORTING
          i_bukrs = ls_glu1-rbukrs
          i_ldgrp = ls_bkpf-ldgrp
        IMPORTING
          e_rldnr = ld_rep_ledger.
      CALL FUNCTION 'FI_PERIOD_DETERMINE'
        EXPORTING
          i_budat = ls_bkpf-budat
          i_bukrs = ls_bkpf-bukrs
          i_rldnr = ld_rep_ledger
        IMPORTING
          e_monat = ld_monat.
      ls_bkpf-monat = ld_monat.
      ls_bkpf-control = '@5D@'.
      ls_bseg_h_monat = ld_monat.
      ls_bseg-control = '@5D@'.
    ENDIF.
    IF ls_bkpf-monat = ls_bseg_h_monat
      AND ls_bkpf-monat = ls_glu1-poper+1.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'MONAT MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'H_MONAT MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'H_MONAT MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'POPER MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'MONAT MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'POPER MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'H_MONAT MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_h_monat> = ls_bseg_h_monat.
    ENDIF.

    IF ls_glu1-error(5) = 'POPER'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat = 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(7) = 'H_MONAT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat = 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'MONAT'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_bstat CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_h_bstat> TYPE any.
  DATA ls_bseg_h_bstat TYPE bkpf-bstat.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.

  IF acdoca_active = 1 AND ( ls_bkpf-bstat NE 'L' AND ls_glu1-bstat NE 'L') .
    ASSIGN COMPONENT 'H_BSTAT' OF STRUCTURE ls_bseg TO <ls_bseg_h_bstat>.
    ls_bseg_h_bstat = <ls_bseg_h_bstat>.
  ELSE.
    ls_bseg_h_bstat = ls_bkpf-bstat.
  ENDIF.


  LOOP AT gt_glu1mod INTO ls_glu1mod
    WHERE rbukrs = ls_bkpf-bukrs
    AND belnr = ls_bkpf-belnr
    AND gjahr = ls_bkpf-gjahr
    AND rldnr = gd_leading.
    EXIT.
  ENDLOOP.
  CLEAR ls_flag.
  IF sy-subrc = 0 AND ls_bkpf-bstat = 'L'.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'BSTAT L with Leading'.
    IF ls_glu1-rldnr = gd_leading.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'BSTAT L with Leading'.
    ENDIF.
  ELSEIF sy-subrc = 4 AND ls_bkpf-bstat = ' '.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'BSTAT '' '' Miss. Leading'.
  ENDIF.


  IF ls_bkpf-bstat = ls_bseg_h_bstat
    AND ls_bkpf-bstat = ls_glu1-bstat.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-bstat IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_h_bstat IS INITIAL.
        ls_bseg_h_bstat = ls_bkpf-bstat.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_h_bstat NE ls_bkpf-bstat.
        ls_bseg_h_bstat = ls_bkpf-bstat.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-bstat IS NOT INITIAL
        AND  ls_bkpf-gjahr GE gs_curry.
        ls_glu1-bstat = ls_bkpf-bstat.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-bstat IS INITIAL.
        ls_glu1-bstat = ls_bkpf-bstat.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_h_bstat IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF ls_glu1-bstat IS NOT INITIAL
        AND  ls_bkpf-gjahr GE gs_curry.
        ls_glu1-bstat = ls_bseg_h_bstat.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-bstat IS INITIAL.
        ls_glu1-bstat = ls_bseg_h_bstat.
        ls_glu1-control = '@5D@'.
      ENDIF.
      ls_bkpf-bstat = ls_bseg_h_bstat.
      ls_bkpf-control = '@5D@'.
    ELSEIF ls_glu1-poper IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      ls_bkpf-bstat = ls_glu1-bstat.
      ls_bkpf-control = '@5D@'.
      ls_bseg_h_bstat = ls_glu1-bstat.
      ls_bseg-control = '@5D@'.
    ENDIF.
    IF ls_bkpf-bstat = ls_bseg_h_bstat
      AND ls_bkpf-bstat = ls_glu1-bstat.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'BSTAT MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'H_BSTAT MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'H_BSTAT MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'BSTAT MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'BSTAT MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'H_BSTAT MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'BSTAT MISMATCH'.
    ENDIF.
  ENDIF.


***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_h_bstat> = ls_bseg_h_bstat.
    ENDIF.

    IF ls_glu1-error(5) = 'BSTAT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L' AND ls_glu1-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(7) = 'H_BSTAT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L' AND ls_glu1-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'BSTAT'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_budat CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_h_budat> TYPE any.
  DATA ls_bseg_h_budat TYPE bkpf-budat.
  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_budat TYPE bkpf-budat.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'H_BUDAT' OF STRUCTURE ls_bseg TO <ls_bseg_h_budat>.
    ls_bseg_h_budat = <ls_bseg_h_budat>.
  ELSE.
    ls_bseg_h_budat = ls_bkpf-budat.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-budat = ls_bseg_h_budat
    AND ls_bkpf-budat = ls_glu1-budat.
  ELSEIF ls_bkpf-budat IS INITIAL
AND ls_bseg_h_budat IS INITIAL
AND ls_glu1-budat IS INITIAL.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'BUDAT MISSING'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'BUDAT MISSING'.
    ls_bseg-control = '@5C@'.
    ls_bseg-error = 'BUDAT MISSING'.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-budat IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_h_budat IS INITIAL.
        ls_bseg_h_budat = ls_bkpf-budat.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_h_budat NE ls_bkpf-budat.
        ls_bseg_h_budat = ls_bkpf-budat.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-budat IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-budat = ls_bkpf-budat.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-budat IS INITIAL.
        ls_glu1-budat = ls_bkpf-budat.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_h_budat IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA budat_conditions TYPE c LENGTH 200.
        budat_conditions = 'h_budat NE ld_clear_budat AND h_budat NE ls_bseg_h_budat AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
         WHERE (budat_conditions).
          EXIT.
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1-budat IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1-budat = ls_bseg_h_budat.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1-budat IS INITIAL.
          ls_glu1-budat = ls_bseg_h_budat.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-budat = ls_bseg_h_budat.
        ls_bkpf-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BUDAT MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BUDAT MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BUDAT MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1-poper IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      LOOP AT gt_glu1mod INTO ls_glu1_check
WHERE budat NE ld_clear_budat
AND budat NE ls_glu1-budat
AND rbukrs = ls_glu1-rbukrs
AND gjahr = ls_glu1-gjahr
AND belnr = ls_glu1-belnr.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bkpf-budat = ls_glu1-budat.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_budat = ls_glu1-budat.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BUDAT MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BUDAT MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BUDAT MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-budat = ls_bseg_h_budat
      AND ls_bkpf-budat = ls_glu1-budat.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'BUDAT MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'H_BUDAT MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'H_BUDAT MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'BUDAT MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'BUDAT MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'H_BUDAT MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'BUDAT MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_h_budat> = ls_bseg_h_budat.
    ENDIF.

    IF ls_glu1-error(5) = 'BUDAT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(7) = 'H_BUDAT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'BUDAT'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_bldat CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                             ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_h_bldat> TYPE any.
  DATA ls_bseg_h_bldat TYPE bkpf-bldat.
  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_bldat TYPE bkpf-bldat.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'H_BLDAT' OF STRUCTURE ls_bseg TO <ls_bseg_h_bldat>.
    ls_bseg_h_bldat = <ls_bseg_h_bldat>.
  ELSE.
    ls_bseg_h_bldat = ls_bkpf-bldat.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-bldat = ls_bseg_h_bldat
    AND ls_bkpf-bldat = ls_glu1-bldat.
  ELSEIF ls_bkpf-bldat IS INITIAL
AND ls_bseg_h_bldat IS INITIAL
AND ls_glu1-bldat IS INITIAL.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'BLDAT MISSING'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'BLDAT MISSING'.
    ls_bseg-control = '@5C@'.
    ls_bseg-error = 'BLDAT MISSING'.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-bldat IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_h_bldat IS INITIAL.
        ls_bseg_h_bldat = ls_bkpf-bldat.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_h_bldat NE ls_bkpf-bldat.
        ls_bseg_h_bldat = ls_bkpf-bldat.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-bldat IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-bldat = ls_bkpf-bldat.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-bldat IS INITIAL.
        ls_glu1-bldat = ls_bkpf-bldat.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_h_bldat IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA bldat_conditions TYPE c LENGTH 200.
        bldat_conditions = 'h_BLDAT NE ld_clear_BLDAT AND h_BLDAT NE ls_bseg_h_BLDAT AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
         WHERE (bldat_conditions).
          EXIT.
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1-bldat IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1-bldat = ls_bseg_h_bldat.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1-bldat IS INITIAL.
          ls_glu1-bldat = ls_bseg_h_bldat.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-bldat = ls_bseg_h_bldat.
        ls_bkpf-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BLDAT MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BLDAT MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BLDAT MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1-poper IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      LOOP AT gt_glu1mod INTO ls_glu1_check
WHERE bldat NE ld_clear_bldat
AND bldat NE ls_glu1-bldat
AND rbukrs = ls_glu1-rbukrs
AND gjahr = ls_glu1-gjahr
AND belnr = ls_glu1-belnr.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bkpf-bldat = ls_glu1-bldat.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_bldat = ls_glu1-bldat.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BLDAT MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BLDAT MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BLDAT MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-bldat = ls_bseg_h_bldat
      AND ls_bkpf-bldat = ls_glu1-bldat.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'BLDAT MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'H_BLDAT MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'H_BLDAT MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'BLDAT MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'BLDAT MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'H_BLDAT MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'BLDAT MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_h_bldat> = ls_bseg_h_bldat.
    ENDIF.

    IF ls_glu1-error(5) = 'BLDAT'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(7) = 'H_BLDAT'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'BLDAT'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_blart CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  FIELD-SYMBOLS <ls_bseg_h_blart> TYPE any.
  DATA ls_bseg_h_blart TYPE bkpf-blart.
  DATA ls_bseg_check LIKE LINE OF gt_bseg.
  DATA ls_glu1_check LIKE LINE OF gt_glu1mod.
  DATA ld_clear_blart TYPE bkpf-blart.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    ASSIGN COMPONENT 'H_BLART' OF STRUCTURE ls_bseg TO <ls_bseg_h_blart>.
    ls_bseg_h_blart = <ls_bseg_h_blart>.
  ELSE.
    ls_bseg_h_blart = ls_bkpf-blart.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bkpf-blart = ls_bseg_h_blart
    AND ls_bkpf-blart = ls_glu1-blart.
  ELSEIF ls_bkpf-blart IS INITIAL
AND ls_bseg_h_blart IS INITIAL
AND ls_glu1-blart IS INITIAL.
    ld_error = 'X'.
    ls_bkpf-control = '@5C@'.
    ls_bkpf-error = 'BLART MISSING'.
    ls_glu1-control = '@5C@'.
    ls_glu1-error = 'BLART MISSING'.
    ls_bseg-control = '@5C@'.
    ls_bseg-error = 'BLART MISSING'.
  ELSE.
    ld_error = 'X'.
    IF ls_bkpf-blart IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
      IF ls_bseg_h_blart IS INITIAL.
        ls_bseg_h_blart = ls_bkpf-blart.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bseg_h_blart NE ls_bkpf-blart.
        ls_bseg_h_blart = ls_bkpf-blart.
        ls_bseg-control = '@5E@'.
      ENDIF.
      IF ls_glu1-blart IS NOT INITIAL
        AND ls_bkpf-gjahr GE gs_curry.
        ls_glu1-blart = ls_bkpf-blart.
        ls_glu1-control = '@5E@'.
      ELSEIF ls_glu1-blart IS INITIAL.
        ls_glu1-blart = ls_bkpf-blart.
        ls_glu1-control = '@5D@'.
      ENDIF.
    ELSEIF ls_bseg_h_blart IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
      IF acdoca_active = 1.
        DATA blart_conditions TYPE c LENGTH 200.
        blart_conditions = 'h_BLART NE ld_clear_BLART AND h_BLART NE ls_bseg_h_BLART AND bukrs = ls_bseg-bukrs AND gjahr = ls_bseg-gjahr AND belnr = ls_bseg-belnr'.
        LOOP AT gt_bseg INTO ls_bseg_check
         WHERE (blart_conditions).
          EXIT.
        ENDLOOP.
      ELSE.
        sy-subrc = 4.
      ENDIF.
      IF sy-subrc = 4.
        IF ls_glu1-blart IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_glu1-blart = ls_bseg_h_blart.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_glu1-blart IS INITIAL.
          ls_glu1-blart = ls_bseg_h_blart.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-blart = ls_bseg_h_blart.
        ls_bkpf-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BLART MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BLART MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BLART MISMATCH'.
      ENDIF.
    ELSEIF ls_glu1-poper IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
      LOOP AT gt_glu1mod INTO ls_glu1_check
WHERE blart NE ld_clear_blart
AND blart NE ls_glu1-blart
AND rbukrs = ls_glu1-rbukrs
AND gjahr = ls_glu1-gjahr
AND belnr = ls_glu1-belnr.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 4.
        ls_bkpf-blart = ls_glu1-blart.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_blart = ls_glu1-blart.
        ls_bseg-control = '@5D@'.
      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'BLART MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'H_BLART MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'BLART MISMATCH'.
      ENDIF.
    ENDIF.
    IF ls_bkpf-blart = ls_bseg_h_blart
      AND ls_bkpf-blart = ls_glu1-blart.
      IF ls_bkpf-control = '@5D@'.
        ls_bkpf-error = 'BLART MISSING'.
      ENDIF.
      IF ls_bseg-control = '@5D@'.
        ls_bseg-error = 'H_BLART MISSING'.
      ELSEIF ls_bseg-control = '@5E@'.
        ls_bseg-error = 'H_BLART MISMATCH'.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_glu1-control = '@5D@'.
        ls_glu1-error = 'BLART MISSING'.
      ENDIF.

    ELSE.
      ls_bkpf-control = '@5C@'.
      ls_bkpf-error = 'BLART MISMATCH'.
      ls_glu1-control = '@5C@'.
      ls_glu1-error = 'H_BLART MISMATCH'.
      ls_bseg-control = '@5C@'.
      ls_bseg-error = 'BLART MISMATCH'.
    ENDIF.
  ENDIF.

***update tables
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
      <ls_bseg_h_blart> = ls_bseg_h_blart.
    ENDIF.

    IF ls_glu1-error(5) = 'BLART'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bseg-error(7) = 'H_BLART'.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ELSEIF ls_bkpf-error(5) = 'BLART'.
      MOVE-CORRESPONDING ls_bkpf TO ls_flag.
      MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
    ENDIF.
    APPEND ls_flag TO gt_flag.
  ENDIF.

ENDFORM.

FORM compare_amounts CHANGING ls_bkpf LIKE LINE OF gt_bkpf
                            ls_bseg LIKE LINE OF gt_bseg
                            ls_glu1 LIKE LINE OF gt_glu1mod
                            ld_index_bkpf TYPE sy-tabix
                            ld_index_bseg TYPE sy-tabix
                            ld_index_glu1 TYPE sy-tabix.

  DATA ls_bseg_ac TYPE bseg.
  DATA ls_glu1_sum LIKE LINE OF gt_glu1mod.
  DATA ls_bkpf_ac TYPE bkpf.
  DATA ls_bseg_h_hwaer TYPE bkpf-hwaer.
  DATA ls_bseg_h_hwae2 TYPE bkpf-hwae2.
  DATA ls_bseg_h_hwae3 TYPE bkpf-hwae3.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ld_b_inactive TYPE c LENGTH 1.

  FIELD-SYMBOLS: <ld_dmbe2_ac>     TYPE any, <ld_dmbe3_ac> TYPE any,
                 <ld_hwae2_ac>     TYPE any, <ld_hwae3_ac> TYPE any,
                 <ls_bseg_h_hwaer> TYPE any, <ls_bseg_h_hwae2> TYPE any,
                 <ls_bseg_h_hwae3> TYPE any.

  IF gs_x001-bukrs NE ls_bkpf-bukrs OR gd_x001_rldnr NE ls_glu1-rldnr.
    gd_x001_rldnr = ls_glu1-rldnr.
    PERFORM get_currency_mapping CHANGING ls_bkpf-bukrs ls_glu1-rldnr
                                 gs_curr_map gs_x001.
  ENDIF.

  IF gd_mass = 'X'.
    ld_b_inactive = gd_b_inactive.
  ELSE.
    IF gs_fagl_activec-splitmethd IS NOT INITIAL.
      SELECT SINGLE b_inactive
        INTO ld_b_inactive
        FROM fagl_split_actc
        WHERE bukrs = ls_bseg-bukrs.
    ELSE.
      ld_b_inactive = 'X'.
    ENDIF.
  ENDIF.

  IF ld_b_inactive NE 'X'.
    LOOP AT gt_glu1mod INTO ls_glu1_sum
      WHERE rbukrs = ls_glu1-rbukrs
      AND gjahr = ls_glu1-gjahr
      AND belnr = ls_glu1-belnr
      AND buzei = ls_glu1-buzei
      AND rldnr = ls_glu1-rldnr
      AND check NE 'O'.

      ADD ls_glu1_sum-tsl TO ls_bseg_ac-pswbt.

      ADD ls_glu1_sum-hsl TO ls_bseg_ac-dmbtr.

      IF gs_curr_map-dmbe2 IS NOT INITIAL.
        ASSIGN COMPONENT gs_curr_map-dmbe2 OF STRUCTURE ls_glu1_sum TO <ld_dmbe2_ac>.
        ADD <ld_dmbe2_ac> TO ls_bseg_ac-dmbe2.
      ENDIF.

      IF gs_curr_map-dmbe3 IS NOT INITIAL.
        ASSIGN COMPONENT gs_curr_map-dmbe3 OF STRUCTURE ls_glu1_sum TO <ld_dmbe3_ac>.
        ADD <ld_dmbe3_ac> TO ls_bseg_ac-dmbe3.
      ENDIF.

    ENDLOOP.
  ELSE.
    ADD ls_glu1-tsl TO ls_bseg_ac-pswbt.

    ADD ls_glu1-hsl TO ls_bseg_ac-dmbtr.

    IF gs_curr_map-dmbe2 IS NOT INITIAL.
      ASSIGN COMPONENT gs_curr_map-dmbe2 OF STRUCTURE ls_glu1 TO <ld_dmbe2_ac>.
      ADD <ld_dmbe2_ac> TO ls_bseg_ac-dmbe2.
    ENDIF.

    IF gs_curr_map-dmbe3 IS NOT INITIAL.
      ASSIGN COMPONENT gs_curr_map-dmbe3 OF STRUCTURE ls_glu1 TO <ld_dmbe3_ac>.
      ADD <ld_dmbe3_ac> TO ls_bseg_ac-dmbe3.
    ENDIF.
  ENDIF.

  IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
    IF gs_curr_map-hwae2 IS NOT INITIAL.
      ASSIGN COMPONENT gs_curr_map-hwae2 OF STRUCTURE ls_glu1 TO <ld_hwae2_ac>.
      ls_bkpf_ac-hwae2 = <ld_hwae2_ac>.
    ENDIF.

    IF gs_curr_map-hwae3 IS NOT INITIAL.
      ASSIGN COMPONENT gs_curr_map-hwae3 OF STRUCTURE ls_glu1 TO <ld_hwae3_ac>.
      ls_bkpf_ac-hwae3 = <ld_hwae3_ac>.
    ENDIF.

    ASSIGN COMPONENT 'H_HWAER' OF STRUCTURE ls_bseg TO <ls_bseg_h_hwaer>.
    ls_bseg_h_hwaer = <ls_bseg_h_hwaer>.

    ASSIGN COMPONENT 'H_HWAE2' OF STRUCTURE ls_bseg TO <ls_bseg_h_hwae2>.
    ls_bseg_h_hwae2 = <ls_bseg_h_hwae2>.

    ASSIGN COMPONENT 'H_HWAE3' OF STRUCTURE ls_bseg TO <ls_bseg_h_hwae3>.
    ls_bseg_h_hwae3 = <ls_bseg_h_hwae3>.
  ELSE.
    ls_bkpf_ac-hwae2 = ls_bkpf-hwae2.
    ls_bkpf_ac-hwae3 = ls_bkpf-hwae3.
    ls_bseg_h_hwaer = ls_bkpf-hwaer.
    ls_bseg_h_hwae2 = ls_bkpf-hwae2.
    ls_bseg_h_hwae3 = ls_bkpf-hwae3.

  ENDIF.

  CLEAR ls_flag.
  IF ls_bseg-shkzg = 'H'.
    ls_bseg-dmbtr = ls_bseg-dmbtr * -1.
  ENDIF.
  IF ls_bseg-dmbtr NE ls_bseg_ac-dmbtr.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'DMBTR MISMATCH'.
    ld_error = 'X'.
    CONCATENATE 'HSL' 'MISMATCH' INTO ls_glu1-error SEPARATED BY space.
  ENDIF.
  ls_bseg-dmbtr = abs( ls_bseg-dmbtr ).
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF gs_curr_map-dmbe2 IS NOT INITIAL.
    CLEAR ls_flag.
    IF ls_bseg-shkzg = 'H'.
      ls_bseg-dmbe2 = ls_bseg-dmbe2 * -1.
    ENDIF.
    IF ls_bseg-dmbe2 NE ls_bseg_ac-dmbe2.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'DMBE2 MISMATCH'.
      ld_error = 'X'.
      CONCATENATE gs_curr_map-dmbe2 'MISMATCH' INTO ls_glu1-error SEPARATED BY space.
    ENDIF.
    ls_bseg-dmbe2 = abs( ls_bseg-dmbe2 ).
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDIF.

  IF gs_curr_map-dmbe3 IS NOT INITIAL.
    CLEAR ls_flag.
    IF ls_bseg-shkzg = 'H'.
      ls_bseg-dmbe3 = ls_bseg-dmbe3 * -1.
    ENDIF.
    IF ls_bseg-dmbe3 NE ls_bseg_ac-dmbe3.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'DMBE3 MISMATCH'.
      ld_error = 'X'.
      CONCATENATE gs_curr_map-dmbe3 'MISMATCH' INTO ls_glu1-error SEPARATED BY space.
    ENDIF.
    ls_bseg-dmbe3 = abs( ls_bseg-dmbe3 ).
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      MOVE-CORRESPONDING ls_bseg TO ls_flag.
      IF ls_bkpf-bstat NE 'L'.
        MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
      ELSE.
        MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
        MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
      ENDIF.
      MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bseg-shkzg = 'H'.
    ls_bseg-pswbt = ls_bseg-pswbt * -1.
  ENDIF.
  IF ls_bseg-pswbt NE ls_bseg_ac-pswbt.
    ls_bseg-control = '@5C@'.
    ls_glu1-control = '@5C@'.
    ls_bseg-error = 'PSWBT MISMATCH'.
    ls_glu1-error = 'TSL MISMATCH'.
    ld_error = 'X'.
  ENDIF.
  ls_bseg-pswbt = abs( ls_bseg-pswbt ).
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  CLEAR ls_flag.
  IF ls_bseg-pswsl NE ls_glu1-rtcur.
    ld_error = 'X'.
    IF ls_bseg-pswsl IS INITIAL.
      ls_bseg-pswsl = ls_glu1-rtcur.
      ls_bseg-control = '@5D@'.
      ls_bseg-error = 'PSWSL MISSING'.
    ELSEIF ls_glu1-rtcur IS INITIAL.
      ls_glu1-rtcur = ls_bseg-pswsl.
      ls_glu1-control = '@5D@'.
      ls_glu1-error = 'RTCUR MISSING'.
    ELSE.
      ls_bseg-control = '@5C@'.
      ls_glu1-control = '@5C@'.
      ls_bseg-error = 'PSWSL MISMATCH'.
      ls_glu1-error = 'RTCUR MISMATCH'.
    ENDIF.
  ELSEIF ls_glu1-buzei IS INITIAL AND ls_glu1-rtcur IS INITIAL.
    DATA ld_xsalh TYPE skb1-xsalh.
    ld_error = 'X'.
    SELECT SINGLE xsalh FROM skb1 INTO ld_xsalh WHERE bukrs = ls_glu1-rbukrs AND saknr = ls_glu1-racct.
    IF ld_xsalh = 'X'.
      ls_glu1-rtcur = ls_bkpf-hwaer.
      ls_bseg-pswsl = ls_bkpf-hwaer.
    ELSE.
      ls_glu1-rtcur = ls_bkpf-waers.
      ls_bseg-pswsl = ls_bkpf-waers.
    ENDIF.
    ls_glu1-control = '@5D@'.
    ls_glu1-error = 'RTCUR MISSING'.
    ls_bseg-control = '@5D@'.
    ls_bseg-error = 'PSWSL MISSING'.
  ENDIF.
  IF ld_error IS NOT INITIAL.
    ld_error = ' '.
    MOVE-CORRESPONDING ls_bseg TO ls_flag.
    IF ls_glu1-control = '@5D' OR ls_glu1-control = '@5C@'.
      MOVE-CORRESPONDING ls_glu1 TO ls_flag.
    ENDIF.
    IF ls_bkpf-bstat NE 'L'.
      MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
    ELSE.
      MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
      MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
    ENDIF.
    MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF acdoca_active = 1.
    CLEAR ls_flag.
    FIELD-SYMBOLS <ls_glu1_rhcur> TYPE any.
    ASSIGN COMPONENT 'RHCUR' OF STRUCTURE ls_glu1 TO <ls_glu1_rhcur>.
    IF ls_bkpf-hwaer = ls_bseg_h_hwaer
    AND ls_bkpf-hwaer = <ls_glu1_rhcur>.
    ELSE.
      ld_error = 'X'.
      IF ls_bkpf-hwaer IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
        IF ls_bseg_h_hwaer IS INITIAL.
          ls_bseg_h_hwaer = ls_bkpf-hwaer.
          ls_bseg-control = '@5D@'.
        ELSEIF ls_bseg_h_hwaer NE ls_bkpf-hwaer.
          ls_bseg_h_hwaer = ls_bkpf-hwaer.
          ls_bseg-control = '@5E@'.
        ENDIF.
        IF <ls_glu1_rhcur> IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwaer = ls_bkpf-hwaer.
          ls_glu1-control = '@5E@'.
        ELSEIF <ls_glu1_rhcur> IS INITIAL.
          ls_bkpf_ac-hwaer = ls_bkpf-hwaer.
          ls_glu1-control = '@5D@'.
        ENDIF.
      ELSEIF ls_bseg_h_hwaer IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
        IF <ls_glu1_rhcur> IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwaer = ls_bseg_h_hwaer.
          ls_glu1-control = '@5E@'.
        ELSEIF <ls_glu1_rhcur> IS INITIAL.
          ls_bkpf_ac-hwaer = ls_bseg_h_hwaer.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-hwaer = ls_bseg_h_hwaer.
        ls_bkpf-control = '@5D@'.
      ELSEIF <ls_glu1_rhcur> IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
        ls_bkpf-hwaer = <ls_glu1_rhcur>.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_hwaer = <ls_glu1_rhcur>.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_bkpf-hwaer = ls_bseg_h_hwaer
      AND ls_bkpf-hwaer = <ls_glu1_rhcur>.
        IF ls_bkpf-control = '@5D@'.
          ls_bkpf-error = 'HWAER MISSING'.
        ENDIF.
        IF ls_bseg-control = '@5D@'.
          ls_bseg-error = 'H_HWAER MISSING'.
        ELSEIF ls_bseg-control = '@5E@'.
          ls_bseg-error = 'H_HWAER MISMATCH'.
          ls_bseg-control = '@5D@'.
        ENDIF.
        IF ls_glu1-control = '@5D@'.
          ls_glu1-error = 'RHCUR MISSING'.
        ENDIF.

      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'HWAER MISMATCH'.
        ls_glu1-control = '@5C@'.
        ls_glu1-error = 'RHCUR MISMATCH'.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'H_HWAER MISMATCH'.
      ENDIF.
    ENDIF.
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
        <ls_bseg_h_hwaer> = ls_bseg_h_hwaer.
      ENDIF.

      IF ls_glu1-error(5) = 'RHCUR'.
        MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
        MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bseg-error(7) = 'H_HWAER'.
        MOVE-CORRESPONDING ls_bseg TO ls_flag.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bkpf-error(5) = 'HWAER'.
        MOVE-CORRESPONDING ls_bkpf TO ls_flag.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ENDIF.
      APPEND ls_flag TO gt_flag.
    ENDIF.

    CLEAR ls_flag.
    IF ls_bkpf-hwae2 = ls_bseg_h_hwae2
    AND ls_bkpf-hwae2 = ls_bkpf_ac-hwae2.
    ELSE.
      ld_error = 'X'.
      IF ls_bkpf-hwae2 IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
        IF ls_bseg_h_hwae2 IS INITIAL.
          ls_bseg_h_hwae2 = ls_bkpf-hwae2.
          ls_bseg-control = '@5D@'.
        ELSEIF ls_bseg_h_hwae2 NE ls_bkpf-hwae2.
          ls_bseg_h_hwae2 = ls_bkpf-hwae2.
          ls_bseg-control = '@5E@'.
        ENDIF.
        IF ls_bkpf_ac-hwae2 IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwae2 = ls_bkpf-hwae2.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_bkpf_ac-hwae2 IS INITIAL.
          ls_bkpf_ac-hwae2 = ls_bkpf-hwae2.
          ls_glu1-control = '@5D@'.
        ENDIF.
      ELSEIF ls_bseg_h_hwae2 IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
        IF ls_bkpf_ac-hwae2 IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwae2 = ls_bseg_h_hwae2.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_bkpf_ac-hwae2 IS INITIAL.
          ls_bkpf_ac-hwae2 = ls_bseg_h_hwae2.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-hwae2 = ls_bseg_h_hwae2.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bkpf_ac-hwae2 IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
        ls_bkpf-hwae2 = ls_bkpf_ac-hwae2.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_hwae2 = ls_bkpf_ac-hwae2.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_bkpf-hwae2 = ls_bseg_h_hwae2
      AND ls_bkpf-hwae2 = ls_bkpf_ac-hwae2.
        IF ls_bkpf-control = '@5D@'.
          ls_bkpf-error = 'HWAE2 MISSING'.
        ENDIF.
        IF ls_bseg-control = '@5D@'.
          ls_bseg-error = 'H_HWAE2 MISSING'.
        ELSEIF ls_bseg-control = '@5E@'.
          ls_bseg-error = 'H_HWAE2 MISMATCH'.
          ls_bseg-control = '@5D@'.
        ENDIF.
        IF ls_glu1-control = '@5D@'.
          CONCATENATE gs_curr_map-hwae2 'MISSING' INTO ls_glu1-error SEPARATED BY space.
        ENDIF.

      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'HWAE2 MISMATCH'.
        ls_glu1-control = '@5C@'.
        CONCATENATE gs_curr_map-hwae2 'MISMATCH' INTO ls_glu1-error SEPARATED BY space.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'H_HWAE2 MISMATCH'.
      ENDIF.
    ENDIF.
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
        <ls_bseg_h_hwae2> = ls_bseg_h_hwae2.
      ENDIF.

      IF ls_glu1-error(5) = gs_curr_map-hwae2.
        MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
        MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bseg-error(7) = 'H_HWAE2'.
        MOVE-CORRESPONDING ls_bseg TO ls_flag.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bkpf-error(5) = 'HWAE2'.
        MOVE-CORRESPONDING ls_bkpf TO ls_flag.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ENDIF.
      APPEND ls_flag TO gt_flag.
    ENDIF.

    CLEAR ls_flag.
    IF ls_bkpf-hwae3 = ls_bseg_h_hwae3
    AND ls_bkpf-hwae3 = ls_bkpf_ac-hwae3.
    ELSE.
      ld_error = 'X'.
      IF ls_bkpf-hwae3 IS NOT INITIAL AND ls_bkpf-control NE '@5C@'.
        IF ls_bseg_h_hwae3 IS INITIAL.
          ls_bseg_h_hwae3 = ls_bkpf-hwae3.
          ls_bseg-control = '@5D@'.
        ELSEIF ls_bseg_h_hwae3 NE ls_bkpf-hwae3.
          ls_bseg_h_hwae3 = ls_bkpf-hwae3.
          ls_bseg-control = '@5E@'.
        ENDIF.
        IF ls_bkpf_ac-hwae3 IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwae3 = ls_bkpf-hwae3.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_bkpf_ac-hwae3 IS INITIAL.
          ls_bkpf_ac-hwae3 = ls_bkpf-hwae3.
          ls_glu1-control = '@5D@'.
        ENDIF.
      ELSEIF ls_bseg_h_hwae3 IS NOT INITIAL AND ls_bseg-control NE '@5C@'.
        IF ls_bkpf_ac-hwae3 IS NOT INITIAL
          AND ls_bkpf-gjahr GE gs_curry.
          ls_bkpf_ac-hwae3 = ls_bseg_h_hwae3.
          ls_glu1-control = '@5E@'.
        ELSEIF ls_bkpf_ac-hwae3 IS INITIAL.
          ls_bkpf_ac-hwae3 = ls_bseg_h_hwae3.
          ls_glu1-control = '@5D@'.
        ENDIF.
        ls_bkpf-hwae3 = ls_bseg_h_hwae3.
        ls_bseg-control = '@5D@'.
      ELSEIF ls_bkpf_ac-hwae3 IS NOT INITIAL AND ls_glu1-control NE '@5C@'.
        ls_bkpf-hwae3 = ls_bkpf_ac-hwae3.
        ls_bkpf-control = '@5D@'.
        ls_bseg_h_hwae3 = ls_bkpf_ac-hwae3.
        ls_bseg-control = '@5D@'.
      ENDIF.
      IF ls_bkpf-hwae3 = ls_bseg_h_hwae3
      AND ls_bkpf-hwae3 = ls_bkpf_ac-hwae3.
        IF ls_bkpf-control = '@5D@'.
          ls_bkpf-error = 'HWAE3 MISSING'.
        ENDIF.
        IF ls_bseg-control = '@5D@'.
          ls_bseg-error = 'H_HWAE3 MISSING'.
        ELSEIF ls_bseg-control = '@5E@'.
          ls_bseg-error = 'H_HWAE3 MISMATCH'.
          ls_bseg-control = '@5D@'.
        ENDIF.
        IF ls_glu1-control = '@5D@'.
          CONCATENATE gs_curr_map-hwae3 'MISSING' INTO ls_glu1-error SEPARATED BY space.
        ENDIF.

      ELSE.
        ls_bkpf-control = '@5C@'.
        ls_bkpf-error = 'HWAE3 MISMATCH'.
        ls_glu1-control = '@5C@'.
        CONCATENATE gs_curr_map-hwae3 'MISMATCH' INTO ls_glu1-error SEPARATED BY space.
        ls_bseg-control = '@5C@'.
        ls_bseg-error = 'H_HWAE3 MISMATCH'.
      ENDIF.
    ENDIF.
    IF ld_error IS NOT INITIAL.
      ld_error = ' '.
      IF acdoca_active = 1 AND ls_bkpf-bstat NE 'L'.
        <ls_bseg_h_hwae3> = ls_bseg_h_hwae3.
      ENDIF.

      IF ls_glu1-error(5) = gs_curr_map-hwae3.
        MOVE-CORRESPONDING ls_glu1 TO ls_flag. ls_flag-bukrs = ls_glu1-rbukrs.
        MODIFY gt_glu1mod FROM ls_glu1 INDEX ld_index_glu1.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bseg-error(7) = 'H_HWAE3'.
        MOVE-CORRESPONDING ls_bseg TO ls_flag.
        IF ls_bkpf-bstat NE 'L'.
          MODIFY gt_bseg FROM ls_bseg INDEX ld_index_bseg.
        ELSE.
          MOVE-CORRESPONDING ls_bseg TO ls_bseg_add.
          MODIFY gt_bseg_add FROM ls_bseg_add INDEX ld_index_bseg.
        ENDIF.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ELSEIF ls_bkpf-error(5) = 'HWAE3'.
        MOVE-CORRESPONDING ls_bkpf TO ls_flag.
        MODIFY gt_bkpf FROM ls_bkpf INDEX ld_index_bkpf.
      ENDIF.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDIF.
ENDFORM.

FORM get_currency_mapping CHANGING iv_bukrs TYPE bkpf-bukrs
                                iv_ledger TYPE rldnr
                           ls_curr_mapp TYPE gty_s_curr_mapp
                                   es_x001 TYPE x001.

* Determine which currency fields in ACDOCA correspond to BSEG-DMBE2 and BSEG-DMBE3
* Do this for all ledgers and save the result in et_curr_mapp
* et_curr_mapp-DMBE2 contains the field name of the corresponing ACDOCA field
* et_curr_mapp-DMBE3 contains the field name of the corresponing ACDOCA field
  DATA: lv_ledger TYPE fagl_rldnr.
  DATA: ls_x001 TYPE x001.

  DATA: ls_org_info TYPE glx_org_info.     "customizing information of ledger
  DATA: BEGIN OF ls_zuor,
          rldnr  TYPE fagl_rldnr,
          curty  TYPE char2,
          acfnam TYPE char3,
        END OF ls_zuor.
  DATA: lt_zuor LIKE TABLE OF ls_zuor.

  DATA: lv_c       TYPE string,
        lv_curt    TYPE string,
        lv_curr    TYPE string,
        lv_fg_curt TYPE string.

  DATA: lv_dummy    TYPE string,
        ls_bapiret2 TYPE bapiret2.

  DATA: ls_org_info_mig TYPE glx_org_info. "old migrated info

  lv_ledger = iv_ledger.
  FIELD-SYMBOLS: <fs_curt>    TYPE any,
                 <fs_curr>    TYPE any,
                 <fs_fg_curt> TYPE any.

* Read company code data to find the currency type of the second and third local currency
  CALL FUNCTION 'FI_CURRENCY_INFORMATION'
    EXPORTING
      i_bukrs                = iv_bukrs
    IMPORTING
      e_x001                 = ls_x001
    EXCEPTIONS
      currency_2_not_defined = 1
      currency_3_not_defined = 2
      OTHERS                 = 3.
  IF sy-subrc = 0.
    es_x001 = ls_x001.
  ENDIF.

* Get the currency types of the currency fields HSL, KSL, OSL,... from the customizing
* Save the result in lt_zuor (structure: Name of currency field (ACFNAM), Currency type (CURTY)
* Read value of ACFNAM for company code currency types in ls_x001-curt2 and ls_x001-curt3 from lt_zuor
* and write the result into the mapping table et_curr_mapp
* Do this for all ledgers

  CLEAR ls_curr_mapp.
  ls_curr_mapp-rldnr = lv_ledger.
  IF ls_x001-curt2 NE space.
    IF acdoca_active = 1.
      CALL FUNCTION 'G_GET_ORGANIZATIONAL_DATA'
        EXPORTING
          i_rldnr                     = lv_ledger
          i_orgunit                   = iv_bukrs
          ib_acdoc_compatibility_mode = space
        IMPORTING
          organizational_info         = ls_org_info
        EXCEPTIONS
          no_info_found               = 1
          error_in_setup              = 2
          error_in_depld              = 3
          OTHERS                      = 4.

*       Get migrated currency types
      CLEAR ls_org_info_mig.
      CALL FUNCTION 'G_GET_ORGANIZATIONAL_DATA'
        EXPORTING
          i_rldnr                     = lv_ledger
          i_orgunit                   = iv_bukrs
          ib_acdoc_compatibility_mode = 'X'
        IMPORTING
          organizational_info         = ls_org_info_mig
        EXCEPTIONS
          OTHERS                      = 4.
    ELSE.
      CALL FUNCTION 'G_GET_ORGANIZATIONAL_DATA'
        EXPORTING
          i_rldnr             = lv_ledger
          i_orgunit           = iv_bukrs
        IMPORTING
          organizational_info = ls_org_info
        EXCEPTIONS
          no_info_found       = 1
          error_in_setup      = 2
          error_in_depld      = 3
          OTHERS              = 4.
    ENDIF.
    ls_zuor-rldnr = lv_ledger.

    DO 10 TIMES.
      lv_c = sy-index.
      CLEAR: lv_curt, lv_curr, ls_zuor.
      CONCATENATE 'ls_org_info-curt' lv_c INTO lv_curt.
      CONCATENATE 'ls_org_info-curr' lv_c INTO lv_curr.
      CONCATENATE 'ls_org_info-fg_curt' lv_c INTO lv_fg_curt.
      ASSIGN (lv_curt) TO <fs_curt>.
      ASSIGN (lv_curr) TO <fs_curr>.
      ASSIGN (lv_fg_curt) TO <fs_fg_curt>.
      IF NOT <fs_curt> IS INITIAL
       AND NOT <fs_curr> IS INITIAL
       AND NOT <fs_fg_curt> IS INITIAL.
*           Check whether CT was already used before migration
*           as integrated CT
*           If not, this CT must NOT be checked as it has been filled
*           afterwards e.g. by report FINS_ACDOC_UTIL_SET_KSL
*           which can not fill it 100% correctly
        IF <fs_curt> NE '10'                   "10 is always OK
           AND NOT ls_org_info_mig IS INITIAL. "not migrated -> OK!
          IF  ls_org_info_mig-curt2 NE <fs_curt>
          AND ls_org_info_mig-curt3 NE <fs_curt>.
            CHECK 1 = 2.
          ENDIF.
        ENDIF.
        ls_zuor-rldnr = lv_ledger.
        ls_zuor-acfnam = <fs_fg_curt>.  "e.g. ls_org_info-fg_curt1
        ls_zuor-curty = <fs_curt>.      "e.g. ls_org_info-curt1
        APPEND ls_zuor TO lt_zuor.
      ENDIF.
    ENDDO.

    CLEAR ls_zuor.
    IF ls_x001-curt2 IS NOT INITIAL.
      READ TABLE lt_zuor WITH KEY rldnr = lv_ledger
                                  curty = ls_x001-curt2
                         INTO ls_zuor.
      IF sy-subrc = 0.
        ls_curr_mapp-rldnr = lv_ledger.
        ls_curr_mapp-dmbe2 = ls_zuor-acfnam.
      ENDIF.
    ENDIF.

    IF ls_x001-curt3 IS NOT INITIAL.
      READ TABLE lt_zuor WITH KEY rldnr = lv_ledger
                             curty = ls_x001-curt3
                    INTO ls_zuor.
      IF sy-subrc = 0.
        ls_curr_mapp-rldnr = lv_ledger.
        ls_curr_mapp-dmbe3 = ls_zuor-acfnam.
      ENDIF.
    ENDIF.
  ENDIF.

  IF ls_curr_mapp-dmbe2 = 'KSL'.
    ls_curr_mapp-hwae2 = 'RKCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'OSL'.
    ls_curr_mapp-hwae2 = 'ROCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'VSL'.
    ls_curr_mapp-hwae2 = 'RVCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'BSL'.
    ls_curr_mapp-hwae2 = 'RBCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'CSL'.
    ls_curr_mapp-hwae2 = 'RCCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'DSL'.
    ls_curr_mapp-hwae2 = 'RDCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'ESL'.
    ls_curr_mapp-hwae2 = 'RECUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'FSL'.
    ls_curr_mapp-hwae2 = 'RFCUR'.
  ELSEIF ls_curr_mapp-dmbe2 = 'GSL'.
    ls_curr_mapp-hwae2 = 'RGCUR'.
  ENDIF.

  IF ls_curr_mapp-dmbe3 = 'KSL'.
    ls_curr_mapp-hwae3 = 'RKCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'OSL'.
    ls_curr_mapp-hwae3 = 'ROCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'VSL'.
    ls_curr_mapp-hwae3 = 'RVCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'BSL'.
    ls_curr_mapp-hwae3 = 'RBCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'CSL'.
    ls_curr_mapp-hwae3 = 'RCCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'DSL'.
    ls_curr_mapp-hwae3 = 'RDCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'ESL'.
    ls_curr_mapp-hwae3 = 'RECUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'FSL'.
    ls_curr_mapp-hwae3 = 'RFCUR'.
  ELSEIF ls_curr_mapp-dmbe3 = 'GSL'.
    ls_curr_mapp-hwae3 = 'RGCUR'.
  ENDIF.



ENDFORM.

FORM check_currency_overall.
  DATA ld_clear_curtp TYPE bkpf-curt2.
  DATA finsc_ld_cmp TYPE c LENGTH 12 VALUE 'FINSC_LD_CMP'.

  IF acdoca_active = 1.
    SELECT SINGLE curtph FROM (finsc_ld_cmp)
      INTO gs_finsc_ld_cmp_disp-curtph
      WHERE curtph NE ld_clear_curtp.

    SELECT SINGLE curtpk FROM (finsc_ld_cmp)
    INTO gs_finsc_ld_cmp_disp-curtpk
    WHERE curtpk NE ld_clear_curtp.

    SELECT SINGLE curtpo FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpo
  WHERE curtpo NE ld_clear_curtp.

    SELECT SINGLE curtpv FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpv
  WHERE curtpv NE ld_clear_curtp.

    SELECT SINGLE curtpb FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpb
  WHERE curtpb NE ld_clear_curtp.

    SELECT SINGLE curtpc FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpc
  WHERE curtpc NE ld_clear_curtp.

    SELECT SINGLE curtpd FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpd
  WHERE curtpd NE ld_clear_curtp.

    SELECT SINGLE curtpe FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpe
  WHERE curtpe NE ld_clear_curtp.

    SELECT SINGLE curtpf FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpf
  WHERE curtpf NE ld_clear_curtp.

    SELECT SINGLE curtpg FROM (finsc_ld_cmp)
  INTO gs_finsc_ld_cmp_disp-curtpg
  WHERE curtpg NE ld_clear_curtp.
  ELSE.
    gs_finsc_ld_cmp_disp-curtph = 'X'.
    gs_finsc_ld_cmp_disp-curtpk = 'X'.
    gs_finsc_ld_cmp_disp-curtpo = 'X'.
    gs_finsc_ld_cmp_disp-curtpv = 'X'.
  ENDIF.

ENDFORM.

FORM table_cleanup.
  DATA ls_doclist LIKE LINE OF gt_doclist.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_bseg_add LIKE LINE OF gt_bseg_add.
  DATA ls_bse_clr LIKE LINE OF gt_bse_clr.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsad LIKE LINE OF gt_bsad.
  DATA ls_bsed LIKE LINE OF gt_bsed.
  DATA ls_bset LIKE LINE OF gt_bset.
  DATA ls_bsec LIKE LINE OF gt_bsec.
  DATA ls_bkpf LIKE LINE OF gt_bkpf.
  DATA ls_glu1mod LIKE LINE OF gt_glu1mod.
  DATA ls_splinfo LIKE LINE OF gt_splinfo.
  DATA ls_splinfo_val LIKE LINE OF gt_splinfo_val.
  DATA ld_tabix TYPE sy-tabix.

  LOOP AT gt_doclist INTO ls_doclist.
    IF ls_doclist-control = '@5B@'.

      LOOP AT gt_bseg INTO ls_bseg
        WHERE bukrs = ls_doclist-bukrs
        AND belnr = ls_doclist-belnr
        AND gjahr = ls_doclist-gjahr.
        DELETE gt_bseg INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bkpf INTO ls_bkpf
  WHERE bukrs = ls_doclist-bukrs
  AND belnr = ls_doclist-belnr
  AND gjahr = ls_doclist-gjahr.
        DELETE gt_bkpf INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bseg_add INTO ls_bseg_add
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bseg_add INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bse_clr INTO ls_bse_clr
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bse_clr INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsis INTO ls_bsis
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsis INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsas INTO ls_bsas
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsas INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsid INTO ls_bsid
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsid INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsad INTO ls_bsad
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsad INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsik INTO ls_bsik
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsik INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsak INTO ls_bsak
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsak INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_splinfo INTO ls_splinfo
  WHERE bukrs = ls_doclist-bukrs
  AND belnr = ls_doclist-belnr
  AND gjahr = ls_doclist-gjahr.
        DELETE gt_splinfo INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_splinfo_val INTO ls_splinfo_val
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_splinfo_val INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_glu1mod INTO ls_glu1mod
WHERE rbukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_glu1mod INDEX sy-tabix.
      ENDLOOP.

      LOOP AT gt_bsec INTO ls_bsec
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsec INDEX sy-tabix.
      ENDLOOP.
      LOOP AT gt_bsed INTO ls_bsed
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bsed INDEX sy-tabix.
      ENDLOOP.
      LOOP AT gt_bset INTO ls_bset
WHERE bukrs = ls_doclist-bukrs
AND belnr = ls_doclist-belnr
AND gjahr = ls_doclist-gjahr.
        DELETE gt_bset INDEX sy-tabix.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bseg INTO ls_bseg.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bseg-bukrs
             belnr = ls_bseg-belnr
             gjahr = ls_bseg-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bseg INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bkpf INTO ls_bkpf.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bkpf-bukrs
             belnr = ls_bkpf-belnr
             gjahr = ls_bkpf-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bkpf INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bseg_add INTO ls_bseg_add.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bseg_add-bukrs
             belnr = ls_bseg_add-belnr
             gjahr = ls_bseg_add-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bseg_add INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bse_clr INTO ls_bse_clr.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bse_clr-bukrs
             belnr = ls_bse_clr-belnr
             gjahr = ls_bse_clr-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bse_clr INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsis INTO ls_bsis.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsis-bukrs
             belnr = ls_bsis-belnr
             gjahr = ls_bsis-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsis INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsas INTO ls_bsas.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsas-bukrs
             belnr = ls_bsas-belnr
             gjahr = ls_bsas-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsas INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsid INTO ls_bsid.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsid-bukrs
             belnr = ls_bsid-belnr
             gjahr = ls_bsid-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsid INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsad INTO ls_bsad.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsad-bukrs
             belnr = ls_bsad-belnr
             gjahr = ls_bsad-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsad INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsik INTO ls_bsik.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsik-bukrs
             belnr = ls_bsik-belnr
             gjahr = ls_bsik-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsik INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsak INTO ls_bsak.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsak-bukrs
             belnr = ls_bsak-belnr
             gjahr = ls_bsak-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsak INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo INTO ls_splinfo.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_splinfo-bukrs
             belnr = ls_splinfo-belnr
             gjahr = ls_splinfo-gjahr.
    IF sy-subrc = 4.
      DELETE gt_splinfo INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_splinfo_val INTO ls_splinfo_val.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_splinfo_val-bukrs
             belnr = ls_splinfo_val-belnr
             gjahr = ls_splinfo_val-gjahr.
    IF sy-subrc = 4.
      DELETE gt_splinfo_val INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_glu1mod INTO ls_glu1mod.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_glu1mod-rbukrs
             belnr = ls_glu1mod-belnr
             gjahr = ls_glu1mod-gjahr.
    IF sy-subrc = 4.
      DELETE gt_glu1mod INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsec INTO ls_bsec.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsec-bukrs
             belnr = ls_bsec-belnr
             gjahr = ls_bsec-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsec INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsed INTO ls_bsed.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bsed-bukrs
             belnr = ls_bsed-belnr
             gjahr = ls_bsed-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bsed INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bset INTO ls_bset.
    ld_tabix = sy-tabix.
    READ TABLE gt_doclist TRANSPORTING NO FIELDS
    WITH KEY bukrs = ls_bset-bukrs
             belnr = ls_bset-belnr
             gjahr = ls_bset-gjahr.
    IF sy-subrc = 4.
      DELETE gt_bset INDEX ld_tabix.
    ENDIF.
  ENDLOOP.

  PERFORM update_flags.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form store_tables
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM store_tables .
  DATA ld_sumdoc TYPE i.

  DATA lt_bkpf_rfdt LIKE gt_bkpf.
  DATA lt_bseg_rfdt LIKE gt_bseg.
  DATA lt_bsis_rfdt LIKE gt_bsis.
  DATA lt_bsas_rfdt LIKE gt_bsas.
  DATA lt_bsik_rfdt LIKE gt_bsik.
  DATA lt_bsak_rfdt LIKE gt_bsak.
  DATA lt_bsid_rfdt LIKE gt_bsid.
  DATA lt_bsad_rfdt LIKE gt_bsad.
  DATA lt_bsec_rfdt LIKE gt_bsec.
  DATA lt_bsed_rfdt LIKE gt_bsed.
  DATA lt_bset_rfdt LIKE gt_bset.
  DATA lt_bse_clr_rfdt LIKE gt_bse_clr.
  DATA lt_bseg_add_rfdt LIKE gt_bseg_add.
  DATA lt_splinfo_rfdt LIKE gt_splinfo.
  DATA lt_splinfo_val_rfdt LIKE gt_splinfo_val.
  DATA lt_doclist_rfdt LIKE gt_doclist.
  DATA lt_protocol_rfdt LIKE gt_protocol.
  DATA lt_flag_rfdt LIKE gt_flag.
  DATA lt_glu1mod_rfdt LIKE gt_glu1mod.

  IF gd_rfdt IS INITIAL.
    ld_sumdoc = lines( gt_doclist ) + lines( gt_doclist_store ).
    IF ld_sumdoc > p_docmax.
      gd_rfdt = 'X'.
      EXPORT lt_bkpf_rfdt
TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      EXPORT lt_bseg_rfdt
TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      EXPORT lt_bsis_rfdt
TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
      EXPORT lt_bsas_rfdt
TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
      EXPORT lt_bsik_rfdt
TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
      EXPORT lt_bsak_rfdt
        TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
      EXPORT lt_bsid_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
      EXPORT lt_bsad_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
      EXPORT lt_bsec_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      EXPORT lt_bsed_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      EXPORT lt_bset_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      EXPORT lt_bse_clr_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      EXPORT lt_bseg_add_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      EXPORT lt_splinfo_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      EXPORT lt_splinfo_val_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      EXPORT lt_glu1mod_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      EXPORT lt_flag_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_flags.
      EXPORT lt_doclist_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      EXPORT lt_protocol_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_protocol.
    ENDIF.
  ENDIF.

  IF gd_rfdt = 'X'.

    IF gt_bkpf IS NOT INITIAL OR gt_bkpf_store IS NOT INITIAL.
      IMPORT lt_bkpf_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bkpf_store TO lt_bkpf_rfdt.
      ENDIF.
      APPEND LINES OF gt_bkpf TO lt_bkpf_rfdt.
      EXPORT lt_bkpf_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
      CLEAR lt_bkpf_rfdt.
    ENDIF.

    IF gt_bseg IS NOT INITIAL OR gt_bseg_store IS NOT INITIAL.
      IMPORT lt_bseg_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bseg_store TO lt_bseg_rfdt.
      ENDIF.
      APPEND LINES OF gt_bseg TO lt_bseg_rfdt.
      EXPORT lt_bseg_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg.
      CLEAR lt_bseg_rfdt.
    ENDIF.

    IF gt_bsis IS NOT INITIAL OR gt_bsis_store IS NOT INITIAL.
      IMPORT lt_bsis_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsis_store TO lt_bsis_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsis TO lt_bsis_rfdt.
      EXPORT lt_bsis_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsis.
      CLEAR lt_bsis_rfdt.
    ENDIF.

    IF gt_bsas IS NOT INITIAL OR gt_bsas_store IS NOT INITIAL.
      IMPORT lt_bsas_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsas_store TO lt_bsas_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsas TO lt_bsas_rfdt.
      EXPORT lt_bsas_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsas.
      CLEAR lt_bsas_rfdt.
    ENDIF.

    IF gt_bsik IS NOT INITIAL OR gt_bsik_store IS NOT INITIAL.
      IMPORT lt_bsik_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsik_store TO lt_bsik_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsik TO lt_bsik_rfdt.
      EXPORT lt_bsik_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsik.
      CLEAR lt_bsik_rfdt.
    ENDIF.

    IF gt_bsak IS NOT INITIAL OR gt_bsak_store IS NOT INITIAL.
      IMPORT lt_bsak_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsak_store TO lt_bsak_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsak TO lt_bsak_rfdt.
      EXPORT lt_bsak_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsak.
      CLEAR lt_bsak_rfdt.
    ENDIF.

    IF gt_bsid IS NOT INITIAL OR gt_bsid_store IS NOT INITIAL.
      IMPORT lt_bsid_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsid_store TO lt_bsid_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsid TO lt_bsid_rfdt.
      EXPORT lt_bsid_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsid.
      CLEAR lt_bsid_rfdt.
    ENDIF.

    IF gt_bsad IS NOT INITIAL OR gt_bsad_store IS NOT INITIAL.
      IMPORT lt_bsad_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsad_store TO lt_bsad_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsad TO lt_bsad_rfdt.
      EXPORT lt_bsad_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsad.
      CLEAR lt_bsad_rfdt.
    ENDIF.

    IF gt_bsec IS NOT INITIAL OR gt_bsec_store IS NOT INITIAL.
      IMPORT lt_bsec_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsec_store TO lt_bsec_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsec TO lt_bsec_rfdt.
      EXPORT lt_bsec_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsec.
      CLEAR lt_bsec_rfdt.
    ENDIF.

    IF gt_bsed IS NOT INITIAL OR gt_bsed_store IS NOT INITIAL.
      IMPORT lt_bsed_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bsed_store TO lt_bsed_rfdt.
      ENDIF.
      APPEND LINES OF gt_bsed TO lt_bsed_rfdt.
      EXPORT lt_bsed_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bsed.
      CLEAR lt_bsed_rfdt.
    ENDIF.

    IF gt_bset IS NOT INITIAL OR gt_bset_store IS NOT INITIAL.
      IMPORT lt_bset_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bset_store TO lt_bset_rfdt.
      ENDIF.
      APPEND LINES OF gt_bset TO lt_bset_rfdt.
      EXPORT lt_bset_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bset.
      CLEAR lt_bset_rfdt.
    ENDIF.

    IF gt_bse_clr IS NOT INITIAL OR gt_bse_clr_store IS NOT INITIAL.
      IMPORT lt_bse_clr_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bse_clr_store TO lt_bse_clr_rfdt.
      ENDIF.
      APPEND LINES OF gt_bse_clr TO lt_bse_clr_rfdt.
      EXPORT lt_bse_clr_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bse_clr.
      CLEAR lt_bse_clr_rfdt.
    ENDIF.

    IF gt_bseg_add IS NOT INITIAL OR gt_bseg_add_store IS NOT INITIAL.
      IMPORT lt_bseg_add_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_bseg_add_store TO lt_bseg_add_rfdt.
      ENDIF.
      APPEND LINES OF gt_bseg_add TO lt_bseg_add_rfdt.
      EXPORT lt_bseg_add_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_bseg_add.
      CLEAR lt_bseg_add_rfdt.
    ENDIF.

    IF gt_splinfo IS NOT INITIAL OR gt_splinfo_store IS NOT INITIAL.
      IMPORT lt_splinfo_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_splinfo_store TO lt_splinfo_rfdt.
      ENDIF.
      APPEND LINES OF gt_splinfo TO lt_splinfo_rfdt.
      EXPORT lt_splinfo_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo.
      CLEAR lt_splinfo_rfdt.
    ENDIF.

    IF gt_splinfo_val IS NOT INITIAL OR gt_splinfo_val_store IS NOT INITIAL.
      IMPORT lt_splinfo_val_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_splinfo_val_store TO lt_splinfo_val_rfdt.
      ENDIF.
      APPEND LINES OF gt_splinfo_val TO lt_splinfo_val_rfdt.
      EXPORT lt_splinfo_val_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_splinfo_val.
      CLEAR lt_splinfo_val_rfdt.
    ENDIF.

    IF gt_glu1mod IS NOT INITIAL OR gt_glu1_store IS NOT INITIAL.
      IMPORT lt_glu1mod_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_glu1_store TO lt_glu1mod_rfdt.
      ENDIF.
      APPEND LINES OF gt_glu1mod TO lt_glu1mod_rfdt.
      EXPORT lt_glu1mod_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_glu1.
      CLEAR lt_glu1mod_rfdt.
    ENDIF.

    IF gt_flag IS NOT INITIAL OR gt_flag_store IS NOT INITIAL.
      IMPORT lt_flag_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_flags.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_flag_store TO lt_flag_rfdt.
      ENDIF.
      APPEND LINES OF gt_flag TO lt_flag_rfdt.
      EXPORT lt_flag_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_flags.
      CLEAR lt_flag_rfdt.
    ENDIF.

    IF gt_doclist IS NOT INITIAL OR gt_doclist_store IS NOT INITIAL.
      IMPORT lt_doclist_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_doclist_store TO lt_doclist_rfdt.
      ENDIF.
      APPEND LINES OF gt_doclist TO lt_doclist_rfdt.
      EXPORT lt_doclist_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      CLEAR lt_doclist_rfdt.
    ENDIF.

    IF gt_protocol IS NOT INITIAL OR gt_protocol_store IS NOT INITIAL.
      IMPORT lt_protocol_rfdt
      FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_protocol.
      IF gd_store_empty IS INITIAL.
        APPEND LINES OF gt_protocol_store TO lt_protocol_rfdt.
      ENDIF.
      APPEND LINES OF gt_protocol TO lt_protocol_rfdt.
      EXPORT lt_protocol_rfdt
      TO DATABASE rfdt(zf) ID gd_rfdt_timestamp_protocol.
      CLEAR lt_protocol_rfdt.
    ENDIF.
    gd_store_empty = 'X'.

  ELSE.
    APPEND LINES OF gt_bkpf TO gt_bkpf_store.
    APPEND LINES OF gt_bseg TO gt_bseg_store.
    APPEND LINES OF gt_bsec TO gt_bsec_store.
    APPEND LINES OF gt_bsed TO gt_bsed_store.
    APPEND LINES OF gt_bset TO gt_bset_store.
    APPEND LINES OF gt_bsis TO gt_bsis_store.
    APPEND LINES OF gt_bsas TO gt_bsas_store.
    APPEND LINES OF gt_bsik TO gt_bsik_store.
    APPEND LINES OF gt_bsak TO gt_bsak_store.
    APPEND LINES OF gt_bsid TO gt_bsid_store.
    APPEND LINES OF gt_bsad TO gt_bsad_store.
    APPEND LINES OF gt_bse_clr TO gt_bse_clr_store.
    APPEND LINES OF gt_bseg_add TO gt_bseg_add_store.
    APPEND LINES OF gt_splinfo TO gt_splinfo_store.
    APPEND LINES OF gt_splinfo_val TO gt_splinfo_val_store.
    APPEND LINES OF gt_glu1mod TO gt_glu1_store.
    APPEND LINES OF gt_flag TO gt_flag_store.
    APPEND LINES OF gt_doclist TO gt_doclist_store.
    APPEND LINES OF gt_protocol TO gt_protocol_store.
  ENDIF.

  CLEAR: gt_bkpf, gt_bseg, gt_bsec, gt_bset, gt_bsed, gt_bsis, gt_bsas, gt_bsik, gt_bsak, gt_bsid, gt_bsad.
  CLEAR: gt_glu1mod, gt_flag, gt_doclist, gt_protocol, gt_splinfo, gt_splinfo_val, gt_bse_clr, gt_bseg_add.

  REFRESH: gt_bkpf, gt_bseg, gt_bsec, gt_bset, gt_bsed, gt_bsis, gt_bsas, gt_bsik, gt_bsak, gt_bsid, gt_bsad.
  REFRESH: gt_glu1mod, gt_flag, gt_doclist, gt_protocol, gt_splinfo, gt_splinfo_val, gt_bse_clr, gt_bseg_add.

  IF gd_rfdt = 'X'.
    REFRESH: gt_bkpf_store, gt_bseg_store, gt_bsec_store, gt_bset_store, gt_bsed_store, gt_bsis_store, gt_bsas_store, gt_bsik_store, gt_bsak_store, gt_bsid_store, gt_bsad_store.
    REFRESH: gt_glu1_store, gt_flag_store, gt_doclist_store, gt_protocol_store, gt_splinfo_store, gt_splinfo_val_store, gt_bse_clr_store, gt_bseg_add_store.
  ENDIF.

ENDFORM.

FORM display_batch_data.

  DATA ls_bkpf LIKE LINE OF gt_bkpf_store.
  DATA ls_flag LIKE LINE OF gt_flag_store.
  DATA ls_protocol LIKE LINE OF gt_protocol_store.

  DATA lt_bkpf_rfdt LIKE gt_bkpf_store.
  DATA lt_flag_rfdt LIKE gt_flag_store.
  DATA lt_protocol_rfdt LIKE gt_protocol_store.

  SORT gt_flag_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING rldnr ASCENDING control ASCENDING error ASCENDING.
  SORT gt_protocol_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING rldnr ASCENDING type ASCENDING message ASCENDING.
  DELETE ADJACENT DUPLICATES FROM gt_flag_store.
  DELETE ADJACENT DUPLICATES FROM gt_protocol_store.


  IF gd_rfdt = ' '.
    IF gt_bseg_store IS NOT INITIAL.
      IF p_test IS INITIAL AND save_flag = 1.
        FORMAT COLOR 6 INTENSIFIED ON.
        WRITE 'UPDATE MODE'.
      ELSE.
        FORMAT COLOR 5 INTENSIFIED ON.
        WRITE 'TEST MODE'.
      ENDIF.
    ELSE.
      FORMAT COLOR 2 INTENSIFIED ON.
      WRITE 'NO INCONSISTENT DOCUMENT FOUND'.
    ENDIF.
    WRITE /.
    FORMAT COLOR OFF.
  ENDIF.

  IF gd_rfdt = 'X'.
    IMPORT lt_bkpf_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_bkpf.
    gt_bkpf_store = lt_bkpf_rfdt.
    IMPORT lt_flag_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_flags.
    gt_flag_store = lt_flag_rfdt.
    IMPORT lt_protocol_rfdt FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_protocol.
    gt_protocol_store = lt_protocol_rfdt.
  ENDIF.
  LOOP AT gt_bkpf_store INTO ls_bkpf.
    FORMAT COLOR 2 INTENSIFIED ON.
    WRITE sy-uline.
    WRITE: sy-vline, ' DOCUMENT ', sy-vline, ls_bkpf-bukrs, '/', ls_bkpf-belnr, '/', ls_bkpf-gjahr, 92 sy-vline.
    FORMAT COLOR OFF.
    LOOP AT gt_flag_store INTO ls_flag
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr.
      WRITE sy-uline.
      IF ls_flag-buzei IS INITIAL AND ls_flag-rldnr IS INITIAL.
        WRITE: sy-vline, ' ANALYSIS ', sy-vline, ls_flag-control AS ICON, sy-vline, ls_flag-error, 92 sy-vline.
      ELSEIF ls_flag-rldnr IS INITIAL.
        WRITE: sy-vline, ' ANALYSIS ',  sy-vline,ls_flag-control AS ICON, sy-vline, '(BUZEI ', ls_flag-buzei, ') ', ls_flag-error, 92 sy-vline.
      ELSE.
        WRITE: sy-vline, ' ANALYSIS ', sy-vline, ls_flag-control AS ICON, sy-vline, '(BUZEI ', ls_flag-buzei, ', RLDNR ', ls_flag-rldnr, ') ', ls_flag-error, 92 sy-vline.
      ENDIF.
    ENDLOOP.
    LOOP AT gt_protocol_store INTO ls_protocol
      WHERE bukrs = ls_bkpf-bukrs
      AND belnr = ls_bkpf-belnr
      AND gjahr = ls_bkpf-gjahr.
      WRITE sy-uline.
      IF ls_protocol-buzei IS INITIAL AND ls_protocol-rldnr IS INITIAL.
        WRITE: sy-vline, 'CORRECTION',  sy-vline,ls_protocol-type AS ICON, sy-vline, ls_protocol-message, 92 sy-vline.
      ELSEIF ls_flag-rldnr IS INITIAL.
        WRITE: sy-vline, 'CORRECTION', sy-vline, ls_protocol-type AS ICON, sy-vline, '(BUZEI ', ls_protocol-buzei, ') ', ls_protocol-message, 92 sy-vline.
      ELSE.
        WRITE: sy-vline, 'CORRECTION', sy-vline, ls_protocol-type AS ICON, sy-vline, '(BUZEI ', ls_protocol-buzei, ', RLDNR ', ls_protocol-rldnr, ') ', ls_protocol-message, 92 sy-vline.
      ENDIF.

    ENDLOOP.
    WRITE sy-uline.
  ENDLOOP.

  IF gd_rfdt = 'X'.
    CLEAR gt_bkpf_store. REFRESH gt_bkpf_store.
    CLEAR gt_flag_store. REFRESH gt_flag_store.
    CLEAR gt_protocol_store. REFRESH gt_protocol_store.
  ENDIF.
ENDFORM.

FORM prepare_display.
  CREATE OBJECT l_splitter
    EXPORTING
      parent                  = cl_gui_container=>default_screen
      no_autodef_progid_dynnr = abap_true
      rows                    = 1
      columns                 = 3.

  CALL METHOD l_splitter->set_column_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>true.

  CALL METHOD l_splitter->set_column_sash
    EXPORTING
      id    = 2
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>true.

  l_container_left = l_splitter->get_container( row = 1 column = 1 ).
  l_container_right = l_splitter->get_container( row = 1 column = 2 ).
  l_container_out = l_splitter->get_container( row = 1 column = 3 ).

  CREATE OBJECT l_splitter4
    EXPORTING
      parent                  = l_container_left
      no_autodef_progid_dynnr = abap_true
      rows                    = 2
      columns                 = 1.

  CALL METHOD l_splitter4->set_row_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>true.

  l_container_l1 = l_splitter4->get_container( row = 1 column = 1 ).
  l_container_l2 = l_splitter4->get_container( row = 2 column = 1 ).
  CREATE OBJECT l_alv_left
    EXPORTING
      i_parent = l_container_l1.
*  DATA(l_alv_left) = NEW cl_gui_alv_grid( i_parent = l_container_l1 ).

  is_events-eventid = cl_gui_toolbar=>m_id_function_selected.
  is_events-appl_event = abap_true.
  APPEND is_events TO it_events.

  CREATE OBJECT l_splitter7
    EXPORTING
      parent                  = l_container_right
      no_autodef_progid_dynnr = abap_true
      rows                    = 2
      columns                 = 1.

  l_container_rig1 = l_splitter7->get_container( row = 1 column = 1 ).
  l_container_rig2 = l_splitter7->get_container( row = 2 column = 1 ).

  CREATE OBJECT l_splitter2
    EXPORTING
      parent                  = l_container_rig2
      no_autodef_progid_dynnr = abap_true
      rows                    = 16
      columns                 = 1.

  CALL METHOD l_splitter2->set_row_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>false.

  CALL METHOD l_splitter7->set_row_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>false.

  CREATE OBJECT l_splitter5
    EXPORTING
      parent                  = l_container_out
      no_autodef_progid_dynnr = abap_true
      rows                    = 2
      columns                 = 1.

  l_container_out1 = l_splitter5->get_container( row = 1 column = 1 ).
  l_container_out2 = l_splitter5->get_container( row = 2 column = 1 ).
  CREATE OBJECT l_splitter3
    EXPORTING
      parent                  = l_container_out2
      no_autodef_progid_dynnr = abap_true
      rows                    = 16
      columns                 = 1.
  CALL METHOD l_splitter5->set_row_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>false.

  CALL METHOD l_splitter3->set_row_sash
    EXPORTING
      id    = 1
      type  = cl_gui_splitter_container=>type_sashvisible
      value = cl_gui_splitter_container=>false.

  l_container_r1 = l_splitter2->get_container( row = 1 column = 1 ).
  l_container_r2 = l_splitter2->get_container( row = 2 column = 1 ).
  l_container_r3 = l_splitter2->get_container( row = 9 column = 1 ).
  l_container_r4 = l_splitter2->get_container( row = 16 column = 1 ).
  l_container_r5 = l_splitter2->get_container( row = 3 column = 1 ).
  l_container_r6 = l_splitter2->get_container( row = 4 column = 1 ).
  l_container_r7 = l_splitter2->get_container( row = 5 column = 1 ).
  l_container_r8 = l_splitter2->get_container( row = 6 column = 1 ).
  l_container_r9 = l_splitter2->get_container( row = 7 column = 1 ).
  l_container_r10 = l_splitter2->get_container( row = 8 column = 1 ).
  l_container_r11 = l_splitter2->get_container( row = 10 column = 1 ).
  l_container_r12 = l_splitter2->get_container( row = 11 column = 1 ).
  l_container_r13 = l_splitter2->get_container( row = 12 column = 1 ).
  l_container_r14 = l_splitter2->get_container( row = 13 column = 1 ).
  l_container_r15 = l_splitter2->get_container( row = 14 column = 1 ).
  l_container_r16 = l_splitter2->get_container( row = 15 column = 1 ).

  l_container_o1 = l_splitter3->get_container( row = 1 column = 1 ).
  l_container_o2 = l_splitter3->get_container( row = 2 column = 1 ).
  l_container_o3 = l_splitter3->get_container( row = 9 column = 1 ).
  l_container_o4 = l_splitter3->get_container( row = 16 column = 1 ).
  l_container_o5 = l_splitter3->get_container( row = 3 column = 1 ).
  l_container_o6 = l_splitter3->get_container( row = 4 column = 1 ).
  l_container_o7 = l_splitter3->get_container( row = 5 column = 1 ).
  l_container_o8 = l_splitter3->get_container( row = 6 column = 1 ).
  l_container_o9 = l_splitter3->get_container( row = 7 column = 1 ).
  l_container_o10 = l_splitter3->get_container( row = 8 column = 1 ).
  l_container_o11 = l_splitter3->get_container( row = 10 column = 1 ).
  l_container_o12 = l_splitter3->get_container( row = 11 column = 1 ).
  l_container_o13 = l_splitter3->get_container( row = 12 column = 1 ).
  l_container_o14 = l_splitter3->get_container( row = 13 column = 1 ).
  l_container_o15 = l_splitter3->get_container( row = 14 column = 1 ).
  l_container_o16 = l_splitter3->get_container( row = 15 column = 1 ).

  CREATE OBJECT l_alv_r1
    EXPORTING
      i_parent = l_container_r1.

  CREATE OBJECT l_alv_r2
    EXPORTING
      i_parent = l_container_r2.

  CREATE OBJECT l_alv_r3
    EXPORTING
      i_parent = l_container_r3.

  CREATE OBJECT l_alv_r4
    EXPORTING
      i_parent = l_container_r4.

  CREATE OBJECT l_alv_r5
    EXPORTING
      i_parent = l_container_r5.

  CREATE OBJECT l_alv_r6
    EXPORTING
      i_parent = l_container_r6.

  CREATE OBJECT l_alv_r7
    EXPORTING
      i_parent = l_container_r7.

  CREATE OBJECT l_alv_r8
    EXPORTING
      i_parent = l_container_r8.

  CREATE OBJECT l_alv_r9
    EXPORTING
      i_parent = l_container_r9.

  CREATE OBJECT l_alv_r10
    EXPORTING
      i_parent = l_container_r10.

  CREATE OBJECT l_alv_r11
    EXPORTING
      i_parent = l_container_r11.

  CREATE OBJECT l_alv_r12
    EXPORTING
      i_parent = l_container_r12.

  CREATE OBJECT l_alv_r13
    EXPORTING
      i_parent = l_container_r13.

  CREATE OBJECT l_alv_r14
    EXPORTING
      i_parent = l_container_r14.

  CREATE OBJECT l_alv_r15
    EXPORTING
      i_parent = l_container_r15.

  CREATE OBJECT l_alv_r16
    EXPORTING
      i_parent = l_container_r16.

  CREATE OBJECT l_alv_l2
    EXPORTING
      i_parent = l_container_l2.

  CREATE OBJECT o_tool
    EXPORTING
      parent       = l_container_rig1
      display_mode = cl_gui_toolbar=>m_mode_horizontal.

  CREATE OBJECT l_alv_o1
    EXPORTING
      i_parent = l_container_o1.

  CREATE OBJECT l_alv_o2
    EXPORTING
      i_parent = l_container_o2.

  CREATE OBJECT l_alv_o3
    EXPORTING
      i_parent = l_container_o3.

  CREATE OBJECT l_alv_o4
    EXPORTING
      i_parent = l_container_o4.

  CREATE OBJECT l_alv_o5
    EXPORTING
      i_parent = l_container_o5.

  CREATE OBJECT l_alv_o6
    EXPORTING
      i_parent = l_container_o6.

  CREATE OBJECT l_alv_o7
    EXPORTING
      i_parent = l_container_o7.

  CREATE OBJECT l_alv_o8
    EXPORTING
      i_parent = l_container_o8.

  CREATE OBJECT l_alv_o9
    EXPORTING
      i_parent = l_container_o9.

  CREATE OBJECT l_alv_o10
    EXPORTING
      i_parent = l_container_o10.

  CREATE OBJECT l_alv_o11
    EXPORTING
      i_parent = l_container_o11.

  CREATE OBJECT l_alv_o12
    EXPORTING
      i_parent = l_container_o12.

  CREATE OBJECT l_alv_o13
    EXPORTING
      i_parent = l_container_o13.

  CREATE OBJECT l_alv_o14
    EXPORTING
      i_parent = l_container_o14.

  CREATE OBJECT l_alv_o15
    EXPORTING
      i_parent = l_container_o15.

  CREATE OBJECT l_alv_o16
    EXPORTING
      i_parent = l_container_o16.

  CREATE OBJECT l_alv_o17
    EXPORTING
      i_parent = l_container_out1.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  check_databases
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_databases_join.

  DATA: lt_t001          TYPE TABLE OF t001,
        lt_t881          TYPE TABLE OF t881,
        ls_t881          TYPE t881,
        lt_t800a         TYPE TABLE OF t800a-ntable,
        ls_t800a         TYPE t800a-ntable,
        bkpf_count       TYPE i,
        it_ledgers       TYPE fagl_rldnr_tab,
        ld_ledger        TYPE rldnr,
        select_extension TYPE c LENGTH 200.

  IF p_ionly IS INITIAL.
    SELECT * FROM t001
      INTO TABLE lt_t001
      WHERE bukrs IN p_bukrs.
    LOOP AT lt_t001 INTO ls_t001.
      CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
        EXPORTING
          i_bukrs    = ls_t001-bukrs
        IMPORTING
          et_ledgers = it_ledgers.
      LOOP AT it_ledgers INTO ld_ledger.
        SELECT * FROM t881
                  APPENDING TABLE lt_t881
          WHERE rldnr = ld_ledger.
      ENDLOOP.
    ENDLOOP.
    LOOP AT lt_t881 INTO ls_t881.
      SELECT SINGLE ntable
              INTO ls_t800a
             FROM t800a
        WHERE tab = ls_t881-tab.
      APPEND ls_t800a TO lt_t800a.
    ENDLOOP.
    SORT lt_t800a ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_t800a.
    IF gd_extra IS INITIAL.
      gt_db_bkpf = gt_massdata[].
    ELSE.
      SELECT * FROM bkpf
        INTO TABLE gt_db_bkpf
FOR ALL ENTRIES IN gt_massdata
WHERE bukrs = gt_massdata-bukrs
AND belnr = gt_massdata-belnr
AND gjahr = gt_massdata-gjahr
.
    ENDIF.
  ELSE.
    SELECT * FROM bkpf
      INTO TABLE gt_db_bkpf
  FOR ALL ENTRIES IN gt_massdata
WHERE bukrs = gt_massdata-bukrs
AND belnr = gt_massdata-belnr
AND gjahr = gt_massdata-gjahr
  .
  ENDIF.
  SELECT * FROM bseg
    INTO TABLE gt_db_bseg
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.

  SELECT * FROM bsec
      INTO TABLE gt_db_bsec
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.

  SELECT * FROM bse_clr
    INTO TABLE gt_db_bse_clr
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.

  SELECT * FROM bsed
    INTO TABLE gt_db_bsed
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.


  SELECT * FROM bset
    INTO TABLE gt_db_bset
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.

  IF acdoca_active = 0.
    SELECT * FROM bsis
  INTO TABLE gt_db_bsis
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.

    SELECT * FROM bsas
  INTO TABLE gt_db_bsas
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.

    SELECT * FROM bsid
  INTO TABLE gt_db_bsid
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.

    SELECT * FROM bsad
      INTO TABLE gt_db_bsad
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
  .

    SELECT * FROM bsik
      INTO TABLE gt_db_bsik
     FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr.

    SELECT * FROM bsak
      INTO TABLE gt_db_bsak
     FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.
  ENDIF.

  SELECT * FROM bseg_add
    INTO TABLE gt_db_bseg_add
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.

  SELECT * FROM fagl_splinfo
    INTO TABLE gt_db_splinfo
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.

  SELECT * FROM fagl_splinfo_val
    INTO TABLE gt_db_splinfo_val
    FOR ALL ENTRIES IN gt_massdata
  WHERE bukrs = gt_massdata-bukrs
  AND belnr = gt_massdata-belnr
  AND gjahr = gt_massdata-gjahr
.
  CLEAR gt_glu1.REFRESH gt_glu1.
  CLEAR gt_db_glu1mod. REFRESH gt_db_glu1mod.

  IF p_ionly IS NOT INITIAL.
    IF acdoca_active = 1.
      ls_t800a = 'ACDOCA'.
      SELECT * FROM (ls_t800a)
        INTO CORRESPONDING FIELDS OF TABLE gt_glu1
      FOR ALL ENTRIES IN gt_massdata
    WHERE rbukrs = gt_massdata-bukrs
    AND belnr = gt_massdata-belnr
    AND gjahr = gt_massdata-gjahr
        AND ( bstat = 'L' OR bstat = ' ' )
  .

      LOOP AT gt_glu1 INTO gs_glu1.
        MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
        gs_glu1mod-zzz_tabname = 'ACDOCA'.
        APPEND gs_glu1mod TO gt_db_glu1mod.
      ENDLOOP.
      CLEAR gt_glu1.
    ELSE.
      LOOP AT gt_massdata INTO ls_massdata.
        SELECT SINGLE * FROM t001
          INTO ls_t001
          WHERE bukrs = ls_massdata-bukrs.
        CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
          EXPORTING
            i_bukrs    = ls_t001-bukrs
          IMPORTING
            et_ledgers = it_ledgers.
        LOOP AT it_ledgers INTO ld_ledger.
          SELECT * FROM t881
                    APPENDING TABLE lt_t881
            WHERE rldnr = ld_ledger.
        ENDLOOP.
        LOOP AT lt_t881 INTO ls_t881.
          SELECT SINGLE ntable
                  INTO ls_t800a
                 FROM t800a
            WHERE tab = ls_t881-tab.
          APPEND ls_t800a TO lt_t800a.
        ENDLOOP.
        SORT lt_t800a ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_t800a.
        LOOP AT lt_t800a INTO ls_t800a.
          IF ls_t800a IS NOT INITIAL.
            TRY.
                SELECT * FROM (ls_t800a)
                  INTO CORRESPONDING FIELDS OF TABLE gt_glu1
                      FOR ALL ENTRIES IN gt_massdata
      WHERE rbukrs = gt_massdata-bukrs
      AND belnr = gt_massdata-belnr
      AND gjahr = gt_massdata-gjahr
                  AND ( bstat = ' ' OR bstat = 'L' )
      .
              CATCH cx_sy_dynamic_osql_semantics.
            ENDTRY.
          ENDIF.

          LOOP AT gt_glu1 INTO gs_glu1.
            MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
            gs_glu1mod-zzz_tabname = ls_t800a.
            APPEND gs_glu1mod TO gt_db_glu1mod.
          ENDLOOP.
          CLEAR gt_glu1.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
  ELSE.
    IF acdoca_active = 1.
      ls_t800a = 'ACDOCA'.
      SELECT * FROM (ls_t800a)
        INTO CORRESPONDING FIELDS OF TABLE gt_glu1
      FOR ALL ENTRIES IN gt_massdata
    WHERE rbukrs = gt_massdata-bukrs
    AND belnr = gt_massdata-belnr
    AND gjahr = gt_massdata-gjahr
        AND ( bstat = 'L' OR bstat = ' ' ).

      LOOP AT gt_glu1 INTO gs_glu1.
        MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
        gs_glu1mod-zzz_tabname = 'ACDOCA'.
        APPEND gs_glu1mod TO gt_db_glu1mod.
      ENDLOOP.
      CLEAR gt_glu1.
    ELSE.

      LOOP AT lt_t800a INTO ls_t800a.
        IF ls_t800a IS NOT INITIAL.
          TRY.
              SELECT * FROM (ls_t800a)
                INTO CORRESPONDING FIELDS OF TABLE gt_glu1
                    FOR ALL ENTRIES IN gt_massdata
    WHERE rbukrs = gt_massdata-bukrs
    AND belnr = gt_massdata-belnr
    AND gjahr = gt_massdata-gjahr
                AND ( bstat = ' ' OR bstat = 'L' )
    .
            CATCH cx_sy_dynamic_osql_semantics.
          ENDTRY.
        ENDIF.

        LOOP AT gt_glu1 INTO gs_glu1.
          MOVE-CORRESPONDING gs_glu1 TO gs_glu1mod.
          gs_glu1mod-zzz_tabname = ls_t800a.
          APPEND gs_glu1mod TO gt_db_glu1mod.
        ENDLOOP.
        CLEAR gt_glu1.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    "check_databases

FORM batch.
  PERFORM acquire_scenario.

  PERFORM choose_scenario.

  PERFORM build_scenario.

  PERFORM check_scenario.

  PERFORM update_flags.

  IF lines( gt_doclist ) > p_docmax OR lines( gt_doclist ) = 0.
    PERFORM table_cleanup.
  ELSE.
    IF p_showok IS INITIAL.
      PERFORM table_cleanup.
    ENDIF.
  ENDIF.

  PERFORM store_tables.
ENDFORM.

FORM fagl_subseq_posting
  USING     it_compcode_range TYPE fagl_range_t_bukrs
      it_fiscyear_range TYPE fagl_range_t_ryear
      it_docnr_range     TYPE fagl_range_t_belnr
      it_target_ledger  TYPE fagl_rldnr_tab
      ib_process_splitter TYPE boole_d
      ib_check_records   TYPE boole_d
      ib_test TYPE boole_d.

  DATA iv_blart TYPE bkpf-blart.
  DATA it_awsys_range TYPE fagl_range_t_awsys.
  DATA it_cpudt_range TYPE  fagl_range_t_cpudt.
  DATA it_awtyp_range TYPE  fagl_range_t_awtyp.
  DATA it_glvor_range TYPE  fagl_range_t_glvor.
  DATA ib_new_belnr TYPE  abap_bool.
  DATA it_blart_range TYPE  fagl_range_t_blart.
  DATA it_budat_range TYPE  fagl_range_t_budat.
  DATA it_period_range TYPE  fagl_range_t_monat.
  DATA ls_flag LIKE LINE OF gt_flag.
  DATA is_compcode LIKE LINE OF it_compcode_range.
  DATA is_fiscyear LIKE LINE OF it_fiscyear_range.
  DATA is_docnr LIKE LINE OF it_docnr_range.

  DATA: lt_documents         TYPE fagl_t_mig_rpitems,
        lt_documents_package LIKE lt_documents,
        ls_document          LIKE LINE OF lt_documents.
  CONSTANTS: lc_package_size TYPE i VALUE 100.

  CALL FUNCTION 'FAGL_SUBSEQ_POSTING_SELECT'
    EXPORTING
      it_compcode_range = it_compcode_range
      it_fiscyear_range = it_fiscyear_range
      it_period_range   = it_period_range
      it_docnr_range    = it_docnr_range
      it_budat_range    = it_budat_range
      it_blart_range    = it_blart_range "Note 2175091
      it_cpudt_range    = it_cpudt_range "Note 2175091
      it_awtyp_range    = it_awtyp_range "Note 2175091
      it_glvor_range    = it_glvor_range "Note 2175091
      it_awsys_range    = it_awsys_range "Note 2175091
    IMPORTING
      et_documents      = lt_documents
    EXCEPTIONS
      error_message     = 1
      assertion_failed  = 2.

*  IF sy-subrc NE 0.
*    READ TABLE it_compcode_range[] INDEX 1 into is_compcode.
*    ls_flag-bukrs = is_compcode-low.
*    READ TABLE it_fiscyear_range[] INDEX 1 into is_fiscyear.
*    ls_flag-gjahr = is_fiscyear-low.
*    READ TABLE it_docnr_range[] INDEX 1 into is_docnr.
*    ls_flag-belnr = is_docnr-low.
*    ls_flag-control = '@5C@'.
*    ls_flag-error = 'TRACEGL ERROR'.
*    APPEND ls_flag TO gt_flag.
*    EXIT.
*  ENDIF.

  SORT lt_documents BY cpudt cputm.

  IF ib_process_splitter = abap_true.
    CALL METHOD cl_fagl_oi_read=>set_upd_max_cnt
      EXPORTING
        id_max_cnt = lc_package_size.
  ENDIF.

  WHILE NOT lt_documents IS INITIAL.

*Set update task local for each package
*because of dependencies
*Must be set here because it is reset after each COMMIT WORK!
    SET UPDATE TASK LOCAL.
    IF sy-subrc NE 0.
      MESSAGE x764(ga).
    ENDIF.

    REFRESH lt_documents_package.
    APPEND LINES OF lt_documents FROM 1 TO lc_package_size
      TO lt_documents_package.
    DELETE lt_documents FROM 1 TO lc_package_size.

    LOOP AT lt_documents_package INTO ls_document.
      IF ls_document-rldnr IS NOT INITIAL
        AND ls_document-ldgrp IS NOT INITIAL.
        CLEAR ls_document-ldgrp.
      ENDIF.
      MODIFY lt_documents_package FROM ls_document INDEX sy-tabix.
    ENDLOOP.

    CALL FUNCTION 'FAGL_SUBSEQ_POSTING_PROCESS'
      EXPORTING
        it_documents        = lt_documents_package
        it_target_ledger    = it_target_ledger
        ib_process_splitter = ib_process_splitter
        ib_check_records    = ib_check_records
        ib_test             = ib_test
      EXCEPTIONS
        error_message       = 1
        assertion_failed    = 2.

*  IF sy-subrc NE 0.
*    READ TABLE it_compcode_range[] INDEX 1 into is_compcode.
*    ls_flag-bukrs = is_compcode-low.
*    READ TABLE it_fiscyear_range[] INDEX 1 into is_fiscyear.
*    ls_flag-gjahr = is_fiscyear-low.
*    READ TABLE it_docnr_range[] INDEX 1 into is_docnr.
*    ls_flag-belnr = is_docnr-low.
*    ls_flag-control = '@5C@'.
*    ls_flag-error = 'TRACEGL ERROR'.
*    APPEND ls_flag TO gt_flag.
*    EXIT.
*  ENDIF.
*    COMMIT WORK.

  ENDWHILE.

ENDFORM.

FORM check_keep.
  DATA ls_bkpf_store LIKE LINE OF gt_bkpf_store.
  DATA ls_bkpf_check LIKE LINE OF gt_bkpf_store.
  DATA ls_bkpfmod LIKE LINE OF gt_doclist_store.
  SORT gt_bkpf_store BY pairing DESCENDING.
  LOOP AT gt_bkpf_store INTO ls_bkpf_store WHERE pairing IS NOT INITIAL.
    IF sy-tabix MOD 2 = 1.
      READ TABLE gt_bkpf_store INTO ls_bkpf_check INDEX sy-tabix + 1.
      IF ls_bkpf_store-check = 'X' AND ls_bkpf_check-check = 'X'.
        gd_keep = 'X'.
        MESSAGE 'Keeping Duplicate Key in BKPF' TYPE 'I'.
        READ TABLE gt_doclist_store INTO ls_bkpfmod
        WITH KEY bukrs = ls_bkpf_store-bukrs
                 belnr = ls_bkpf_store-belnr
                 gjahr = ls_bkpf_store-gjahr.
        PERFORM select_belnr USING ls_bkpfmod.
        PERFORM display_data.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT gt_bkpf_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING.

  IF gd_keep IS INITIAL.
    DATA ls_bseg_store LIKE LINE OF gt_bseg_store.
    DATA ls_bseg_check LIKE LINE OF gt_bseg_store.
    SORT gt_bseg_store BY pairing DESCENDING.
    LOOP AT gt_bseg_store INTO ls_bseg_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bseg_store INTO ls_bseg_check INDEX sy-tabix + 1.
        IF ls_bseg_store-check = 'X' AND ls_bseg_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSEG' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bseg_store-bukrs
                   belnr = ls_bseg_store-belnr
                   gjahr = ls_bseg_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bseg_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsis_store LIKE LINE OF gt_bsis_store.
    DATA ls_bsis_check LIKE LINE OF gt_bsis_store.
    SORT gt_bsis_store BY pairing DESCENDING.
    LOOP AT gt_bsis_store INTO ls_bsis_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsis_store INTO ls_bsis_check INDEX sy-tabix + 1.
        IF ls_bsis_store-check = 'X' AND ls_bsis_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSIS' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsis_store-bukrs
                   belnr = ls_bsis_store-belnr
                   gjahr = ls_bsis_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsis_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsas_store LIKE LINE OF gt_bsas_store.
    DATA ls_bsas_check LIKE LINE OF gt_bsas_store.
    SORT gt_bsas_store BY pairing DESCENDING.
    LOOP AT gt_bsas_store INTO ls_bsas_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsas_store INTO ls_bsas_check INDEX sy-tabix + 1.
        IF ls_bsas_store-check = 'X' AND ls_bsas_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSAS' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsas_store-bukrs
                   belnr = ls_bsas_store-belnr
                   gjahr = ls_bsas_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsas_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsik_store LIKE LINE OF gt_bsik_store.
    DATA ls_bsik_check LIKE LINE OF gt_bsik_store.
    SORT gt_bsik_store BY pairing DESCENDING.
    LOOP AT gt_bsik_store INTO ls_bsik_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsik_store INTO ls_bsik_check INDEX sy-tabix + 1.
        IF ls_bsik_store-check = 'X' AND ls_bsik_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSIK' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsik_store-bukrs
                   belnr = ls_bsik_store-belnr
                   gjahr = ls_bsik_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsik_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsak_store LIKE LINE OF gt_bsak_store.
    DATA ls_bsak_check LIKE LINE OF gt_bsak_store.
    SORT gt_bsak_store BY pairing DESCENDING.
    LOOP AT gt_bsak_store INTO ls_bsak_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsak_store INTO ls_bsak_check INDEX sy-tabix + 1.
        IF ls_bsak_store-check = 'X' AND ls_bsak_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSAK' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsak_store-bukrs
                   belnr = ls_bsak_store-belnr
                   gjahr = ls_bsak_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsak_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsid_store LIKE LINE OF gt_bsid_store.
    DATA ls_bsid_check LIKE LINE OF gt_bsid_store.
    SORT gt_bsid_store BY pairing DESCENDING.
    LOOP AT gt_bsid_store INTO ls_bsid_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsid_store INTO ls_bsid_check INDEX sy-tabix + 1.
        IF ls_bsid_store-check = 'X' AND ls_bsid_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSID' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsid_store-bukrs
                   belnr = ls_bsid_store-belnr
                   gjahr = ls_bsid_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsid_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsad_store LIKE LINE OF gt_bsad_store.
    DATA ls_bsad_check LIKE LINE OF gt_bsad_store.
    SORT gt_bsad_store BY pairing DESCENDING.
    LOOP AT gt_bsad_store INTO ls_bsad_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsad_store INTO ls_bsad_check INDEX sy-tabix + 1.
        IF ls_bsad_store-check = 'X' AND ls_bsad_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSAD' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsad_store-bukrs
                   belnr = ls_bsad_store-belnr
                   gjahr = ls_bsad_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsad_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bseg_add_store LIKE LINE OF gt_bseg_add_store.
    DATA ls_bseg_add_check LIKE LINE OF gt_bseg_add_store.
    SORT gt_bseg_add_store BY pairing DESCENDING.
    LOOP AT gt_bseg_add_store INTO ls_bseg_add_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bseg_add_store INTO ls_bseg_add_check INDEX sy-tabix + 1.
        IF ls_bseg_add_store-check = 'X' AND ls_bseg_add_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSEG_ADD' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bseg_add_store-bukrs
                   belnr = ls_bseg_add_store-belnr
                   gjahr = ls_bseg_add_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bseg_add_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bse_clr_store LIKE LINE OF gt_bse_clr_store.
    DATA ls_bse_clr_check LIKE LINE OF gt_bse_clr_store.
    SORT gt_bse_clr_store BY pairing DESCENDING.
    LOOP AT gt_bse_clr_store INTO ls_bse_clr_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bse_clr_store INTO ls_bse_clr_check INDEX sy-tabix + 1.
        IF ls_bse_clr_store-check = 'X' AND ls_bse_clr_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSE_CLR' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bse_clr_store-bukrs
                   belnr = ls_bse_clr_store-belnr
                   gjahr = ls_bse_clr_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bse_clr_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsec_store LIKE LINE OF gt_bsec_store.
    DATA ls_bsec_check LIKE LINE OF gt_bsec_store.
    SORT gt_bsec_store BY pairing DESCENDING.
    LOOP AT gt_bsec_store INTO ls_bsec_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsec_store INTO ls_bsec_check INDEX sy-tabix + 1.
        IF ls_bsec_store-check = 'X' AND ls_bsec_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSEC' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsec_store-bukrs
                   belnr = ls_bsec_store-belnr
                   gjahr = ls_bsec_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsec_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bsed_store LIKE LINE OF gt_bsed_store.
    DATA ls_bsed_check LIKE LINE OF gt_bsed_store.
    SORT gt_bsed_store BY pairing DESCENDING.
    LOOP AT gt_bsed_store INTO ls_bsed_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bsed_store INTO ls_bsed_check INDEX sy-tabix + 1.
        IF ls_bsed_store-check = 'X' AND ls_bsed_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSED' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bsed_store-bukrs
                   belnr = ls_bsed_store-belnr
                   gjahr = ls_bsed_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bsed_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_bset_store LIKE LINE OF gt_bset_store.
    DATA ls_bset_check LIKE LINE OF gt_bset_store.
    SORT gt_bset_store BY pairing DESCENDING.
    LOOP AT gt_bset_store INTO ls_bset_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_bset_store INTO ls_bset_check INDEX sy-tabix + 1.
        IF ls_bset_store-check = 'X' AND ls_bset_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in BSET' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_bset_store-bukrs
                   belnr = ls_bset_store-belnr
                   gjahr = ls_bset_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_bset_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_splinfo_store LIKE LINE OF gt_splinfo_store.
    DATA ls_splinfo_check LIKE LINE OF gt_splinfo_store.
    SORT gt_splinfo_store BY pairing DESCENDING.
    LOOP AT gt_splinfo_store INTO ls_splinfo_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_splinfo_store INTO ls_splinfo_check INDEX sy-tabix + 1.
        IF ls_splinfo_store-check = 'X' AND ls_splinfo_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in SPLINFO' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_splinfo_store-bukrs
                   belnr = ls_splinfo_store-belnr
                   gjahr = ls_splinfo_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_splinfo_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING spl_no ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_splinfo_val_store LIKE LINE OF gt_splinfo_val_store.
    DATA ls_splinfo_val_check LIKE LINE OF gt_splinfo_val_store.
    SORT gt_splinfo_val_store BY pairing DESCENDING.
    LOOP AT gt_splinfo_val_store INTO ls_splinfo_val_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_splinfo_val_store INTO ls_splinfo_val_check INDEX sy-tabix + 1.
        IF ls_splinfo_val_store-check = 'X' AND ls_splinfo_val_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in SPLINFO_VAL' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_splinfo_val_store-bukrs
                   belnr = ls_splinfo_val_store-belnr
                   gjahr = ls_splinfo_val_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_splinfo_val_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING spl_no ASCENDING curtp ASCENDING.
  ENDIF.

  IF gd_keep IS INITIAL.
    DATA ls_glu1mod_store LIKE LINE OF gt_glu1_store.
    DATA ls_glu1mod_check LIKE LINE OF gt_glu1_store.
    SORT gt_glu1_store BY pairing DESCENDING.
    LOOP AT gt_glu1_store INTO ls_glu1mod_store WHERE pairing IS NOT INITIAL.
      IF sy-tabix MOD 2 = 1.
        READ TABLE gt_glu1_store INTO ls_glu1mod_check INDEX sy-tabix + 1.
        IF ls_glu1mod_store-check = 'X' AND ls_glu1mod_check-check = 'X'.
          gd_keep = 'X'.
          MESSAGE 'Keeping Duplicate Key in GL' TYPE 'I'.
          READ TABLE gt_doclist_store INTO ls_bkpfmod
          WITH KEY bukrs = ls_glu1mod_store-bukrs
                   belnr = ls_glu1mod_store-belnr
                   gjahr = ls_glu1mod_store-gjahr.
          PERFORM select_belnr USING ls_bkpfmod.
          PERFORM display_data.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT gt_glu1_store BY bukrs ASCENDING belnr ASCENDING gjahr ASCENDING buzei ASCENDING rldnr ASCENDING.
  ENDIF.


ENDFORM.

FORM check_authority USING id_check_value TYPE xstring.
  "Taken from https://stackoverflow.com/questions/49981557/how-to-use-encryption-in-sap
  DATA ld_key       TYPE string.
  DATA ld_xstring   TYPE xstring.
  DATA ld_decrypted TYPE string.
  ld_key = a_field-value.

  "Convert Key to hexadecimal values only
  CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
    EXPORTING
      text   = ld_key
    IMPORTING
      buffer = ld_xstring.
  ld_key = ld_xstring.

  "AES256 requires a key with length 256 bit --> 32 byte, in ABAP 64
  IF strlen( ld_key ) < 64. "Required AES256
    DO 64 - strlen( ld_key ) TIMES.
      CONCATENATE ld_key 'A' INTO ld_key.
    ENDDO.
  ENDIF.

  " Load Key into buffer
  DATA lr_conv_key TYPE REF TO cl_abap_conv_out_ce.
  lr_conv_key = cl_abap_conv_out_ce=>create( ).
  lr_conv_key->write( data = ld_key ).

  TRY.
      "Attempt decryption using provided key
      cl_sec_sxml_writer=>decrypt(
        EXPORTING
          ciphertext  = id_check_value
          key         = lr_conv_key->get_buffer( )
          algorithm   = cl_sec_sxml_writer=>co_aes256_algorithm
        IMPORTING
          plaintext =  ld_xstring ).
    CATCH cx_sec_sxml_encrypt_error.
      "Error during execution --> definitely something wrong with the key
      MESSAGE i016(gu) WITH 'Not authorized' DISPLAY LIKE 'W'.
      EXIT.
  ENDTRY.

  cl_abap_conv_in_ce=>create( input = ld_xstring )->read( IMPORTING data = ld_decrypted ).
  IF ld_decrypted =  gc_expected_cleartext.
    "If it got to here then the key was correct
    MESSAGE i016(gu) WITH 'Success!' DISPLAY LIKE 'S'.
  ELSE.
    "Decrypted message does not match
    MESSAGE i016(gu) WITH 'Not authorized' DISPLAY LIKE 'W'.
  ENDIF.
ENDFORM.

FORM check_bsis USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsis LIKE LINE OF gt_bsis
  ld_index_bsis TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsis_store LIKE LINE OF gt_bsis.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsis_store = ls_bsis.

  IF ls_bkpf-bstat NE ls_bsis-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-bstat = ls_bkpf-bstat.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsis-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsis-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-budat = ls_bkpf-budat.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsis-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsis-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-bldat = ls_bkpf-bldat.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsis-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsis-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-blart = ls_bkpf-blart.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BLART MISSING'.
    ELSE.
      ls_bsis-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsis-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-monat = ls_bkpf-monat.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'MONAT MISSING'.
    ELSE.
      ls_bsis-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsis-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-dmbtr = ls_bseg-dmbtr.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsis-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsis-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-dmbe2 = ls_bseg-dmbe2.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsis-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsis-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-dmbe3 = ls_bseg-dmbe3.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsis-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsis-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-pswsl = ls_bseg-pswsl.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsis-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsis-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-pswbt = ls_bseg-pswbt.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsis-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsis-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ld_key = 'X'.
    ls_bsis-hkont = ls_bseg-hkont.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'HKONT MISSING'.
    ELSE.
      ls_bsis-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-xopvw NE ls_bsis-xopvw AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-xopvw = ls_bseg-xopvw.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'XOPVW MISSING'.
    ELSE.
      ls_bsis-error = 'XOPVW MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsis-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ld_key = 'X'.
    ls_bsis-augbl = ls_bseg-augbl.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsis-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsis-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ld_key = 'X'.
    ls_bsis-augdt = ls_bseg-augdt.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsis-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsis-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-auggj = ls_bseg-auggj.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsis-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bewar NE ls_bsis-bewar AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-bewar = ls_bseg-bewar.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BEWAR MISSING'.
    ELSE.
      ls_bsis-error = 'BEWAR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-xhres = ' '.
    IF ls_bseg-zuonr NE ls_bsis-zuonr AND ls_bseg-control NE '@5C@'.
      ld_error = 'X'.
      ld_key = 'X'.
      ls_bsis-zuonr = ls_bseg-zuonr.
      ls_bsis-control = '@5D@'.
      IF ls_bsis IS INITIAL.
        ls_bsis-error = 'ZUONR MISSING'.
      ELSE.
        ls_bsis-error = 'ZUONR MISMATCH'.
      ENDIF.
      MOVE-CORRESPONDING ls_bsis TO ls_flag.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ELSE.
    IF ls_bseg-hzuon NE ls_bsis-zuonr AND ls_bseg-control NE '@5C@'.
      ld_error = 'X'.
      ld_key = 'X'.
      ls_bsis-zuonr = ls_bseg-hzuon.
      ls_bsis-control = '@5D@'.
      IF ls_bsis IS INITIAL.
        ls_bsis-error = 'ZUONR MISSING'.
      ELSE.
        ls_bsis-error = 'ZUONR MISMATCH'.
      ENDIF.
      MOVE-CORRESPONDING ls_bsis TO ls_flag.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDIF.

  IF ls_bseg-shkzg NE ls_bsis-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-shkzg = ls_bseg-shkzg.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsis-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsis-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsis-bschl = ls_bseg-bschl.
    ls_bsis-control = '@5D@'.
    IF ls_bsis IS INITIAL.
      ls_bsis-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsis-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsis TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsis-control = '@5D@' AND ls_bsis-orig NE 'BUIL'.
    IF ld_key = 'X'.
      ls_bsis-error = 'KEY'.
    ENDIF.
    ls_bsis-orig = 'CORR'.
    IF ls_bsis-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsis-pairing = pairing_counter.
      MODIFY gt_bsis FROM ls_bsis INDEX ld_index_bsis.
      ls_bsis_store-error = ls_bsis-error.
      ls_bsis_store-control = ls_bsis-control.
      ls_bsis_store-pairing = pairing_counter.
      ls_bsis_store-check = 'O'.
      APPEND ls_bsis_store TO gt_bsis.
    ENDIF.
  ELSEIF ls_bsis-control = '@5D'.
    MODIFY gt_bsis FROM ls_bsis INDEX ld_index_bsis.
  ENDIF.
ENDFORM.

FORM check_bsas USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsas LIKE LINE OF gt_bsas
  ld_index_bsas TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsas_store LIKE LINE OF gt_bsas.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsas_store = ls_bsas.

  IF ls_bkpf-bstat NE ls_bsas-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-bstat = ls_bkpf-bstat.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsas-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsas-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-budat = ls_bkpf-budat.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsas-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsas-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-bldat = ls_bkpf-bldat.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsas-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsas-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-blart = ls_bkpf-blart.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BLART MISSING'.
    ELSE.
      ls_bsas-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsas-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-monat = ls_bkpf-monat.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'MONAT MISSING'.
    ELSE.
      ls_bsas-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsas-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-dmbtr = ls_bseg-dmbtr.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsas-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsas-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-dmbe2 = ls_bseg-dmbe2.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsas-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsas-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-dmbe3 = ls_bseg-dmbe3.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsas-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsas-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-pswsl = ls_bseg-pswsl.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsas-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsas-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-pswbt = ls_bseg-pswbt.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsas-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsas-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsas-hkont = ls_bseg-hkont.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'HKONT MISSING'.
    ELSE.
      ls_bsas-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-xopvw NE ls_bsas-xopvw AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-xopvw = ls_bseg-xopvw.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'XOPVW MISSING'.
    ELSE.
      ls_bsas-error = 'XOPVW MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsas-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsas-augbl = ls_bseg-augbl.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsas-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsas-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsas-augdt = ls_bseg-augdt.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsas-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsas-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-auggj = ls_bseg-auggj.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsas-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bewar NE ls_bsas-bewar AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-bewar = ls_bseg-bewar.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BEWAR MISSING'.
    ELSE.
      ls_bsas-error = 'BEWAR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-xhres = ' '.
    IF ls_bseg-zuonr NE ls_bsas-zuonr AND ls_bseg-control NE '@5C@'.
      ld_error = 'X'.
      ld_key = 'X'.
      ls_bsas-zuonr = ls_bseg-zuonr.
      ls_bsas-control = '@5D@'.
      IF ls_bsas IS INITIAL.
        ls_bsas-error = 'ZUONR MISSING'.
      ELSE.
        ls_bsas-error = 'ZUONR MISMATCH'.
      ENDIF.
      MOVE-CORRESPONDING ls_bsas TO ls_flag.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ELSE.
    IF ls_bseg-hzuon NE ls_bsas-zuonr AND ls_bseg-control NE '@5C@'.
      ld_error = 'X'.
      ld_key = 'X'.
      ls_bsas-zuonr = ls_bseg-hzuon.
      ls_bsas-control = '@5D@'.
      IF ls_bsas IS INITIAL.
        ls_bsas-error = 'ZUONR MISSING'.
      ELSE.
        ls_bsas-error = 'ZUONR MISMATCH'.
      ENDIF.
      MOVE-CORRESPONDING ls_bsas TO ls_flag.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDIF.

  IF ls_bseg-shkzg NE ls_bsas-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-shkzg = ls_bseg-shkzg.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsas-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsas-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsas-bschl = ls_bseg-bschl.
    ls_bsas-control = '@5D@'.
    IF ls_bsas IS INITIAL.
      ls_bsas-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsas-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsas TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsas-control = '@5D@' AND ls_bsas-orig NE 'BUIL'.
    ls_bsas-orig = 'CORR'.
    IF ld_key = 'X'.
      ls_bsas-error = 'KEY'.
    ENDIF.
    IF ls_bsas-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsas-pairing = pairing_counter.
      MODIFY gt_bsas FROM ls_bsas INDEX ld_index_bsas.
      ls_bsas_store-error = ls_bsas-error.
      ls_bsas_store-control = ls_bsas-control.
      ls_bsas_store-pairing = pairing_counter.
      ls_bsas_store-check = 'O'.
      APPEND ls_bsas_store TO gt_bsas.
    ENDIF.
  ELSEIF ls_bsas-control = '@5D'.
    MODIFY gt_bsas FROM ls_bsas INDEX ld_index_bsas.
  ENDIF.
ENDFORM.

FORM check_bsid USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsid LIKE LINE OF gt_bsid
  ld_index_bsid TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsid_store LIKE LINE OF gt_bsid.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsid_store = ls_bsid.

  IF ls_bkpf-bstat NE ls_bsid-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-bstat = ls_bkpf-bstat.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsid-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsid-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-budat = ls_bkpf-budat.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsid-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsid-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-bldat = ls_bkpf-bldat.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsid-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsid-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-blart = ls_bkpf-blart.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'BLART MISSING'.
    ELSE.
      ls_bsid-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsid-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-monat = ls_bkpf-monat.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'MONAT MISSING'.
    ELSE.
      ls_bsid-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsid-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-dmbtr = ls_bseg-dmbtr.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsid-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsid-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-dmbe2 = ls_bseg-dmbe2.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsid-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsid-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-dmbe3 = ls_bseg-dmbe3.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsid-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsid-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-pswsl = ls_bseg-pswsl.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsid-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsid-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-pswbt = ls_bseg-pswbt.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsid-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsid-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsid-hkont = ls_bseg-hkont.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'HKONT MISSING'.
    ELSE.
      ls_bsid-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-kunnr NE ls_bsid-kunnr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsid-kunnr = ls_bseg-kunnr.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'KUNNR MISSING'.
    ELSE.
      ls_bsid-error = 'KUNNR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsid-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsid-augbl = ls_bseg-augbl.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsid-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsid-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsid-augdt = ls_bseg-augdt.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsid-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsid-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-auggj = ls_bseg-auggj.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsid-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-zuonr NE ls_bsid-zuonr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsid-zuonr = ls_bseg-zuonr.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'ZUONR MISSING'.
    ELSE.
      ls_bsid-error = 'ZUONR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-shkzg NE ls_bsid-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-shkzg = ls_bseg-shkzg.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsid-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsid-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsid-bschl = ls_bseg-bschl.
    ls_bsid-control = '@5D@'.
    IF ls_bsid IS INITIAL.
      ls_bsid-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsid-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsid TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsid-control = '@5D@' AND ls_bsid-orig NE 'BUIL'.
    ls_bsid-orig = 'CORR'.
    IF ld_key = 'X'.
      ls_bsid-error = 'KEY'.
    ENDIF.
    IF ls_bsid-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsid-pairing = pairing_counter.
      MODIFY gt_bsid FROM ls_bsid INDEX ld_index_bsid.
      ls_bsid_store-error = ls_bsid-error.
      ls_bsid_store-control = ls_bsid-control.
      ls_bsid_store-pairing = pairing_counter.
      ls_bsid_store-check = 'O'.
      APPEND ls_bsid_store TO gt_bsid.
    ENDIF.
  ELSEIF ls_bsid-control = '@5D'.
    MODIFY gt_bsid FROM ls_bsid INDEX ld_index_bsid.
  ENDIF.
ENDFORM.

FORM check_bsad USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsad LIKE LINE OF gt_bsad
  ld_index_bsad TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsad_store LIKE LINE OF gt_bsad.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsad_store = ls_bsad.

  IF ls_bkpf-bstat NE ls_bsad-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-bstat = ls_bkpf-bstat.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsad-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsad-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-budat = ls_bkpf-budat.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsad-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsad-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-bldat = ls_bkpf-bldat.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsad-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsad-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-blart = ls_bkpf-blart.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'BLART MISSING'.
    ELSE.
      ls_bsad-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsad-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-monat = ls_bkpf-monat.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'MONAT MISSING'.
    ELSE.
      ls_bsad-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsad-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-dmbtr = ls_bseg-dmbtr.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsad-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsad-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-dmbe2 = ls_bseg-dmbe2.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsad-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsad-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-dmbe3 = ls_bseg-dmbe3.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsad-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsad-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-pswsl = ls_bseg-pswsl.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsad-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsad-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-pswbt = ls_bseg-pswbt.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsad-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsad-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsad-hkont = ls_bseg-hkont.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'HKONT MISSING'.
    ELSE.
      ls_bsad-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-kunnr NE ls_bsad-kunnr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsad-kunnr = ls_bseg-kunnr.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'KUNNR MISSING'.
    ELSE.
      ls_bsad-error = 'KUNNR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsad-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsad-augbl = ls_bseg-augbl.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsad-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsad-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsad-augdt = ls_bseg-augdt.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsad-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsad-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-auggj = ls_bseg-auggj.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsad-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-zuonr NE ls_bsad-zuonr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsad-zuonr = ls_bseg-zuonr.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'ZUONR MISSING'.
    ELSE.
      ls_bsad-error = 'ZUONR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-shkzg NE ls_bsad-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-shkzg = ls_bseg-shkzg.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsad-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsad-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsad-bschl = ls_bseg-bschl.
    ls_bsad-control = '@5D@'.
    IF ls_bsad IS INITIAL.
      ls_bsad-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsad-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsad TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsad-control = '@5D@' AND ls_bsad-orig NE 'BUIL'.
    ls_bsad-orig = 'CORR'.
    IF ld_key = 'X'.
      ls_bsad-error = 'KEY'.
    ENDIF.
    IF ls_bsad-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsad-pairing = pairing_counter.
      MODIFY gt_bsad FROM ls_bsad INDEX ld_index_bsad.
      ls_bsad_store-error = ls_bsad-error.
      ls_bsad_store-control = ls_bsad-control.
      ls_bsad_store-pairing = pairing_counter.
      ls_bsad_store-check = 'O'.
      APPEND ls_bsad_store TO gt_bsad.
    ENDIF.
  ELSEIF ls_bsad-control = '@5D'.
    MODIFY gt_bsad FROM ls_bsad INDEX ld_index_bsad.
  ENDIF.
ENDFORM.

FORM check_bsik USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsik LIKE LINE OF gt_bsik
  ld_index_bsik TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsik_store LIKE LINE OF gt_bsik.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsik_store = ls_bsik.

  IF ls_bkpf-bstat NE ls_bsik-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-bstat = ls_bkpf-bstat.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsik-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsik-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-budat = ls_bkpf-budat.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsik-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsik-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-bldat = ls_bkpf-bldat.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsik-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsik-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-blart = ls_bkpf-blart.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'BLART MISSING'.
    ELSE.
      ls_bsik-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsik-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-monat = ls_bkpf-monat.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'MONAT MISSING'.
    ELSE.
      ls_bsik-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsik-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-dmbtr = ls_bseg-dmbtr.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsik-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsik-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-dmbe2 = ls_bseg-dmbe2.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsik-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsik-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-dmbe3 = ls_bseg-dmbe3.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsik-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsik-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-pswsl = ls_bseg-pswsl.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsik-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsik-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-pswbt = ls_bseg-pswbt.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsik-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsik-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsik-hkont = ls_bseg-hkont.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'HKONT MISSING'.
    ELSE.
      ls_bsik-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-lifnr NE ls_bsik-lifnr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsik-lifnr = ls_bseg-lifnr.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'LIFNR MISSING'.
    ELSE.
      ls_bsik-error = 'LIFNR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsik-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsik-augbl = ls_bseg-augbl.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsik-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsik-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsik-augdt = ls_bseg-augdt.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsik-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsik-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-auggj = ls_bseg-auggj.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsik-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-zuonr NE ls_bsik-zuonr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsik-zuonr = ls_bseg-zuonr.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'ZUONR MISSING'.
    ELSE.
      ls_bsik-error = 'ZUONR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-shkzg NE ls_bsik-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-shkzg = ls_bseg-shkzg.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsik-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsik-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsik-bschl = ls_bseg-bschl.
    ls_bsik-control = '@5D@'.
    IF ls_bsik IS INITIAL.
      ls_bsik-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsik-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsik TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsik-control = '@5D@' AND ls_bsik-orig NE 'BUIL'.
    ls_bsik-orig = 'CORR'.
    IF ld_key = 'X'.
      ls_bsik-error = 'KEY'.
    ENDIF.
    IF ls_bsik-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsik-pairing = pairing_counter.
      MODIFY gt_bsik FROM ls_bsik INDEX ld_index_bsik.
      ls_bsik_store-error = ls_bsik-error.
      ls_bsik_store-control = ls_bsik-control.
      ls_bsik_store-pairing = pairing_counter.
      ls_bsik_store-check = 'O'.
      APPEND ls_bsik_store TO gt_bsik.
    ENDIF.
  ELSEIF ls_bsik-control = '@5D'.
    MODIFY gt_bsik FROM ls_bsik INDEX ld_index_bsik.
  ENDIF.
ENDFORM.

FORM check_bsak USING ls_bkpf LIKE LINE OF gt_bkpf
      ls_bseg LIKE LINE OF gt_bseg
      ls_bsak LIKE LINE OF gt_bsak
  ld_index_bsak TYPE sy-tabix.

  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_error TYPE c LENGTH 1.
  DATA ls_bsak_store LIKE LINE OF gt_bsak.
  DATA ld_key TYPE c LENGTH 1.

  ls_bsak_store = ls_bsak.

  IF ls_bkpf-bstat NE ls_bsak-bstat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-bstat = ls_bkpf-bstat.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'BSTAT MISSING'.
    ELSE.
      ls_bsak-error = 'BSTAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-budat NE ls_bsak-budat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-budat = ls_bkpf-budat.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'BUDAT MISSING'.
    ELSE.
      ls_bsak-error = 'BUDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-bldat NE ls_bsak-bldat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-bldat = ls_bkpf-bldat.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'BLDAT MISSING'.
    ELSE.
      ls_bsak-error = 'BLDAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-blart NE ls_bsak-blart AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-blart = ls_bkpf-blart.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'BLART MISSING'.
    ELSE.
      ls_bsak-error = 'BLART MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bkpf-monat NE ls_bsak-monat AND ls_bkpf-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-monat = ls_bkpf-monat.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'MONAT MISSING'.
    ELSE.
      ls_bsak-error = 'MONAT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbtr NE ls_bsak-dmbtr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-dmbtr = ls_bseg-dmbtr.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'DMBTR MISSING'.
    ELSE.
      ls_bsak-error = 'DMBTR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe2 NE ls_bsak-dmbe2 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-dmbe2 = ls_bseg-dmbe2.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'DMBE2 MISSING'.
    ELSE.
      ls_bsak-error = 'DMBE2 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-dmbe3 NE ls_bsak-dmbe3 AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-dmbe3 = ls_bseg-dmbe3.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'DMBE3 MISSING'.
    ELSE.
      ls_bsak-error = 'DMBE3 MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswsl NE ls_bsak-pswsl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-pswsl = ls_bseg-pswsl.
    ls_bsak-control  = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'PSWSL MISSING'.
    ELSE.
      ls_bsak-error = 'PSWSL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-pswbt NE ls_bsak-pswbt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-pswbt = ls_bseg-pswbt.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'PSWBT MISSING'.
    ELSE.
      ls_bsak-error = 'PSWBT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-hkont NE ls_bsak-hkont AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsak-hkont = ls_bseg-hkont.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'HKONT MISSING'.
    ELSE.
      ls_bsak-error = 'HKONT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-lifnr NE ls_bsak-lifnr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsak-lifnr = ls_bseg-lifnr.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'LIFNR MISSING'.
    ELSE.
      ls_bsak-error = 'LIFNR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-augbl NE ls_bsak-augbl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsak-augbl = ls_bseg-augbl.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'AUGBL MISSING'.
    ELSE.
      ls_bsak-error = 'AUGBL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-augdt NE ls_bsak-augdt AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsak-augdt = ls_bseg-augdt.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'AUGDT MISSING'.
    ELSE.
      ls_bsak-error = 'AUGDT MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-auggj NE ls_bsak-auggj AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-auggj = ls_bseg-auggj.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'AUGGJ MISSING'.
    ELSE.
      ls_bsak-error = 'AUGGJ MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-zuonr NE ls_bsak-zuonr AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'. ld_key = 'X'.
    ls_bsak-zuonr = ls_bseg-zuonr.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'ZUONR MISSING'.
    ELSE.
      ls_bsak-error = 'ZUONR MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bseg-shkzg NE ls_bsak-shkzg AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-shkzg = ls_bseg-shkzg.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'SHKZG MISSING'.
    ELSE.
      ls_bsak-error = 'SHKZG MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.

  IF ls_bseg-bschl NE ls_bsak-bschl AND ls_bseg-control NE '@5C@'.
    ld_error = 'X'.
    ls_bsak-bschl = ls_bseg-bschl.
    ls_bsak-control = '@5D@'.
    IF ls_bsak IS INITIAL.
      ls_bsak-error = 'BSCHL MISSING'.
    ELSE.
      ls_bsak-error = 'BSCHL MISMATCH'.
    ENDIF.
    MOVE-CORRESPONDING ls_bsak TO ls_flag.
    APPEND ls_flag TO gt_flag.
  ENDIF.


  IF ls_bsak-control = '@5D@' AND ls_bsak-orig NE 'BUIL'.
    ls_bsak-orig = 'CORR'.
    IF ld_key = 'X'.
      ls_bsak-error = 'KEY'.
    ENDIF.
    IF ls_bsak-pairing IS INITIAL.
      ADD 1 TO pairing_counter.
      ls_bsak-pairing = pairing_counter.
      MODIFY gt_bsak FROM ls_bsak INDEX ld_index_bsak.
      ls_bsak_store-error = ls_bsak-error.
      ls_bsak_store-control = ls_bsak-control.
      ls_bsak_store-pairing = pairing_counter.
      ls_bsak_store-check = 'O'.
      APPEND ls_bsak_store TO gt_bsak.
    ENDIF.
  ELSEIF ls_bsak-control = '@5D'.
    MODIFY gt_bsak FROM ls_bsak INDEX ld_index_bsak.
  ENDIF.
ENDFORM.

FORM check_missing_bseg.
  DATA ld_masscursor2 TYPE cursor.
  DATA ld_masscursor3 TYPE cursor.
  DATA lt_bsis TYPE TABLE OF bsis.
  DATA ls_bsis TYPE bsis.
  DATA lt_bsas TYPE TABLE OF bsas.
  DATA ls_bsas TYPE bsas.
  DATA lt_bsik TYPE TABLE OF bsik.
  DATA ls_bsik TYPE bsik.
  DATA lt_bsak TYPE TABLE OF bsak.
  DATA ls_bsak TYPE bsak.
  DATA lt_bsid TYPE TABLE OF bsid.
  DATA ls_bsid TYPE bsid.
  DATA lt_bsad TYPE TABLE OF bsad.
  DATA ls_bsad TYPE bsad.
  DATA ls_massdata LIKE LINE OF gt_massdata.
  DATA ls_bseg TYPE bseg.
  DATA ld_tabix TYPE sy-tabix.
  DATA ld_leading TYPE c LENGTH 2.
  DATA ls_t881 TYPE t881.
  DATA ld_ntable TYPE t800a-ntable.
  DATA lt_glu1 TYPE TABLE OF glu1.
  DATA ls_glu1 TYPE glu1.

  gd_extra = 'X'.

  IF p_hkont IS NOT INITIAL.
    IF acdoca_active = 0.
      CALL FUNCTION 'FAGL_GET_LEADING_LEDGER'
        IMPORTING
          e_rldnr = ld_leading.
      SELECT SINGLE * FROM t881
        INTO ls_t881
        WHERE rldnr = ld_leading.
      SELECT SINGLE ntable FROM t800a
        INTO ld_ntable
        WHERE tab = ls_t881-tab.
      OPEN CURSOR WITH HOLD ld_masscursor3
      FOR SELECT * FROM (ld_ntable)
      WHERE rbukrs IN p_bukrs
      AND belnr IN p_belnr
      AND gjahr IN p_gjahr
      AND poper IN p_monat
      AND budat IN p_budat
      AND awtyp IN p_awtyp
      AND usnam IN p_usnam
      AND bstat = ' '
      AND rldnr = ld_leading
      AND racct IN p_hkont
      ORDER BY belnr ASCENDING.

      DO.
        FETCH NEXT CURSOR ld_masscursor3
        INTO CORRESPONDING FIELDS OF TABLE lt_glu1
        PACKAGE SIZE 10000.

        IF sy-subrc NE 0.
          CLOSE CURSOR ld_masscursor3.
          EXIT.
        ENDIF.

        LOOP AT lt_glu1 INTO ls_glu1.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND gjahr = ls_glu1-gjahr
            AND buzei = ls_glu1-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_glu1 TO ls_massdata.
            CLEAR ls_massdata-rldnr.
            ls_massdata-bukrs = ls_glu1-rbukrs.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
      ENDDO.
    ELSE.
      DATA acdoca TYPE c LENGTH 6 VALUE 'ACDOCA'.

      OPEN CURSOR WITH HOLD ld_masscursor3
FOR SELECT * FROM (acdoca)
WHERE rbukrs IN p_bukrs
AND belnr IN p_belnr
AND gjahr IN p_gjahr
AND poper IN p_monat
AND budat IN p_budat
AND awtyp IN p_awtyp
AND usnam IN p_usnam
      AND rldnr = ld_leading
AND bstat = ' '
AND racct IN p_hkont
ORDER BY belnr ASCENDING.

      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor3
        INTO CORRESPONDING FIELDS OF TABLE lt_glu1
        PACKAGE SIZE 10000.

        IF sy-subrc NE 0.
          CLOSE CURSOR ld_masscursor3.
          EXIT.
        ENDIF.

        LOOP AT lt_glu1 INTO ls_glu1.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND gjahr = ls_glu1-gjahr
            AND buzei = ls_glu1-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_glu1 TO ls_massdata.
            CLEAR ls_massdata-rldnr.
            ls_massdata-bukrs = ls_glu1-rbukrs.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
      ENDDO.
    ENDIF.
    DELETE ADJACENT DUPLICATES FROM gt_massdata.
    IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
      LOOP AT gt_massdata INTO ls_massdata.
        ld_tabix = sy-tabix.
        READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          DELETE gt_massdata INDEX ld_tabix.
        ENDIF.
      ENDLOOP.
    ELSEIF gd_rfdt IS NOT INITIAL.
      CLEAR lt_doclist_rfdt[].
      IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      LOOP AT gt_massdata INTO ls_massdata.
        ld_tabix = sy-tabix.
        READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          DELETE gt_massdata INDEX ld_tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.
    IF gt_massdata[] IS NOT INITIAL.
      PERFORM batch.
    ENDIF.
  ENDIF.

  IF p_hkont[] IS NOT INITIAL.
    IF p_allpos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsis AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~hkont IN p_hkont
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsis
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsis INTO ls_bsis.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsis-bukrs
            AND belnr = ls_bsis-belnr
            AND gjahr = ls_bsis-gjahr
            AND buzei = ls_bsis-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsis TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

      OPEN CURSOR WITH HOLD ld_masscursor2
        FOR SELECT * FROM bkpf AS a
        INNER JOIN bsas AS b
        ON a~belnr = b~belnr
        AND a~bukrs = b~bukrs
        AND a~gjahr = b~gjahr
        WHERE a~belnr IN p_belnr
        AND a~bukrs = gs_t001_mass-bukrs
        AND a~gjahr IN p_gjahr
        AND a~gjahr IN p_gjahr
        AND a~monat IN p_monat
        AND a~budat IN p_budat
        AND a~blart IN p_blart
        AND a~xblnr IN p_xblnr
        AND a~awtyp IN p_awtyp
        AND a~usnam IN p_usnam
        AND a~tcode IN p_tcode
        AND a~cpudt IN p_cpudt
        AND ( b~bstat = 'L' OR b~bstat = ' ' )
        AND b~hkont IN p_hkont
        ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsas
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsas INTO ls_bsas.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsas-bukrs
            AND belnr = ls_bsas-belnr
            AND gjahr = ls_bsas-gjahr
            AND buzei = ls_bsas-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsis TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_opepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsis AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~hkont IN p_hkont
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsis
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsis INTO ls_bsis.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsis-bukrs
            AND belnr = ls_bsis-belnr
            AND gjahr = ls_bsis-gjahr
            AND buzei = ls_bsis-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsis TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_clepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsas AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~hkont IN p_hkont
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsas
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsas INTO ls_bsas.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsas-bukrs
            AND belnr = ls_bsas-belnr
            AND gjahr = ls_bsas-gjahr
            AND buzei = ls_bsas-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsis TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ENDIF.
  ENDIF.

  IF p_kunnr[] IS NOT INITIAL.
    IF p_allpos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsid AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~kunnr IN p_kunnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsid
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsid INTO ls_bsid.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsid-bukrs
            AND belnr = ls_bsid-belnr
            AND gjahr = ls_bsid-gjahr
            AND buzei = ls_bsid-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsid TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

      OPEN CURSOR WITH HOLD ld_masscursor2
        FOR SELECT * FROM bkpf AS a
        INNER JOIN bsad AS b
        ON a~belnr = b~belnr
        AND a~bukrs = b~bukrs
        AND a~gjahr = b~gjahr
        WHERE a~belnr IN p_belnr
        AND a~bukrs = gs_t001_mass-bukrs
        AND a~gjahr IN p_gjahr
        AND a~gjahr IN p_gjahr
        AND a~monat IN p_monat
        AND a~budat IN p_budat
        AND a~blart IN p_blart
        AND a~xblnr IN p_xblnr
        AND a~awtyp IN p_awtyp
        AND a~usnam IN p_usnam
        AND a~tcode IN p_tcode
        AND a~cpudt IN p_cpudt
        AND ( b~bstat = 'L' OR b~bstat = ' ' )
        AND b~kunnr IN p_kunnr
        ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsad
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsad INTO ls_bsad.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsad-bukrs
            AND belnr = ls_bsad-belnr
            AND gjahr = ls_bsad-gjahr
            AND buzei = ls_bsad-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsid TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_opepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsid AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~kunnr IN p_kunnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsid
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsid INTO ls_bsid.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsid-bukrs
            AND belnr = ls_bsid-belnr
            AND gjahr = ls_bsid-gjahr
            AND buzei = ls_bsid-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsid TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_clepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsad AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~kunnr IN p_kunnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsad
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsad INTO ls_bsad.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsad-bukrs
            AND belnr = ls_bsad-belnr
            AND gjahr = ls_bsad-gjahr
            AND buzei = ls_bsad-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsid TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ENDIF.
  ENDIF.

  IF p_lifnr[] IS NOT INITIAL.
    IF p_allpos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsik AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~lifnr IN p_lifnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsik
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsik INTO ls_bsik.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsik-bukrs
            AND belnr = ls_bsik-belnr
            AND gjahr = ls_bsik-gjahr
            AND buzei = ls_bsik-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsik TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

      OPEN CURSOR WITH HOLD ld_masscursor2
        FOR SELECT * FROM bkpf AS a
        INNER JOIN bsak AS b
        ON a~belnr = b~belnr
        AND a~bukrs = b~bukrs
        AND a~gjahr = b~gjahr
        WHERE a~belnr IN p_belnr
        AND a~bukrs = gs_t001_mass-bukrs
        AND a~gjahr IN p_gjahr
        AND a~gjahr IN p_gjahr
        AND a~monat IN p_monat
        AND a~budat IN p_budat
        AND a~blart IN p_blart
        AND a~xblnr IN p_xblnr
        AND a~awtyp IN p_awtyp
        AND a~usnam IN p_usnam
        AND a~tcode IN p_tcode
        AND a~cpudt IN p_cpudt
        AND ( b~bstat = 'L' OR b~bstat = ' ' )
        AND b~lifnr IN p_lifnr
        ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsak
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsak INTO ls_bsak.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsak-bukrs
            AND belnr = ls_bsak-belnr
            AND gjahr = ls_bsak-gjahr
            AND buzei = ls_bsak-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsik TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_opepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsik AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~lifnr IN p_lifnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsik
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsik INTO ls_bsik.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsik-bukrs
            AND belnr = ls_bsik-belnr
            AND gjahr = ls_bsik-gjahr
            AND buzei = ls_bsik-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsik TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ELSEIF p_clepos = 'X'.
      OPEN CURSOR WITH HOLD ld_masscursor2
  FOR SELECT * FROM bkpf AS a
  INNER JOIN bsak AS b
  ON a~belnr = b~belnr
  AND a~bukrs = b~bukrs
  AND a~gjahr = b~gjahr
  WHERE a~belnr IN p_belnr
  AND a~bukrs = gs_t001_mass-bukrs
  AND a~gjahr IN p_gjahr
  AND a~gjahr IN p_gjahr
  AND a~monat IN p_monat
  AND a~budat IN p_budat
  AND a~blart IN p_blart
  AND a~xblnr IN p_xblnr
  AND a~awtyp IN p_awtyp
  AND a~usnam IN p_usnam
  AND a~tcode IN p_tcode
  AND a~cpudt IN p_cpudt
  AND ( b~bstat = 'L' OR b~bstat = ' ' )
  AND b~lifnr IN p_lifnr
  ORDER BY a~belnr ASCENDING.
      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor2
        INTO CORRESPONDING FIELDS OF TABLE lt_bsak
        PACKAGE SIZE 10000.
        IF sy-subrc NE 0 .
          CLOSE CURSOR ld_masscursor2.
          EXIT.
        ENDIF.
        LOOP AT lt_bsak INTO ls_bsak.
          SELECT SINGLE * FROM bseg
            INTO ls_bseg
            WHERE bukrs = ls_bsak-bukrs
            AND belnr = ls_bsak-belnr
            AND gjahr = ls_bsak-gjahr
            AND buzei = ls_bsak-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_bsik TO ls_massdata.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM gt_massdata.
        IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ELSEIF gd_rfdt IS NOT INITIAL.
          CLEAR lt_doclist_rfdt[].
          IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
          LOOP AT gt_massdata INTO ls_massdata.
            ld_tabix = sy-tabix.
            READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE gt_massdata INDEX ld_tabix.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF gt_massdata[] IS NOT INITIAL. PERFORM batch. ENDIF.
      ENDDO.

    ENDIF.
  ENDIF.
ENDFORM.

FORM check_missing_bseg_add.
  DATA ld_masscursor2 TYPE cursor.
  DATA ld_masscursor3 TYPE cursor.
  DATA ls_massdata LIKE LINE OF gt_massdata.
  DATA ls_bseg_add TYPE bseg_add.
  DATA ld_tabix TYPE sy-tabix.
  DATA ld_leading TYPE c LENGTH 2.
  DATA ls_t881 TYPE t881.
  DATA ld_ntable TYPE t800a-ntable.
  DATA lt_glu1 TYPE TABLE OF glu1.
  DATA ls_glu1 TYPE glu1.

  gd_extra = 'X'.

  IF p_hkont IS NOT INITIAL.
    IF acdoca_active = 0.
      CALL FUNCTION 'FAGL_GET_LEADING_LEDGER'
        IMPORTING
          e_rldnr = ld_leading.
      SELECT SINGLE * FROM t881
        INTO ls_t881
        WHERE rldnr = ld_leading.
      SELECT SINGLE ntable FROM t800a
        INTO ld_ntable
        WHERE tab = ls_t881-tab.
      OPEN CURSOR WITH HOLD ld_masscursor3
      FOR SELECT * FROM (ld_ntable)
      WHERE rbukrs IN p_bukrs
      AND belnr IN p_belnr
      AND gjahr IN p_gjahr
      AND poper IN p_monat
      AND budat IN p_budat
      AND awtyp IN p_awtyp
      AND usnam IN p_usnam
      AND bstat = 'L'
      AND rldnr = ld_leading
      AND racct IN p_hkont
      ORDER BY belnr ASCENDING.

      DO.
        FETCH NEXT CURSOR ld_masscursor3
        INTO CORRESPONDING FIELDS OF TABLE lt_glu1
        PACKAGE SIZE 10000.

        IF sy-subrc NE 0.
          CLOSE CURSOR ld_masscursor3.
          EXIT.
        ENDIF.

        LOOP AT lt_glu1 INTO ls_glu1.
          SELECT SINGLE * FROM bseg_add
            INTO ls_bseg_add
            WHERE bukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND gjahr = ls_glu1-gjahr
            AND buzei = ls_glu1-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_glu1 TO ls_massdata.
            CLEAR ls_massdata-rldnr.
            ls_massdata-bukrs = ls_glu1-rbukrs.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
      ENDDO.
    ELSE.
      DATA acdoca TYPE c LENGTH 6 VALUE 'ACDOCA'.

      OPEN CURSOR WITH HOLD ld_masscursor3
FOR SELECT * FROM (acdoca)
WHERE rbukrs IN p_bukrs
AND belnr IN p_belnr
AND gjahr IN p_gjahr
AND poper IN p_monat
AND budat IN p_budat
AND awtyp IN p_awtyp
AND usnam IN p_usnam
      AND rldnr = ld_leading
AND bstat = ' '
AND racct IN p_hkont
ORDER BY belnr ASCENDING.

      DO.
        CLEAR gt_massdata[].
        FETCH NEXT CURSOR ld_masscursor3
        INTO CORRESPONDING FIELDS OF TABLE lt_glu1
        PACKAGE SIZE 10000.

        IF sy-subrc NE 0.
          CLOSE CURSOR ld_masscursor3.
          EXIT.
        ENDIF.

        LOOP AT lt_glu1 INTO ls_glu1.
          SELECT SINGLE * FROM bseg_add
            INTO ls_bseg_add
            WHERE bukrs = ls_glu1-rbukrs
            AND belnr = ls_glu1-belnr
            AND gjahr = ls_glu1-gjahr
            AND buzei = ls_glu1-buzei.
          IF sy-subrc = 4.
            MOVE-CORRESPONDING ls_glu1 TO ls_massdata.
            CLEAR ls_massdata-rldnr.
            ls_massdata-bukrs = ls_glu1-rbukrs.
            APPEND ls_massdata TO gt_massdata.
          ENDIF.
        ENDLOOP.
      ENDDO.
    ENDIF.
    DELETE ADJACENT DUPLICATES FROM gt_massdata.
    IF gd_rfdt IS INITIAL AND gt_doclist_store IS NOT INITIAL.
      LOOP AT gt_massdata INTO ls_massdata.
        ld_tabix = sy-tabix.
        READ TABLE gt_doclist_store WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          DELETE gt_massdata INDEX ld_tabix.
        ENDIF.
      ENDLOOP.
    ELSEIF gd_rfdt IS NOT INITIAL.
      CLEAR lt_doclist_rfdt[].
      IMPORT lt_doclist_rfdt
FROM DATABASE rfdt(zf) ID gd_rfdt_timestamp_doclist.
      LOOP AT gt_massdata INTO ls_massdata.
        ld_tabix = sy-tabix.
        READ TABLE lt_doclist_rfdt WITH KEY bukrs = ls_massdata-bukrs belnr = ls_massdata-belnr gjahr = ls_massdata-gjahr TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          DELETE gt_massdata INDEX ld_tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.
    IF gt_massdata[] IS NOT INITIAL.
      PERFORM batch.
    ENDIF.
  ENDIF.
ENDFORM.

FORM check_superfluous.
  DATA ls_bsis LIKE LINE OF gt_bsis.
  DATA ld_tabix TYPE sy-tabix.
  DATA ls_flag LIKE LINE OF gt_flag.
  DATA ls_bseg LIKE LINE OF gt_bseg.
  DATA ls_bsid LIKE LINE OF gt_bsid.
  DATA ls_bsik LIKE LINE OF gt_bsik.
  DATA ls_bsak LIKE LINE OF gt_bsak.
  DATA ls_bsas LIKE LINE OF gt_bsas.
  DATA ls_bsad LIKE LINE OF gt_bsad.

  LOOP AT gt_bsis INTO ls_bsis.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsis-bukrs belnr = ls_bsis-belnr gjahr = ls_bsis-gjahr buzei = ls_bsis-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'S'.
      IF ls_bseg-xkres NE 'X'.
        ls_bsis-check = ' '.
        ls_bsis-control = '@5D@'.
        MODIFY gt_bsis FROM ls_bsis INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsis TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSIS'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ELSE.
        IF ls_bseg-augbl IS NOT INITIAL.
          ls_bsis-check = ' '.
          ls_bsis-control = '@5D@'.
          MODIFY gt_bsis FROM ls_bsis INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bsis TO ls_flag.
          ls_flag-error = 'SUPERFLUOUS BSIS'.
          ls_flag-control = '@5D@'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDIF.
    ELSEIF ls_bseg-koart = 'D' OR ls_bseg-koart = 'K'.
      IF ls_bseg-xhres NE 'X'.
        ls_bsis-check = ' '.
        ls_bsis-control = '@5D@'.
        MODIFY gt_bsis FROM ls_bsis INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsis TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSIS'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsas INTO ls_bsas.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsas-bukrs belnr = ls_bsas-belnr gjahr = ls_bsas-gjahr buzei = ls_bsas-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'S'.
      IF ls_bseg-xkres NE 'X'.
        ls_bsas-check = ' '.
        ls_bsas-control = '@5D@'.
        MODIFY gt_bsas FROM ls_bsas INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsas TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSAS'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ELSE.
        IF ls_bseg-augbl IS INITIAL.
          ls_bsas-check = ' '.
          ls_bsas-control = '@5D@'.
          MODIFY gt_bsas FROM ls_bsas INDEX ld_tabix.
          MOVE-CORRESPONDING ls_bsas TO ls_flag.
          ls_flag-error = 'SUPERFLUOUS BSAS'.
          ls_flag-control = '@5D@'.
          APPEND ls_flag TO gt_flag.
        ENDIF.
      ENDIF.
    ELSEIF ls_bseg-koart = 'D' OR ls_bseg-koart = 'K'.
      IF ls_bseg-xhres NE 'X'.
        ls_bsas-check = ' '.
        ls_bsas-control = '@5D@'.
        MODIFY gt_bsas FROM ls_bsas INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsas TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSAS'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsid INTO ls_bsid.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsid-bukrs belnr = ls_bsid-belnr gjahr = ls_bsid-gjahr buzei = ls_bsid-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'D'.
      IF ls_bseg-augbl IS NOT INITIAL.
        ls_bsid-check = ' '.
        ls_bsid-control = '@5D@'.
        MODIFY gt_bsid FROM ls_bsid INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsid TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSID'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ELSEIF ls_bseg-koart = 'S' OR ls_bseg-koart = 'K'.
      ls_bsid-check = ' '.
      ls_bsid-control = '@5D@'.
      MODIFY gt_bsid FROM ls_bsid INDEX ld_tabix.
      MOVE-CORRESPONDING ls_bsid TO ls_flag.
      ls_flag-error = 'SUPERFLUOUS BSID'.
      ls_flag-control = '@5D@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsad INTO ls_bsad.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsad-bukrs belnr = ls_bsad-belnr gjahr = ls_bsad-gjahr buzei = ls_bsad-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'D'.
      IF ls_bseg-augbl IS INITIAL.
        ls_bsad-check = ' '.
        ls_bsad-control = '@5D@'.
        MODIFY gt_bsad FROM ls_bsad INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsad TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSAD'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ELSEIF ls_bseg-koart = 'S' OR ls_bseg-koart = 'K'.
      ls_bsad-check = ' '.
      ls_bsad-control = '@5D@'.
      MODIFY gt_bsad FROM ls_bsad INDEX ld_tabix.
      MOVE-CORRESPONDING ls_bsad TO ls_flag.
      ls_flag-error = 'SUPERFLUOUS BSAD'.
      ls_flag-control = '@5D@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsik INTO ls_bsik.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsik-bukrs belnr = ls_bsik-belnr gjahr = ls_bsik-gjahr buzei = ls_bsik-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'K'.
      IF ls_bseg-augbl IS NOT INITIAL.
        ls_bsik-check = ' '.
        ls_bsik-control = '@5D@'.
        MODIFY gt_bsik FROM ls_bsik INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsik TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSIK'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ELSEIF ls_bseg-koart = 'S' OR ls_bseg-koart = 'D'.
      ls_bsik-check = ' '.
      ls_bsik-control = '@5D@'.
      MODIFY gt_bsik FROM ls_bsik INDEX ld_tabix.
      MOVE-CORRESPONDING ls_bsik TO ls_flag.
      ls_flag-error = 'SUPERFLUOUS BSIK'.
      ls_flag-control = '@5D@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_bsak INTO ls_bsak.
    ld_tabix = sy-tabix.
    READ TABLE gt_bseg WITH KEY bukrs = ls_bsak-bukrs belnr = ls_bsak-belnr gjahr = ls_bsak-gjahr buzei = ls_bsak-buzei INTO ls_bseg.
    IF ls_bseg-koart = 'K'.
      IF ls_bseg-augbl IS INITIAL.
        ls_bsak-check = ' '.
        ls_bsak-control = '@5D@'.
        MODIFY gt_bsak FROM ls_bsak INDEX ld_tabix.
        MOVE-CORRESPONDING ls_bsak TO ls_flag.
        ls_flag-error = 'SUPERFLUOUS BSAK'.
        ls_flag-control = '@5D@'.
        APPEND ls_flag TO gt_flag.
      ENDIF.
    ELSEIF ls_bseg-koart = 'S' OR ls_bseg-koart = 'D'.
      ls_bsak-check = ' '.
      ls_bsak-control = '@5D@'.
      MODIFY gt_bsak FROM ls_bsak INDEX ld_tabix.
      MOVE-CORRESPONDING ls_bsak TO ls_flag.
      ls_flag-error = 'SUPERFLUOUS BSAK'.
      ls_flag-control = '@5D@'.
      APPEND ls_flag TO gt_flag.
    ENDIF.
  ENDLOOP.
ENDFORM.

***********************************************************************
* FUNCTION TO BE USED ON RFC SENDER SYSTEM.
***********************************************************************
*
*FUNCTION z_get_rem_doc_book.
*
*  DATA: lt_rfc_BKPF        TYPE TABLE OF bkpf,
*        lt_rfc_bseg        TYPE TABLE OF bseg,
*        lt_rfc_bsis        TYPE TABLE OF bsis,
*        lt_rfc_bsas        TYPE TABLE OF bsas,
*        lt_rfc_bsik        TYPE TABLE OF bsik,
*        lt_rfc_bsak        TYPE TABLE OF bsak,
*        lt_rfc_bsid        TYPE TABLE OF bsid,
*        lt_rfc_bsad        TYPE TABLE OF bsad,
*        lt_rfc_bsed        TYPE TABLE OF bsed,
*        lt_rfc_bset        TYPE TABLE OF bset,
*        lt_rfc_bsec        TYPE TABLE OF bsec,
*        lt_rfc_bse_clr     TYPE TABLE OF bse_clr,
*        lt_rfc_splinfo     TYPE TABLE OF fagl_splinfo,
*        lt_rfc_splinfo_val TYPE TABLE OF fagl_splinfo_val,
*        lt_rfc_glu1mod     TYPE TABLE OF glu1mod,
*        lt_rfc_bseg_add    TYPE TABLE OF bseg_add.
*
*  DATA: BEGIN OF glu1mod.
*  DATA zzz_tabname TYPE t800a-ntable.
*  INCLUDE TYPE glu1.
*  DATA END OF glu1mod.
*
*
* DATA acdoca_active type i.
*  SELECT COUNT( * ) FROM dd02l
*    WHERE tabname = 'ACDOCA'
*    INTO acdoca_active.
*
* DATA:  lt_glu1    TYPE glu1,
*        ls_glu1    TYPE glu1,
*        ls_glu1mod LIKE glu1mod.
*
*  DATA: lt_t001    TYPE TABLE OF t001,
*        lt_t881    TYPE TABLE OF t881,
*        ls_t881    TYPE t881,
*        lt_t800a   TYPE TABLE OF t800a-ntable,
*        ls_t800a   TYPE t800a-ntable,
*        it_ledgers type fagl_rldnr_tab,
*        ld_ledger type rldnr.
*
*  SELECT * FROM bkpf CLIENT SPECIFIED
*    WHERE mandt = client
*    AND bukrs IN bukrs
*    AND belnr IN belnr
*    AND gjahr IN gjahr
*    INTO TABLE lt_rfc_bkpf.
*
*  SELECT * FROM bseg CLIENT SPECIFIED
*    WHERE mandt = client
*    AND bukrs IN bukrs
*    AND belnr IN belnr
*    AND gjahr IN gjahr
*    INTO TABLE lt_rfc_bseg.
*
* if acdoca_active = 0.
*  SELECT * FROM bsis CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsis.
*
*  SELECT * FROM bsas CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsas.
*
*  SELECT * FROM bsik CLIENT SPECIFIED
*    WHERE mandt = client
*    AND bukrs IN bukrs
*    AND belnr IN belnr
*    AND gjahr IN gjahr
*    INTO TABLE lt_rfc_bsik.
*
*  SELECT * FROM bsak CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsak.
*
*  SELECT * FROM bsid CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsid.
*
*  SELECT * FROM bsad CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsad.
* endif.
*
*  SELECT * FROM bsec CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bsec.
*
*  SELECT * FROM bsed CLIENT SPECIFIED
*    WHERE mandt = client
*    AND bukrs IN bukrs
*    AND belnr IN belnr
*    AND gjahr IN gjahr
*    INTO TABLE lt_rfc_bsed.
*
*  SELECT * FROM bset CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_bset.
*
*  SELECT * FROM bse_clr CLIENT SPECIFIED
*WHERE mandt = client
*AND bukrs IN bukrs
*AND belnr IN belnr
*AND gjahr IN gjahr
*INTO TABLE lt_rfc_bse_clr.
*
*  SELECT * FROM bseg_add CLIENT SPECIFIED
*WHERE mandt = client
*AND bukrs IN bukrs
*AND belnr IN belnr
*AND gjahr IN gjahr
*INTO TABLE lt_rfc_bseg_add.
*  endfuction.
*
*  SELECT * FROM fagl_splinfo CLIENT SPECIFIED
*    WHERE mandt = client
*    AND bukrs IN bukrs
*    AND belnr IN belnr
*    AND gjahr IN gjahr
*    INTO TABLE lt_rfc_splinfo.
*
*  SELECT * FROM fagl_splinfo_val CLIENT SPECIFIED
*  WHERE mandt = client
*  AND bukrs IN bukrs
*  AND belnr IN belnr
*  AND gjahr IN gjahr
*  INTO TABLE lt_rfc_splinfo_val.
*
*  SELECT * FROM t001
*    WHERE bukrs IN p_bukrs
*    INTO TABLE lt_t001.
*  LOOP AT lt_t001 INTO ls_t001.
*    CALL FUNCTION 'FAGL_GET_ALL_LEDGERS_IN_BUKRS'
*      EXPORTING
*        i_bukrs    = ls_t001-bukrs
*      IMPORTING
*        et_ledgers = it_ledgers.
*    loop at it_ledgers into ld_ledger.
*  SELECT * FROM t881
*    where rldnr = ld_ledger
*    appending TABLE lt_t881.
*    endloop.
*    endloop.
*  LOOP AT lt_t881 INTO ls_t881.
*    SELECT SINGLE ntable FROM t800a
*      WHERE tab = ls_t881-tab
*      INTO ls_t800a.
*    APPEND ls_t800a TO lt_t800a.
*  ENDLOOP.
*  SORT lt_t800a ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM lt_t800a.
*
* if acdoca_active = 1.
*  clear lt_t800a.
*  ls_t800a = 'ACDOCA'.
*  append ls_t800a to lt_t800a.
*
*  LOOP AT lt_t800a INTO ls_t800a.
*    IF ls_t800a IS NOT INITIAL.
*      TRY.
*          SELECT * FROM (ls_t800a) CLIENT SPECIFIED
*            WHERE mandt = client
*            AND rbukrs IN p_bukrs
*            AND BELNR IN p_belnr
*            AND ryear IN p_gjahr
*            APPENDING CORRESPONDING FIELDS OF TABLE lt_glu1.
*        CATCH cx_sy_dynamic_osql_semantics.
*      ENDTRY.
*    ENDIF.
*
*    LOOP AT lt_glu1 INTO ls_glu1.
*      MOVE-CORRESPONDING ls_glu1 TO ls_glu1mod.
*      ls_glu1mod-zzz_tabname = ls_t800a.
*      APPEND ls_glu1mod TO lt_rfc_glu1mod.
*    ENDLOOP.
*    CLEAR lt_glu1.
*  ENDLOOP.
*
*ENDFUNCTION.